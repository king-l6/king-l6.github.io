<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>debug平台规则解析</title>
    <link href="/bilibili/%E9%9C%80%E6%B1%82/debug%E5%B9%B3%E5%8F%B0/debug%E5%B9%B3%E5%8F%B0%E8%A7%84%E5%88%99%E8%A7%A3%E6%9E%90/"/>
    <url>/bilibili/%E9%9C%80%E6%B1%82/debug%E5%B9%B3%E5%8F%B0/debug%E5%B9%B3%E5%8F%B0%E8%A7%84%E5%88%99%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="debug平台-规则解析"><a href="#debug平台-规则解析" class="headerlink" title="debug平台-规则解析"></a><strong>debug平台-规则解析</strong></h1><h3 id="1-1、评估schema获取"><a href="#1-1、评估schema获取" class="headerlink" title="1.1、评估schema获取"></a><strong>1.1、评估schema获取</strong></h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a><strong>需求</strong></h4><p>之前版本是有前端写死计算获得，后续评估的schema托管到后端，</p><p>目前讨论，在paladin上托管yaml文件的方式</p><h4 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><p>将yaml解析的数据存到store中，在此页面加载数据的时候直接请求存下来，然后点击打标界面的时候通过standards调用数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AMessage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue/es/message&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable constant_">YAML</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;yaml&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">TIANMA_FEMALE_STANDARD</span>, <span class="hljs-variable constant_">STROY_STANDARD</span>, <span class="hljs-variable constant_">TIANMA_MALE_STANDARD</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/const&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getSchema &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../api&#x27;</span>;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Option</span> &#123;<br>  <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">value</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">When</span> &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">value</span>: <span class="hljs-built_in">any</span>;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Standard</span> &#123;<br>  <span class="hljs-attr">group</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-keyword">default</span>?: <span class="hljs-built_in">number</span>;<br>  extraOptions?: <span class="hljs-title class_">Option</span>[];<br>  when?: <span class="hljs-title class_">When</span>[];<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> standardOptions = [<br>  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;天马-男性&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-variable constant_">TIANMA_MALE_STANDARD</span> &#125;,<br>  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;天马-女性&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-variable constant_">TIANMA_FEMALE_STANDARD</span> &#125;,<br>  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Story&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-variable constant_">STROY_STANDARD</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> standardTianmaOptions = [<br>  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;天马-男性&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-variable constant_">TIANMA_MALE_STANDARD</span> &#125;,<br>  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;天马-女性&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-variable constant_">TIANMA_FEMALE_STANDARD</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> standardMap = &#123;<br>  [<span class="hljs-variable constant_">TIANMA_MALE_STANDARD</span>]: <span class="hljs-string">&#x27;天马-男性&#x27;</span>,<br>  [<span class="hljs-variable constant_">TIANMA_FEMALE_STANDARD</span>]: <span class="hljs-string">&#x27;天马-女性&#x27;</span>,<br>  [<span class="hljs-variable constant_">STROY_STANDARD</span>]: <span class="hljs-string">&#x27;Story&#x27;</span>,<br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">StandardParams</span> &#123;<br>  <span class="hljs-attr">dim</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>;<br>  <span class="hljs-attr">standard</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>  <span class="hljs-attr">loading</span>: <span class="hljs-built_in">boolean</span>;<br>  <span class="hljs-attr">tianmaMaleSchema</span>: <span class="hljs-built_in">any</span>[];<br>  <span class="hljs-attr">tianmaFeMaleSchema</span>: <span class="hljs-built_in">any</span>[];<br>  <span class="hljs-attr">storySchema</span>: <span class="hljs-built_in">any</span>[];<br>  <span class="hljs-attr">schemaMap</span>: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> useSchemaStore = <span class="hljs-title function_">defineStore</span>(&#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;schema-store&#x27;</span>,<br>  <span class="hljs-attr">state</span>: (): <span class="hljs-function"><span class="hljs-params">State</span> =&gt;</span> (&#123;<br>    <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">tianmaMaleSchema</span>: [],<br>    <span class="hljs-attr">tianmaFeMaleSchema</span>: [],<br>    <span class="hljs-attr">storySchema</span>: [],<br>    <span class="hljs-attr">schemaMap</span>: &#123;&#125;,<br>  &#125;),<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetchSchemaResult</span>(<span class="hljs-params">userType?: <span class="hljs-built_in">any</span></span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">const</span> actions = [<br>          <span class="hljs-title function_">getSchema</span>(<span class="hljs-variable constant_">TIANMA_MALE_STANDARD</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; data &#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaMaleSchema</span> = <span class="hljs-variable constant_">YAML</span>.<span class="hljs-title function_">parse</span>(data);<br>          &#125;),<br>          <span class="hljs-title function_">getSchema</span>(<span class="hljs-variable constant_">STROY_STANDARD</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; data &#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">storySchema</span> = <span class="hljs-variable constant_">YAML</span>.<span class="hljs-title function_">parse</span>(data);<br>          &#125;),<br>          <span class="hljs-title function_">getSchema</span>(<span class="hljs-variable constant_">TIANMA_FEMALE_STANDARD</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; data &#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaFeMaleSchema</span> = <span class="hljs-variable constant_">YAML</span>.<span class="hljs-title function_">parse</span>(data);<br>          &#125;),<br>        ];<br>        <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(actions);<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">if</span> (userType === <span class="hljs-number">3</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span> = &#123;&#125;;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaMaleSchema</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaFeMaleSchema</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item: Standard</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[item.<span class="hljs-property">key</span>]) &#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[item.<span class="hljs-property">key</span>] = item.<span class="hljs-property">name</span>;<br>            &#125;<br>          &#125;);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (userType === <span class="hljs-number">2</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span> = &#123;&#125;;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">storySchema</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">story: Standard</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[story.<span class="hljs-property">key</span>]) &#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[story.<span class="hljs-property">key</span>] = story.<span class="hljs-property">name</span>;<br>            &#125;<br>          &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span> = &#123;&#125;;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaMaleSchema</span><br>            .<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaFeMaleSchema</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">storySchema</span>)<br>            .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item: Standard</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[item.<span class="hljs-property">key</span>]) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[item.<span class="hljs-property">key</span>] = item.<span class="hljs-property">name</span>;<br>              &#125;<br>            &#125;);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-attr">error</span>: <span class="hljs-built_in">any</span>) &#123;<br>        <span class="hljs-title class_">AMessage</span>.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-title function_">getStandard</span>(<span class="hljs-params">params: StandardParams, unFilter?: <span class="hljs-built_in">boolean</span></span>) &#123;<br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">processStandard</span> = (<span class="hljs-params">standard: Standard[]</span>) =&gt; (unFilter<br>        ? standard<br>        : standard.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> (i.<span class="hljs-property">when</span> ? i.<span class="hljs-property">when</span>[<span class="hljs-number">0</span>].<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;dim&#x27;</span> &amp;&amp; i.<span class="hljs-property">when</span>[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>.<span class="hljs-title function_">includes</span>(params.<span class="hljs-property">dim</span>) : <span class="hljs-literal">true</span>)));<br>      <span class="hljs-keyword">const</span> standards = &#123;<br>        [<span class="hljs-variable constant_">TIANMA_MALE_STANDARD</span>]: <span class="hljs-title function_">processStandard</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaMaleSchema</span>),<br>        [<span class="hljs-variable constant_">STROY_STANDARD</span>]: <span class="hljs-title function_">processStandard</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">storySchema</span>),<br>        [<span class="hljs-variable constant_">TIANMA_FEMALE_STANDARD</span>]: <span class="hljs-title function_">processStandard</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaFeMaleSchema</span>),<br>      &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">number</span>, <span class="hljs-title class_">Standard</span>[]&gt;;<br>      <span class="hljs-keyword">return</span> standards[params?.<span class="hljs-property">standard</span> || <span class="hljs-number">0</span>];<br>    &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useSchemaStore;<br><br></code></pre></td></tr></table></figure><h3 id="1-2、用户类别"><a href="#1-2、用户类别" class="headerlink" title="1.2、用户类别"></a><strong>1.2、用户类别</strong></h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a><strong>需求</strong></h4><p><img src="https://secure2.wostatic.cn/static/hABwRrL3zFVP2Vmx3MXdhs/image.png?auth_key=1719477598-3mqLSLxRh2fw9SSEv2UFyn-0-0a33033fe7e1eaca984237f4a4489b1c"></p><p>可以根据左边的选择自动分类</p><p>映射规则：</p><ol><li>天马-大盘，天马-固定500 &#x3D;&gt; 用户类别：大盘</li><li>天马-低活，天马-低活-全链路日志 &#x3D;&gt; 用户类别：低活</li><li>其他，维持原样</li></ol><h4 id="前端实现-1"><a href="#前端实现-1" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><p>如下图1.1-2所示：</p><p>第一步：编写Map对照数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">USER_MAP</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; = &#123;<br>  [<span class="hljs-string">`<span class="hljs-subst">$&#123;BIZ_TYPE_TIANMA&#125;</span>#<span class="hljs-subst">$&#123;USER_TYPE_HIGH_ACTIVE&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-number">0</span>&#125;</span>`</span>]: <span class="hljs-string">`<span class="hljs-subst">$&#123;USER_TYPE_HIGH_ACTIVE&#125;</span>`</span>,<br>  [<span class="hljs-string">`<span class="hljs-subst">$&#123;BIZ_TYPE_TIANMA&#125;</span>#<span class="hljs-subst">$&#123;USER_TYPE_DEFAULT_ACTIVE&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-number">2</span>&#125;</span>`</span>]: <span class="hljs-string">`<span class="hljs-subst">$&#123;USER_TYPE_HIGH_ACTIVE&#125;</span>`</span>,<br>  [<span class="hljs-string">`<span class="hljs-subst">$&#123;BIZ_TYPE_TIANMA&#125;</span>#<span class="hljs-subst">$&#123;USER_TYPE_LOW_ACTIVE&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-number">0</span>&#125;</span>`</span>]: <span class="hljs-string">`<span class="hljs-subst">$&#123;USER_TYPE_LOW_ACTIVE&#125;</span>`</span>,<br>  [<span class="hljs-string">`<span class="hljs-subst">$&#123;BIZ_TYPE_TIANMA&#125;</span>#<span class="hljs-subst">$&#123;USER_TYPE_LOW_ACTIVE&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-number">1</span>&#125;</span>`</span>]: <span class="hljs-string">`<span class="hljs-subst">$&#123;USER_TYPE_LOW_ACTIVE&#125;</span>`</span>,<br>  [<span class="hljs-string">`<span class="hljs-subst">$&#123;BIZ_TYPE_STORY&#125;</span>#<span class="hljs-subst">$&#123;USER_TYPE_HIGH_ACTIVE&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-number">0</span>&#125;</span>`</span>]: <span class="hljs-string">&#x27;&#x27;</span>,<br>  [<span class="hljs-string">`<span class="hljs-subst">$&#123;BIZ_TYPE_STORY&#125;</span>#<span class="hljs-subst">$&#123;USER_TYPE_LOW_ACTIVE&#125;</span>#<span class="hljs-subst">$&#123;<span class="hljs-number">0</span>&#125;</span>`</span>]: <span class="hljs-string">&#x27;&#x27;</span>,<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>第二步：使用pinia存储数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">const</span> useTypeStore = <span class="hljs-title function_">defineStore</span>(&#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;user-type-store&#x27;</span>,<br>  <span class="hljs-attr">state</span>: (): <span class="hljs-function"><span class="hljs-params">State</span> =&gt;</span> (&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  &#125;),<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">setType</span>(<span class="hljs-params">payload: <span class="hljs-built_in">string</span></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = payload;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useTypeStore;<br><br></code></pre></td></tr></table></figure><p>第三步：在左侧change的时候将userType持久化到pinia</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> userType = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">const</span> typeStore = <span class="hljs-title function_">useTypeStore</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChange</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchData</span>();<br>  userType.<span class="hljs-property">value</span> = <span class="hljs-variable constant_">USER_MAP</span>[<span class="hljs-string">`<span class="hljs-subst">$&#123;params.value.<span class="hljs-keyword">type</span>&#125;</span>#<span class="hljs-subst">$&#123;params.value.userActiveType&#125;</span>#<span class="hljs-subst">$&#123;params.value.hasLog&#125;</span>`</span> || <span class="hljs-number">0</span>];<br>  typeStore.<span class="hljs-title function_">setType</span>(userType.<span class="hljs-property">value</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;userType&#x27;</span>, userType.<span class="hljs-property">value</span>, typeStore.<span class="hljs-property">type</span>);<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>第四步：在弹框初始化的时候将params中的userType设置为pinia中的type值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> typeStore = <span class="hljs-title function_">useTypeStore</span>();<br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  params.<span class="hljs-property">value</span>.<span class="hljs-property">userType</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;typeStore.<span class="hljs-keyword">type</span>&#125;</span>`</span>;<br>  ...<br>  &#125;);Ï<br><br></code></pre></td></tr></table></figure><h3 id="1-3、打标Tab名称调整"><a href="#1-3、打标Tab名称调整" class="headerlink" title="1.3、打标Tab名称调整"></a><strong>1.3、打标Tab名称调整</strong></h3><h4 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a><strong>需求</strong></h4><p>名称调整</p><ol><li>天马 &#x3D;&gt; 天马-男性</li><li>女性 &#x3D;&gt; 天马-女性</li><li>Story 维持不变</li></ol><h4 id="前端实现-2"><a href="#前端实现-2" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><p>名称调整</p><ol><li>天马 &#x3D;&gt; 天马-男性</li><li>女性 &#x3D;&gt; 天马-女性</li><li>Story 维持不变</li></ol><h3 id="1-4、新增打标Tab自动定位"><a href="#1-4、新增打标Tab自动定位" class="headerlink" title="1.4、新增打标Tab自动定位"></a><strong>1.4、新增打标Tab自动定位</strong></h3><h4 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a><strong>需求</strong></h4><p>根据用户Gender属性，点击用户维度的打标按钮，自动定位到对应的tab</p><ol><li>男性 &#x3D;&gt; 天马-男性</li><li>女性 &#x3D;&gt; 天马-女性</li></ol><h4 id="前端实现-3"><a href="#前端实现-3" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><p>第一步：编写Map对照数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">USERA_GENDER_MAP</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; = &#123;<br>  男性: <span class="hljs-string">`<span class="hljs-subst">$&#123;TIANMA_MALE_STANDARD&#125;</span>`</span>,<br>  男: <span class="hljs-string">`<span class="hljs-subst">$&#123;TIANMA_MALE_STANDARD&#125;</span>`</span>,<br>  女性: <span class="hljs-string">`<span class="hljs-subst">$&#123;TIANMA_FEMALE_STANDARD&#125;</span>`</span>,<br>  女: <span class="hljs-string">`<span class="hljs-subst">$&#123;TIANMA_FEMALE_STANDARD&#125;</span>`</span>,<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>第二步：将接口<code>api/ai-debug/user</code>返回数据中的性别利用Map对象存到pinia中(此处删除了<strong>useHistoryUser.ts文件中的debounce，待考究</strong>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">useUserStore</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleFetch</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (params.<span class="hljs-property">value</span>.<span class="hljs-property">start</span> &amp;&amp; params.<span class="hljs-property">value</span>.<span class="hljs-property">end</span> &amp;&amp; params.<span class="hljs-property">value</span>.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchUser</span>();<br>    <span class="hljs-comment">/** 将user的gender值存到pinia */</span><br>    <span class="hljs-keyword">const</span> genderTemp = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(userState.<span class="hljs-property">value</span>?.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>].<span class="hljs-property">expData</span>)[<span class="hljs-string">&#x27;性别&#x27;</span>];<br>    userStore.<span class="hljs-title function_">setGender</span>(<span class="hljs-variable constant_">USERA_GENDER_MAP</span>[genderTemp]);<br>    <span class="hljs-title function_">fetchHistoryList</span>();<br>    <span class="hljs-comment">/** 此处因为所用的假接口必须传mid，故作此操作 */</span><br>    markStore.<span class="hljs-title function_">setParams</span>(&#123; ...params.<span class="hljs-property">value</span>, <span class="hljs-attr">page_num</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">page_size</span>: <span class="hljs-number">999</span> &#125;);<br>    markStore.<span class="hljs-title function_">getMarks</span>();<br>  &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p>第三步：拿出pinia中存储的gender值，过滤掉目前数组中的gender值，并把gender值添加到数组的首位</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleCheckLocal</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> localStorageValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;mark-standard-order&#x27;</span>) || initialData.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>  <span class="hljs-keyword">const</span> verifyRegExp = <span class="hljs-regexp">/^[1-3],[1-3],[1-3]$/</span>;<br>  <span class="hljs-keyword">if</span> (!verifyRegExp.<span class="hljs-title function_">test</span>(localStorageValue)) <span class="hljs-keyword">return</span> initialData;<br>  <span class="hljs-keyword">const</span> standardOrderTemp = [+userGender].<span class="hljs-title function_">concat</span>(<br>    localStorageValue<br>      .<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br>      .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> !!i &amp;&amp; i !== userGender)<br>      .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> +i),<br>  );<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(standardOrderTemp).<span class="hljs-property">size</span> === <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> standardOrderTemp;<br>  <span class="hljs-keyword">return</span> initialData;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>第四步：弹框右上角设置按钮弹框中重新排序确定后过滤掉目前数组中的gender值，并把gender值添加到数组的首位</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleConfirm</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  standardOrderArr.<span class="hljs-property">value</span> = [+userGender].<span class="hljs-title function_">concat</span>(<br>    standardOrderArr.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> !!i &amp;&amp; i !== +userGender).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> +i),<br>  );<br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;mark-standard-order&#x27;</span>, standardOrderArr.<span class="hljs-property">value</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>));<br>  <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;handleSort&#x27;</span>, standardOrderArr.<span class="hljs-property">value</span>);<br>  visible.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="1-5、新增数据同步功能"><a href="#1-5、新增数据同步功能" class="headerlink" title="1.5、新增数据同步功能"></a><strong>1.5、新增数据同步功能</strong></h3><h4 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a><strong>需求</strong></h4><ol><li>点击同步按钮，会自动将卡片维度汇总到刷次维度。然后再正常提交即可</li><li>点击同步按钮，会自动将刷次维度汇总到用户维度。然后再正常提交即可</li></ol><h4 id="前端实现-4"><a href="#前端实现-4" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><p>加按钮绑定事件，当返回的data不为空的时候将data赋值给params.value.extra</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSync</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> action = props.<span class="hljs-property">dim</span> === <span class="hljs-number">1</span><br>      ? <span class="hljs-title function_">getbrushToUser</span>(params.<span class="hljs-property">value</span>.<span class="hljs-property">brushToUserParams</span>)<br>      : <span class="hljs-title function_">getCardToBrush</span>(params.<span class="hljs-property">value</span>.<span class="hljs-property">cardToBrushParams</span>);<br>    <span class="hljs-keyword">const</span> &#123; data, message &#125; = <span class="hljs-keyword">await</span> action <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>;<br>    <span class="hljs-keyword">if</span> (data) &#123;<br>      params.<span class="hljs-property">value</span>.<span class="hljs-property">extra</span> = data;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">AMessage</span>.<span class="hljs-title function_">error</span>(message);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-comment">//</span><br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>(注意：此处由于后端返回的接口如果没有达到同步功能调用的前提就会返回状态码：500，所以要在axios的白名单中过滤一下接口)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> whiteList = [<br>  ...<br>  <span class="hljs-string">&#x27;api/ai-debug/gsb/cardtobrush&#x27;</span>,<br>  <span class="hljs-string">&#x27;api/ai-debug/gsb/brushtouser&#x27;</span>,<br>];<br><br></code></pre></td></tr></table></figure><h3 id="2-1、GSB结论产出"><a href="#2-1、GSB结论产出" class="headerlink" title="2.1、GSB结论产出"></a><strong>2.1、GSB结论产出</strong></h3><h4 id="需求-5"><a href="#需求-5" class="headerlink" title="需求"></a><strong>需求</strong></h4><p>Case走查中新增按钮GSB结论产出，点击弹框并将参数带进去</p><h4 id="前端实现-5"><a href="#前端实现-5" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleGsbReport</span> = (<span class="hljs-params"></span>) =&gt; proxy.<span class="hljs-title function_">showModal</span>(<span class="hljs-string">&#x27;modal-gsb-result-output&#x27;</span>, &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;GSB结论产出&#x27;</span>,<br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">scene</span>: [<span class="hljs-variable constant_">TIANMA_MALE_STANDARD</span>, <span class="hljs-variable constant_">TIANMA_FEMALE_STANDARD</span>].<span class="hljs-title function_">includes</span>(+(params.<span class="hljs-property">value</span>.<span class="hljs-property">standardT</span> || <span class="hljs-number">0</span>))<br>      ? <span class="hljs-number">3</span><br>      : <span class="hljs-number">2</span>,<br>    ...params.<span class="hljs-property">value</span>,<br>  &#125;,<br>&#125;);<br><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//src/views/mark-container/modals/GsbResultOutput.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;container&#x27;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;container-header&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">c-form</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-model:value</span>=<span class="hljs-string">&#x27;params&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:config</span>=<span class="hljs-string">&#x27;config&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;form&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:expand</span>=<span class="hljs-string">&#x27;false&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">flex</span>=<span class="hljs-string">&#x27;190px&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">labelCol</span>=<span class="hljs-string">&#x27;0&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;flex&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;space&#x27;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;default&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;mr-8&#x27;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;props.scope.$hide&#x27;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;primary&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;mr-8&#x27;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handleGsbReport&#x27;</span>&gt;</span>GSB结论产出<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">BIZ_TYPE_STORY</span>, <span class="hljs-variable constant_">BIZ_TYPE_TIANMA</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/const&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; deserialize, <span class="hljs-title class_">JsonProperty</span>, <span class="hljs-title class_">Serializable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@bilibili-firebird/lib.serializer&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AModal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue/es/modal&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AMessage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue/es/message&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; onMounted, <span class="hljs-title class_">Ref</span>, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; getUserBasic &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dayjs&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; createGsb &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/gsb-container/api&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> cookie <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/cookie&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> me = cookie.<span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;username&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> mUser = me ? [me] : [];</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">scope</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;),</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-attr">form</span>: <span class="hljs-title class_">Ref</span>&lt;any&gt; = <span class="hljs-title function_">ref</span>();</span></span><br><span class="language-javascript"><span class="language-xml">@<span class="hljs-title class_">Serializable</span>()</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">class</span> <span class="hljs-title class_">gsbResultFilter</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  @<span class="hljs-title class_">JsonProperty</span>(<span class="hljs-string">&#x27;scene&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">scene</span>: number = <span class="hljs-number">3</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  @<span class="hljs-title class_">JsonProperty</span>(<span class="hljs-string">&#x27;end&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">end</span>: string = <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  @<span class="hljs-title class_">JsonProperty</span>(<span class="hljs-string">&#x27;start&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">start</span>: string = <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  @<span class="hljs-title class_">JsonProperty</span>(<span class="hljs-string">&#x27;m_user&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">mUser</span>: string[] = mUser;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">get</span> <span class="hljs-title function_">createParams</span>() &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">start_date</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">end_date</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">end</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">scene</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">m_user</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">mUser</span>) ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">mUser</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>) : <span class="hljs-variable language_">this</span>.<span class="hljs-property">mUser</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> config = [</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;评估标准&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;scene&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;SELECT&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">attrs</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">appendToBody</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">flex</span>: <span class="hljs-string">&#x27;100px&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">options</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">        &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;天马&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-variable constant_">BIZ_TYPE_TIANMA</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Story&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-variable constant_">BIZ_TYPE_STORY</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      ],</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;评估标准&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">rules</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">      &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择评估标准&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    ],</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;日期&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;start,end&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;DATE&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">attrs</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">placeholder</span>: [<span class="hljs-string">&#x27;case开始日期&#x27;</span>, <span class="hljs-string">&#x27;结束日期&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">allowClear</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">valueFormat</span>: <span class="hljs-string">&#x27;YYYYMMDD&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;YYYYMMDD&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">flex</span>: <span class="hljs-string">&#x27;260px&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">ranges</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        过去<span class="hljs-number">1</span>天: [<span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">add</span>(-<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;day&#x27;</span>), <span class="hljs-title function_">dayjs</span>()],</span></span><br><span class="language-javascript"><span class="language-xml">        过去<span class="hljs-number">3</span>天: [<span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">add</span>(-<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;day&#x27;</span>), <span class="hljs-title function_">dayjs</span>()],</span></span><br><span class="language-javascript"><span class="language-xml">        过去<span class="hljs-number">5</span>天: [<span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">add</span>(-<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;day&#x27;</span>), <span class="hljs-title function_">dayjs</span>()],</span></span><br><span class="language-javascript"><span class="language-xml">        过去<span class="hljs-number">15</span>天: [<span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">add</span>(-<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;day&#x27;</span>), <span class="hljs-title function_">dayjs</span>()],</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">rules</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">      &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择日期范围&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    ],</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作人&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;mUser&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;SYNC&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">action</span>: getUserBasic,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">attrs</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">labelInValue</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;multiple&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">flex</span>: <span class="hljs-string">&#x27;unset&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;操作人&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">];</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> params = <span class="hljs-title function_">ref</span>(&#123;&#125; <span class="hljs-keyword">as</span> gsbResultFilter);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  params.<span class="hljs-property">value</span> = <span class="hljs-title function_">deserialize</span>(props.<span class="hljs-property">scope</span>.<span class="hljs-property">params</span>, gsbResultFilter);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleGsbReport</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">await</span> form.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> <span class="hljs-title class_">AModal</span>.<span class="hljs-title function_">confirm</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作确认&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">width</span>: <span class="hljs-number">400</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">wrapClassName</span>: <span class="hljs-string">&#x27;modal-confirm&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;是否确认产出&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">okText</span>: <span class="hljs-string">&#x27;确定&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// okButtonProps: &#123; danger: true &#125;,</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">cancelText</span>: <span class="hljs-string">&#x27;取消&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">onOk</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">createGsb</span>(params.<span class="hljs-property">value</span>.<span class="hljs-property">createParams</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title class_">AMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;GSB结论产出成功&#x27;</span>, <span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      props.<span class="hljs-property">scope</span>.$hide();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;),</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;less&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="2-2、GSB结论查询"><a href="#2-2、GSB结论查询" class="headerlink" title="2.2、GSB结论查询"></a><strong>2.2、GSB结论查询</strong></h3><h4 id="需求-6"><a href="#需求-6" class="headerlink" title="需求"></a><strong>需求</strong></h4><p>新增页面GSB结论查询</p><p>筛选维度：</p><ul><li>场景 ： 天马&#x2F;story的筛选</li><li>产出人 ： XXX</li></ul><p><img src="https://secure2.wostatic.cn/static/cdHDXz1jcFcHfYJ5fiLwQr/image.png?auth_key=1719477856-sSwRNaAoEv4PisgTZ16uJ9-0-5a5af50499ca4134b2f91383843370d4"></p><h4 id="前端实现-6"><a href="#前端实现-6" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><p>在header中一个表单，表单的config：场景下拉框、产出人（异步搜索框多选框）</p><p>在body中有一个表格，表格的columns：ID、场景、产出时间、产出条件（开始时间、结束时间、打标人的聚合）、产出人、详情</p><h3 id="2-3、GSB结论详情"><a href="#2-3、GSB结论详情" class="headerlink" title="2.3、GSB结论详情"></a><strong>2.3、GSB结论详情</strong></h3><h4 id="需求-7"><a href="#需求-7" class="headerlink" title="需求"></a><strong>需求</strong></h4><p><strong>性别维度报表:</strong></p><p>表头：用户维度的打标维度</p><p>列名：男性、女性、整体</p><p><strong>用户维度报表:</strong></p><p>表头：用户维度的打标维度</p><p>列名：打标者姓名</p><p><strong>用户类别维度:</strong></p><p>表头：用户维度的打标维度</p><p>列名：用户类别维度，目前为用户-大盘，用户-低活，用户</p><h4 id="前端实现-7"><a href="#前端实现-7" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><p>第一步：聚合schema</p><p>详情页面的schema聚合规则</p><p><strong>userType为天马：聚合天马男性跟天马女性的schema</strong></p><p><strong>userType为Story：聚合Story的schema</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">if</span> (userType === <span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span> = &#123;&#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaMaleSchema</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaFeMaleSchema</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item: Standard</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[item.<span class="hljs-property">key</span>]) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[item.<span class="hljs-property">key</span>] = item.<span class="hljs-property">name</span>;<br>    &#125;<br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (userType === <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span> = &#123;&#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">storySchema</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">story: Standard</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[story.<span class="hljs-property">key</span>]) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[story.<span class="hljs-property">key</span>] = story.<span class="hljs-property">name</span>;<br>    &#125;<br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span> = &#123;&#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaMaleSchema</span><br>    .<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tianmaFeMaleSchema</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">storySchema</span>)<br>    .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item: Standard</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[item.<span class="hljs-property">key</span>]) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">schemaMap</span>[item.<span class="hljs-property">key</span>] = item.<span class="hljs-property">name</span>;<br>      &#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>第二步：将接口返回数据根据type的不同注入不同维度的表格</p><h3 id="2-4、GSB结论详情一键导出"><a href="#2-4、GSB结论详情一键导出" class="headerlink" title="2.4、GSB结论详情一键导出"></a><strong>2.4、GSB结论详情一键导出</strong></h3><h4 id="需求-8"><a href="#需求-8" class="headerlink" title="需求"></a><strong>需求</strong></h4><p>将当前页面的数据导出为一个excel表格</p><h4 id="前端实现-8"><a href="#前端实现-8" class="headerlink" title="前端实现"></a><strong>前端实现</strong></h4><p>第一步：绑定事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleExport</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">exportToExcel</span>(state.<span class="hljs-property">value</span>.<span class="hljs-property">data</span>, exportDataConfigs.<span class="hljs-property">value</span>);<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>第二步：编写导出函数</p><p>导出的excel的文件名称由excelName控制</p><ol><li>创建一个新表格</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">XLSX</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;xlsx&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AMessage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue/es/message&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">exportToExcel</span> = (<span class="hljs-params">arr: <span class="hljs-built_in">any</span>[], configs: <span class="hljs-built_in">any</span>[]</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title class_">AMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;导出的数据不能为空&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> wb = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">book_new</span>();    <span class="hljs-comment">//创建一个excel表格</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">firstTitle</span>: <span class="hljs-built_in">string</span>[] = [];<br>  <span class="hljs-keyword">const</span> excelName = <span class="hljs-string">`GSB结论详情-<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()&#125;</span>`</span>;    <span class="hljs-comment">//导出excel表格的文件名</span><br>  <span class="hljs-keyword">const</span> title = configs.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;    <span class="hljs-comment">//遍历configs，将其中的title（表头）存下来</span><br>    <span class="hljs-keyword">const</span> nameArr = item.<span class="hljs-property">title</span>;<br>    <span class="hljs-keyword">return</span> nameArr;<br>  &#125;);<br>  firstTitle.<span class="hljs-title function_">push</span>(...title);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">exportData</span>: <span class="hljs-built_in">any</span>[][] = [];<br>  arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item: <span class="hljs-built_in">any</span>, index: <span class="hljs-built_in">number</span>, array: <span class="hljs-built_in">any</span>[]</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> extraMap = &#123; ...item &#125;;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">r</span>: <span class="hljs-built_in">string</span>[] = [];<br>    configs.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> &#123;<br>      r.<span class="hljs-title function_">push</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;extraMap[i.dataIndex] || <span class="hljs-string">&#x27;0&#x27;</span>&#125;</span>`</span>);    <span class="hljs-comment">//此时的r就是一行一行的行数据</span><br>    &#125;);<br>    <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">0</span> &amp;&amp; item.<span class="hljs-property">type</span> !== array[index - <span class="hljs-number">1</span>].<span class="hljs-property">type</span>) &#123;<br>      exportData.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Array</span>(configs.<span class="hljs-property">length</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">// 当type跟上一个的type不同时插入一整个空白行</span><br>    &#125;<br>    exportData.<span class="hljs-title function_">push</span>(r);<br>  &#125;);<br>  <span class="hljs-keyword">const</span> wsData = [firstTitle, ...exportData];<br>  <span class="hljs-keyword">const</span> ws = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">json_to_sheet</span>(wsData, &#123; <span class="hljs-attr">skipHeader</span>: <span class="hljs-literal">true</span> &#125;);    <span class="hljs-comment">//将数据注入到 表格中</span><br>  <span class="hljs-keyword">const</span> colWidths = firstTitle.<span class="hljs-title function_">map</span>(<span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">wch</span>: <span class="hljs-number">0</span> &#125;));<br>  wsData.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">row</span>) =&gt;</span> &#123;<br>    row.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cell, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (cell &amp;&amp; cell.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-comment">// eslint-disable-next-line no-control-regex</span><br>        <span class="hljs-keyword">const</span> textWidth = cell.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[^\x00-\xff]/g</span>, <span class="hljs-string">&#x27;aa&#x27;</span>).<span class="hljs-property">length</span>;<br>        (colWidths[i] || &#123;&#125;).<span class="hljs-property">wch</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>((colWidths[i] || &#123;&#125;)?.<span class="hljs-property">wch</span>, textWidth) + <span class="hljs-number">0.3</span>;<br>      &#125;<br>    &#125;);<br>  &#125;);<br>  ws[<span class="hljs-string">&#x27;!cols&#x27;</span>] = colWidths;<br>  <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">book_append_sheet</span>(wb, ws, <span class="hljs-string">&#x27;Sheet1&#x27;</span>);<br>  <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-title function_">writeFile</span>(wb, <span class="hljs-string">`<span class="hljs-subst">$&#123;excelName&#125;</span>.xlsx`</span>);<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> exportToExcel;<br><br><br></code></pre></td></tr></table></figure><!-- [Hexo1](../ES的发展/index.html) -->]]></content>
    
    
    <categories>
      
      <category>b站</category>
      
      <category>debug平台</category>
      
      <category>项目迭代</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器的缓存问题导致uat环境界面不能正常显示</title>
    <link href="/bilibili/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4uat%E7%8E%AF%E5%A2%83%E7%95%8C%E9%9D%A2%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA/"/>
    <url>/bilibili/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4uat%E7%8E%AF%E5%A2%83%E7%95%8C%E9%9D%A2%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>在开发的过程中（日常chorme开发）发现edge中的页面中复制功能按钮不见了，于是就有了下面一篇文章</p><p><img src="https://secure2.wostatic.cn/static/k1cW1xUgxt4jYRaqP5CtMf/image.png?auth_key=1719476969-auz8qsnfivavaZCZtq4k2y-0-99411a6de9aaf33682fc590e79264b17"></p><p>解决办法就是将浏览器设置重置，然后缓存彻底消失，就有复制功能了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>表格中右键点击行操作</title>
    <link href="/bilibili/%E9%9C%80%E6%B1%82/debug-search%E9%9C%80%E6%B1%82/%E8%A1%A8%E6%A0%BC%E4%B8%AD%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
    <url>/bilibili/%E9%9C%80%E6%B1%82/debug-search%E9%9C%80%E6%B1%82/%E8%A1%A8%E6%A0%BC%E4%B8%AD%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E8%A1%8C%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>要求实现在表格中点击行弹出一个list，点击list中不同的item进行不同的操作，</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>这里选择使用库<code>vue3-context-menu</code></p><p><a href="https://imengyu.top/pages/vue3-context-menu-docs/guide/install.html">安装 | vue3-context-menu (imengyu.top)</a></p><ol><li>安装库</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm install -save @imengyu/vue3-context-menu<br></code></pre></td></tr></table></figure><ol start="2"><li>在项目中引用<ol><li><p>普通引用：</p><p> 在<code>main.ts</code>文件中引用组件样式和注册全局组件</p></li></ol></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//main.ts</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;reflect-metadata&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@imengyu/vue3-context-menu/lib/vue3-context-menu.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ContextMenu</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@imengyu/vue3-context-menu&#x27;</span>;<br><span class="hljs-keyword">import</span> components <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components&#x27;</span>;<br><span class="hljs-keyword">import</span> plugin <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./plugins&#x27;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(plugin).<span class="hljs-title function_">use</span>(components).<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ContextMenu</span>);<br><br>router.<span class="hljs-title function_">isReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">2. 由于此项目有全局的注册文件`/src/plugins/index.ts`，所以不在`main.ts`中引用</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// /src/plugins/index.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">App</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dayjs&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ContextMenu</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@imengyu/vue3-context-menu&#x27;</span>;<br><span class="hljs-keyword">import</span> components <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./bilibili&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@imengyu/vue3-context-menu/lib/vue3-context-menu.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./axios&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../assets&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dayjs/locale/zh-cn&#x27;</span>;<br><br>dayjs.<span class="hljs-title function_">locale</span>(<span class="hljs-string">&#x27;zh-cn&#x27;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">Promise</span>) &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">Promise</span> = <span class="hljs-title class_">Promise</span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">install</span>: <span class="hljs-function">(<span class="hljs-params">vm: App</span>) =&gt;</span> &#123;<br>    vm.<span class="hljs-title function_">use</span>(components).<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ContextMenu</span>);<br>  &#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>现在可以在需要使用全局组件的地方使用了</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;Table<br>    size=&quot;small&quot;<br>    :rowKey=&quot;(i) =&gt; i.id + i.bvid + i.type&quot;<br>    :showHeader=&quot;false&quot;<br>    :columns=&quot;columns&quot;<br>    sticky<br>    :scroll=&quot;&#123; x: configTableWidth &#125;&quot;<br>    :rowClassName=&quot;<br>      (record) =&gt;<br>        record.metadata.diffCode === &#x27;+&#x27;<br>          ? &#x27;article-added&#x27;<br>          : record.metadata.diffCode === &#x27;-&#x27;<br>          ? &#x27;article-removed&#x27;<br>          : &#x27;&#x27;<br>    &quot;<br>    :dataSource=&quot;items&quot;<br>    :pagination=&quot;false&quot;<br>    :customRow=&quot;<br>      (record) =&gt; &#123;<br>        return &#123;<br>          onContextmenu: (e) =&gt; handleContextMenu(e, record),<br>        &#125;;<br>      &#125;<br>    &quot;<br>  &gt;<br>    &lt;template #bodyCell=&quot;&#123; column, record, index &#125;&quot;&gt;<br>      &lt;template v-if=&quot;column.title === &#x27;id&#x27;&quot;&gt;<br>        &#123;&#123; index + 1 &#125;&#125;<br>      &lt;/template&gt;<br>      &lt;template v-else-if=&quot;column.title === &#x27;avid&#x27;&quot;&gt;<br>        &lt;div class=&quot;sm b&quot;&gt;<br>          &lt;div&gt;&#123;&#123; record.type &#125;&#125;&lt;/div&gt;<br>          &lt;div&gt;&#123;&#123; record.id &#125;&#125;&lt;/div&gt;<br>          &lt;div&gt;&#123;&#123; record.bvid &#125;&#125;&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>      &lt;template v-else-if=&quot;column.title === &#x27;稿件&#x27;&quot;&gt;<br>        &lt;component<br>          :key=&quot;record.id + record.bvid + record.type&quot;<br>          :class=&quot;&#123;<br>            &#x27;mobile-search-inner&#x27;: true,<br>            added: record.metadata.diffCode === &#x27;+&#x27;,<br>            removed: record.metadata.diffCode === &#x27;-&#x27;,<br>          &#125;&quot;<br>          :is=&quot;componentTypeMap[record.type as keyof typeof componentTypeMap] || MobileCardDefault&quot;<br>          :data=&quot;record&quot;<br>        /&gt;<br>      &lt;/template&gt;<br>      &lt;template v-else-if=&quot;column.title === &#x27;信息&#x27;&quot;&gt;<br>        &lt;div class=&quot;sm&quot;&gt;<br>          &lt;div class=&quot;dib mr-12&quot; v-if=&quot;record.play&quot;&gt;<br>            &lt;span class=&quot;c-666&quot;&gt;播放: &lt;/span&gt;&lt;span class=&quot;b&quot;&gt;&#123;&#123; record.play &#125;&#125;&lt;/span&gt;<br>          &lt;/div&gt;<br>          &lt;div class=&quot;dib mr-12&quot; v-if=&quot;record.videoReview&quot;&gt;<br>            &lt;span class=&quot;c-666&quot;&gt;弹幕: &lt;/span&gt;&lt;span class=&quot;b&quot;&gt;&#123;&#123; record.videoReview &#125;&#125;&lt;/span&gt;<br>          &lt;/div&gt;<br>          &lt;div class=&quot;dib mr-12&quot; v-if=&quot;record.pubdate&quot;&gt;<br>            &lt;span class=&quot;c-666&quot;&gt;发布时间: &lt;/span&gt;&lt;span class=&quot;b&quot;&gt;&#123;&#123; record.pubdate &#125;&#125;&lt;/span&gt;<br>          &lt;/div&gt;<br>          &lt;div class=&quot;dib mr-12&quot; v-if=&quot;record.author &amp;&amp; record.mid&quot;&gt;<br>            &lt;span class=&quot;c-666&quot;&gt;up: &lt;/span&gt;<br>            &lt;a<br>              class=&quot;c-primary b&quot;<br>              target=&quot;_blank&quot;<br>              :href=&quot;&#x27;https://space.bilibili.com/&#x27; + record.mid&quot;<br>              &gt;&#123;&#123; record.author &#125;&#125;&lt;/a<br>            &gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>      &lt;template v-else-if=&quot;column.title === &#x27;stat&#x27;&quot;&gt;<br>        &lt;div<br>          class=&quot;sm&quot;<br>          style=&quot;<br>            display: flex;<br>            flex-direction: column;<br>            flex-wrap: wrap;<br>            align-content: flex-start;<br>            height: 100px;<br>          &quot;<br>        &gt;<br>          &lt;div class=&quot;ell&quot; style=&quot;width: 180px&quot; v-for=&quot;i in record.statDatas&quot; :key=&quot;i.dataName&quot;&gt;<br>            &lt;span class=&quot;c-666&quot;&gt;&#123;&#123; i.dataName &#125;&#125;: &lt;/span&gt;&lt;span class=&quot;b&quot;&gt;&#123;&#123; i.dataValue &#125;&#125;&lt;/span&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/template&gt;<br>  &lt;/Table&gt;<br>  &lt;context-menu  v-model:show=&quot;show&quot; :options=&quot;optionsComponent&quot;&gt;<br>    &lt;context-menu-item label=&quot;Open&quot; @click=&quot;handleOpen&quot; /&gt;<br>    &lt;context-menu-item label=&quot;Inspect&quot; @click=&quot;handleInspect()&quot; /&gt;<br>    &lt;context-menu-item label=&quot;正排查询&quot; @click=&quot;handleForward()&quot; /&gt;<br>    &lt;context-menu-separator /&gt;<br>    &lt;context-menu-item<br>      :label=&quot;debugMode ? &#x27;普通视图&#x27; : &#x27;分析视图&#x27;&quot;<br>      @click=&quot;emit(&#x27;update:debugMode&#x27;, !debugMode)&quot;<br>    /&gt;<br>  &lt;/context-menu&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;tsx&quot; setup&gt;<br>import &#123; Table &#125; from &#x27;ant-design-vue&#x27;;<br>import &#123; PropType, getCurrentInstance, ref &#125; from &#x27;vue&#x27;;<br>import &#123; deserialize &#125; from &#x27;@bilibili-firebird/lib.serializer&#x27;;<br>import router from &#x27;@/router&#x27;;<br>import MobileCardRelated from &#x27;./mobile-card/MobileCardRelated.vue&#x27;;<br>import MobileCardUser from &#x27;./mobile-card/MobileCardUser.vue&#x27;;<br>import MobileCardDefault from &#x27;./mobile-card/MobileCardDefault.vue&#x27;;<br>import &#123; Article &#125; from &#x27;../models/ArticleList&#x27;;<br>import &#123; getInspectResult &#125; from &#x27;../api&#x27;;<br>import useSearchStore from &#x27;../store/useSearchStore&#x27;;<br>import &#123; InspectResult &#125; from &#x27;../models/InspectResult&#x27;;<br><br>const props = defineProps(&#123;<br>  columns: &#123;<br>    type: Array as PropType&lt;any[]&gt;,<br>    default: () =&gt; [],<br>  &#125;,<br>  debugMode: &#123;<br>    type: Boolean,<br>    default: false,<br>  &#125;,<br>  items: &#123;<br>    type: Array as PropType&lt;Article[]&gt;,<br>    default: () =&gt; [],<br>  &#125;,<br>&#125;);<br>const emit = defineEmits([&#x27;update:debugMode&#x27;]);<br>const &#123; proxy &#125; = getCurrentInstance() as any;<br>const searchStore = useSearchStore();<br>//<br><br>const show = ref(false);<br>const optionsComponent = ref(&#123;<br>  zIndex: 3,<br>  minWidth: 230,<br>  x: -500,<br>  y: -200,<br>&#125;);<br>const onContextMenu = (e: MouseEvent) =&gt; &#123;<br>  e.preventDefault();<br>  optionsComponent.value.x = e.x;<br>  optionsComponent.value.y = e.y;<br>  show.value = true;<br>&#125;;<br>const current = ref();<br>const handleContextMenu = (e: any, row: any) =&gt; &#123;<br>  e.preventDefault();<br>  current.value = row;<br>  console.log(e, row);<br>  onContextMenu(e);<br>&#125;;<br>const handleOpen = () =&gt; &#123;<br>  window.open(current.value.url, &#x27;_blank&#x27;);<br>&#125;;<br><br>const handleInspect = async () =&gt; &#123;<br>  const res = await getInspectResult(&#123;<br>    seid: searchStore.seid,<br>    result_id: current.value.id,<br>    result_type: current.value.type,<br>  &#125;);<br>  const data = deserialize(res, InspectResult);<br>  console.log(&#x27;res----&gt;&#x27;, res);<br>  return proxy.showModal(&#x27;modal-search-inspect&#x27;, &#123;<br>    title: `Inspecting $&#123;current.value.type&#125; $&#123;current.value.id&#125;`,<br>    data,<br>    contentInfo: `$&#123;current.value.type&#125; $&#123;current.value.id&#125;`,<br>  &#125;);<br>&#125;;<br>const handleForward = () =&gt; &#123;<br>  window.open(router.resolve(&#123;<br>    name: &#x27;debug-search-dms&#x27;,<br>    query: &#123;<br>      env: &#x27;pre&#x27;,<br>      type: current.value.type,<br>      docid: current.value.id,<br>    &#125;,<br>  &#125;).fullPath, &#x27;_blank&#x27;);<br>&#125;;<br><br>const componentTypeMap = &#123;<br>  related_search: MobileCardRelated,<br>  bili_user: MobileCardUser,<br>&#125;;<br><br>const configTableWidth = props.columns.reduce((acc, cur) =&gt; acc + (cur.width || 0), 0);<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot;&gt;<br>.article-added &#123;<br>  background-color: var(--color-green-thin);<br>&#125;<br>.article-removed &#123;<br>  background-color: var(--color-orange-thin);<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><pre><code class="hljs">上述代码中的表格组件的属性[customRow](https://www.antdv.com/components/table-cn#customrow-用法)，可以设置行属性，这里用到它的右键点击行的属性：onContextmenu，用到Table组件上绑定属性就是：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;Table<br>  ...其他属性<br>  :customRow=&quot;<br>    (record) =&gt; &#123;<br>      return &#123;<br>        onContextmenu: (e) =&gt; handleContextMenu(e, record),<br>      &#125;;<br>    &#125;<br>  &quot;<br>&gt;<br>  ...<br>&lt;/Table&gt;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">这里推荐使用组件模式（通俗易懂）</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;context-menu<br>    v-model:show=&quot;show&quot;<br>    :options=&quot;optionsComponent&quot;<br>  &gt;<br>    &lt;context-menu-item label=&quot;Simple item&quot; @click=&quot;onMenuClick(1)&quot; /&gt;<br>    &lt;context-menu-sperator /&gt;&lt;!--use this to add sperator 分割线--&gt;<br>    &lt;context-menu-group label=&quot;Menu with child&quot;&gt;<br>      &lt;context-menu-item label=&quot;Item1&quot; @click=&quot;onMenuClick(2)&quot; /&gt;<br>      &lt;context-menu-item label=&quot;Item2&quot; @click=&quot;onMenuClick(3)&quot; /&gt;<br>      &lt;context-menu-group label=&quot;Child with v-for 50&quot;&gt;<br>        &lt;context-menu-item v-for=&quot;index of 50&quot; :key=&quot;index&quot; :label=&quot;&#x27;Item3-&#x27;+index&quot; @click=&quot;onLoopMenuClick(index)&quot; /&gt;<br>      &lt;/context-menu-group&gt;<br>    &lt;/context-menu-group&gt;<br>  &lt;/context-menu&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br>const show = ref(false)<br>const optionsComponent = ref(&#123;<br>  zIndex: 3,<br>  minWidth: 230,<br>  x: 500,<br>  y: 200<br>&#125;)<br>const onButtonClick = (e) =&gt; &#123;<br>  //显示组件菜单<br>  show.value = true;<br>  optionsComponent.value.x = e.x;<br>  optionsComponent.value.y = e.y;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>b站</category>
      
      <category>debug-search平台</category>
      
      <category>项目迭代</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实验原子化</title>
    <link href="/bilibili/%E9%9C%80%E6%B1%82/dipper%E5%AE%9E%E9%AA%8C%E5%B9%B3%E5%8F%B0/%E5%AE%9E%E9%AA%8C%E5%8E%9F%E5%AD%90%E5%8C%96/"/>
    <url>/bilibili/%E9%9C%80%E6%B1%82/dipper%E5%AE%9E%E9%AA%8C%E5%B9%B3%E5%8F%B0/%E5%AE%9E%E9%AA%8C%E5%8E%9F%E5%AD%90%E5%8C%96/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>b站</category>
      
      <category>dipper实验平台</category>
      
      <category>项目迭代</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue中自动注册当前目录下的所有Vue组件</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/Vue%E4%B8%AD%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89Vue%E7%BB%84%E4%BB%B6/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/Vue%E4%B8%AD%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89Vue%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">App</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">const</span> requireComponent = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<span class="hljs-string">&#x27;./&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-regexp">/\.vue$/</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">capitalizeFirstLetter</span>(<span class="hljs-params">str: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">validateFileName</span>(<span class="hljs-params">str: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^\S+\.vue$/</span>.<span class="hljs-title function_">test</span>(str) &amp;&amp; str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\S+\/(\w+)\.vue$/</span>, <span class="hljs-function">(<span class="hljs-params">rs, $1</span>) =&gt;</span> <span class="hljs-title function_">capitalizeFirstLetter</span>($1));<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">install</span>: <span class="hljs-function">(<span class="hljs-params">vm: App</span>) =&gt;</span> &#123;<br>    requireComponent.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">filePath</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> componentConfig = requireComponent(filePath);<br>      <span class="hljs-keyword">const</span> fileName = <span class="hljs-title function_">validateFileName</span>(filePath);<br>      <span class="hljs-keyword">const</span> componentName = componentConfig.<span class="hljs-property">default</span>.<span class="hljs-property">name</span><br>        ? componentConfig.<span class="hljs-property">default</span>.<span class="hljs-property">name</span><br>        : fileName;<br>      vm.<span class="hljs-title function_">component</span>(componentName, componentConfig.<span class="hljs-property">default</span> || componentConfig);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>这段代码是一个 Vue.js 的插件，它的作用是自动注册当前目录下的所有 Vue 组件。</p><p>首先，代码导入了 Vue 的 App 对象，用于注册组件。</p><p>然后，通过 require.context 方法获取当前目录下以 .vue 结尾的文件。这个方法接受三个参数：目录路径、是否递归查找子目录、匹配文件的正则表达式。</p><p>接下来定义了两个辅助函数：</p><ul><li>capitalizeFirstLetter：将字符串的首字母转换为大写。</li><li>validateFileName：验证文件名是否符合要求，并将文件名转换为驼峰命名法。</li></ul><p>最后，通过 export default 导出一个对象，该对象包含一个 install 方法。install 方法接受一个参数 vm，表示 Vue 的实例。在 install 方法内部，通过 requireComponent.keys() 获取到当前目录下所有文件的路径，并遍历这些路径。</p><p>对于每个路径，通过 requireComponent(filePath) 获取到组件的配置对象。然后，通过 validateFileName(filePath) 获取到组件的名称。如果组件配置对象的 default 属性存在且有 name 属性，则使用 name 属性作为组件名称，否则使用文件名作为组件名称。</p><p>最后，通过 vm.component 方法将组件注册到 Vue 实例中。</p><p>这样，使用这个插件后，当前目录下的所有 Vue 组件都会被自动注册到 Vue 实例中，无需手动一个个注册。</p><h1 id="调试小技巧"><a href="#调试小技巧" class="headerlink" title="调试小技巧"></a>调试小技巧</h1><p>如果你的页面因位置代码陷入了快速刷新的死循环，可在项目中添加以下代码；</p><p>页面刷新钱会进入debug状态，在devtools中查看调用堆栈（call stack）即可了解刷新的原因</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;beforeunload&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">debugger</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目中报props的错误</title>
    <link href="/bilibili/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%8A%A5props%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <url>/bilibili/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%8A%A5props%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">vue项目中报错：<br><span class="hljs-title class_">Extraneous</span> non-props attributes (params) were<br> passed to component but could not be automatically <br> inherited because component renders fragment or text root nodes. <br></code></pre></td></tr></table></figure><p>这个错误是因为子组件的根节点太多了，然后传递过来的props不知道要附在哪个根节点上</p><p>解决：</p><p>写一个props接受传值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;),<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>廖雪峰js</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/%E5%BB%96%E9%9B%AA%E5%B3%B0js/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/%E5%BB%96%E9%9B%AA%E5%B3%B0js/</url>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>匿名函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>js中的函数，允许传入人一个参数而不影响调用；</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">abs</span> = (<span class="hljs-params">x</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">0</span> )&#123;<br>    <span class="hljs-keyword">return</span> x;<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> -x;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">//调用的时候可以abs(1, 2, &#x27;2323&#x27;)或者abs()都不会报错</span><br></code></pre></td></tr></table></figure><p>但是，如果要避免收到<code>undefined</code>，可以对参数进行检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">abs</span> = (<span class="hljs-params">x</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> x !== <span class="hljs-string">&#x27;number&#x27;</span>)&#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;Not a number&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> x;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> -x;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><p>arguments只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。</p><p><em><strong>在箭头函数中不能使用</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span> (x) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;x = &#x27;</span> +x); <span class="hljs-comment">//10</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;arg &#x27;</span>+ i + <span class="hljs-string">&#x27; = &#x27;</span> + <span class="hljs-variable language_">arguments</span>[i]); <span class="hljs-comment">//10, 20, 30</span><br>  &#125;<br>&#125;<br><span class="hljs-title function_">foo</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p>利用<code>arguments</code>，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abs</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> ? x : -x;<br>&#125;<br><br><span class="hljs-title function_">abs</span>(); <span class="hljs-comment">// 0</span><br><span class="hljs-title function_">abs</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 10</span><br><span class="hljs-title function_">abs</span>(-<span class="hljs-number">9</span>); <span class="hljs-comment">// 9</span><br></code></pre></td></tr></table></figure><p><code>for...in</code>获取到的是数组中的属性名&#x2F;索引值，<code>for...of</code>获取到的是数组中的值</p><p>解构赋值数组按照顺序对应，对象按照属性名对应</p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>JavaScript中的函数实际上都指向某个变量，既然变量可以指向函数，函数的参数能够接受变量，那么一个函数就可以接受另外一个函数作为参数，这种函数就叫做<code>高阶函数</code></p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y, fn</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(x) + <span class="hljs-title function_">f</span>(y)<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们调用<code>add(-5, 6, Math.abs)</code>时，参数<code>x</code>，<code>y</code>和<code>f</code>分别接收<code>-5</code>，<code>6</code>和函数<code>Math.abs</code>，根据函数定义，我们可以推导计算过程为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">x = -<span class="hljs-number">5</span>;<br>y = <span class="hljs-number">6</span>;<br>f = <span class="hljs-title class_">Math</span>.<span class="hljs-property">abs</span>;<br><span class="hljs-title function_">f</span>(x) + <span class="hljs-title function_">f</span>(y) ==&gt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">5</span>) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-number">6</span>) ==&gt; <span class="hljs-number">11</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">11</span>;<br></code></pre></td></tr></table></figure><p>所谓函数引用、对象引用、函数名其实都是内存中的一个地址，这个地址指向了某个函数或对象或方法，谁拿到了这个地址，谁就拥有了调用函数、调用方法的权利，所以所谓传入函数作为参数，其实就是把这个地址传给了另外一个函数，让另外一个函数拥有操作这个函数的权利，</p><h4 id="map-x2F-reduce"><a href="#map-x2F-reduce" class="headerlink" title="map&#x2F;reduce"></a>map&#x2F;reduce</h4><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>利用filter可以巧妙的去除Array中的重复元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;strawberry&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;strawberry&#x27;</span>];<br><br><span class="hljs-keyword">const</span> filterArr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index, self</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">indexOf</span>(item) === index;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>如果认为<code>x &lt; y</code>则返回<code>-1</code>，如果认为<code>x == y</code>则返回<code>0</code>，如果认为<code>x &gt; y</code>则返回<code>1</code></p><h4 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h4><ol><li>编写一个产生斐波那契数列的函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 0 1 1 2 3 5 8 13 21 34 ...   //斐波那契数列</span><br><br><span class="hljs-comment">//普通函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">max</span>) &#123;<br>  <span class="hljs-keyword">var</span> <br>    t,<br>    a = <span class="hljs-number">0</span>,<br>    b = <span class="hljs-number">1</span>,<br>    arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">while</span>(arr.<span class="hljs-property">length</span> &lt; max) &#123;<br>    [a, b] = [b, a + b];<br>    arr.<span class="hljs-title function_">push</span>(b);<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-comment">//使用generator的函数</span><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">fib</span>(<span class="hljs-params">max</span>) &#123;<br>  <span class="hljs-keyword">var</span><br>    t,<br>    a = <span class="hljs-number">0</span>,<br>    b = <span class="hljs-number">1</span>,<br>    n = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (n &lt; max) &#123;<br>    <span class="hljs-keyword">yield</span> a;<br>    [a, b] = [b, a + b];<br>    n++;<br>  &#125;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">直接调用试试：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">fib</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">//*fib &#123;&lt;suspended&gt;&#125;*</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">直接调用一个generator和调用函数不一样，`fib(5)`仅仅是创建了一个generator对象，还没有去执行它。调用generator对象有两个方法，一是不断地调用generator对象的`next()`方法：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> f = <span class="hljs-title function_">fib</span>(<span class="hljs-number">5</span>);<br>f.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">//&#123; value: 0, done: false &#125;</span><br>f.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">//&#123; value: 1, done: false &#125;</span><br>f.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">//&#123; value: 1, done: false &#125;</span><br>f.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">//&#123; value: 2, done: false &#125;</span><br>f.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">//&#123; value: 3, done: false &#125;</span><br>f.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">//&#123; value: underfined, done: true &#125;</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">`next()`方法会执行generator的代码，然后，每次遇到`yield x;`就返回一个对象`&#123;value: x, done: true/false&#125;`，然后“暂停”。返回的`value`就是`yield`的返回值，`done`表示这个generator是否已经执行结束了。如果`done`为`true`，则`value`就是`return`的返回值。第二个方法是直接用`for ... of`循环迭代generator对象，这种方式不需要我们自己判断`done`：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> <span class="hljs-title function_">fib</span>(<span class="hljs-number">10</span>)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 依次输出0, 1, 1, 2, 3, ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-number">123.</span><span class="hljs-title function_">toString</span>();  <span class="hljs-comment">//Uncaught SyntaxError: Invalid or unexpected token</span><br></code></pre></td></tr></table></figure><p>要写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-number">123.</span>.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// &#x27;123&#x27;, 注意是两个点！！！</span><br>(<span class="hljs-number">123</span>).<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// &#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h4><ol><li>切分字符串</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-string">&#x27;a b   c&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;c&#x27;]</span><br><span class="hljs-comment">//无法识别连续的空格，用正则表达式试试：</span><br><span class="hljs-string">&#x27;a b   c&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/\s+/</span>); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;] //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><br><span class="hljs-comment">//无论多少个空格都可以正常分割。加入,试试：</span><br><span class="hljs-string">&#x27;a,b, c  d&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/[\s\,]+/</span>); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><br><span class="hljs-comment">//再加入;试试：</span><br><span class="hljs-string">&#x27;a,b;; c  d&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/[\s\,\;]+/</span>); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>分组</p><p> 除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用<code>()</code>表示的就是要提取的分组（Group）。比如：</p><p> <code>^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/</span>;<br>re.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;010-12345&#x27;</span>); <span class="hljs-comment">// [&#x27;010-12345&#x27;, &#x27;010&#x27;, &#x27;12345&#x27;]</span><br>re.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;010 12345&#x27;</span>); <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">如果正则表达式中定义了组，就可以在`RegExp`对象上用`exec()`方法提取出子串来。`exec()`方法在匹配成功后，会返回一个`Array`，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。`exec()`方法在匹配失败时返回`null`。</code></pre><ol start="3"><li><p>贪婪匹配</p><p> 需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的<code>0</code>：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/^(\d+)(0*)$/</span>;<br>re.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;102300&#x27;</span>); <span class="hljs-comment">// [&#x27;102300&#x27;, &#x27;102300&#x27;, &#x27;&#x27;]</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">由于`\d+`采用贪婪匹配，直接把后面的`0`全部匹配了，结果`0*`只能匹配空字符串了。必须让`\d+`采用非贪婪匹配（也就是尽可能少匹配），才能把后面的`0`匹配出来，加个`?`就可以让`\d+`采用非贪婪匹配:</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/^(\d+?)(0*)$/</span>;<br>re.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;102300&#x27;</span>); <span class="hljs-comment">// [&#x27;102300&#x27;, &#x27;1023&#x27;, &#x27;00&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><ol><li><p>序列化</p><p> 把小明的这个对象序列化称JSON格式的字符串：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> xiaoming = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">14</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">1.65</span>,<br>    <span class="hljs-attr">grade</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&#x27;middle-school&#x27;</span>: <span class="hljs-string">&#x27;\&quot;W3C\&quot; Middle School&#x27;</span>,<br>    <span class="hljs-attr">skills</span>: [<span class="hljs-string">&#x27;JavaScript&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Lisp&#x27;</span>]<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(xiaoming)); <br><span class="hljs-comment">//&#x27;&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14,&quot;gender&quot;:true,&quot;height&quot;:1.65,&quot;grade&quot;:null,&quot;middle-school&quot;:&quot;\\&quot;W3C\\&quot; Middle School&quot;,&quot;skills&quot;:[&quot;JavaScript&quot;,&quot;Java&quot;,&quot;Python&quot;,&quot;Lisp&quot;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">要输出得好看一些，可以加上参数，按缩进输出：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(xiaoming, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;  &#x27;</span>);<br></code></pre></td></tr></table></figure><pre><code class="hljs">结果：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">14</span>,<br>  <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">1.65</span>,<br>  <span class="hljs-string">&quot;grade&quot;</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-string">&quot;middle-school&quot;</span>: <span class="hljs-string">&quot;\&quot;W3C\&quot; Middle School&quot;</span>,<br>  <span class="hljs-string">&quot;skills&quot;</span>: [<br>    <span class="hljs-string">&quot;JavaScript&quot;</span>,<br>    <span class="hljs-string">&quot;Java&quot;</span>,<br>    <span class="hljs-string">&quot;Python&quot;</span>,<br>    <span class="hljs-string">&quot;Lisp&quot;</span><br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">第二个参数用于控制如何筛选对象的键值，如果我们只想输出指定的属性，可以传入`Array`：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(xiaoming, [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;skills&#x27;</span>], <span class="hljs-string">&#x27;  &#x27;</span>);<br></code></pre></td></tr></table></figure><pre><code class="hljs">结果：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  <span class="hljs-string">&quot;skills&quot;</span>: [<br>    <span class="hljs-string">&quot;JavaScript&quot;</span>,<br>    <span class="hljs-string">&quot;Java&quot;</span>,<br>    <span class="hljs-string">&quot;Python&quot;</span>,<br>    <span class="hljs-string">&quot;Lisp&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">还可以传入一个函数，这样对象的每个键值对都会被函数先处理：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsFilter</span>(<span class="hljs-params">key,value</span>)&#123;<br>    <span class="hljs-keyword">if</span>(key ===<span class="hljs-string">&#x27;skills&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">filter</span>((<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item !==<span class="hljs-string">&#x27;Java&#x27;</span>))<br>    &#125;<br>    <span class="hljs-keyword">return</span> value<br>&#125;<br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(xiaoming, jsFilter, <span class="hljs-string">&#x27;  &#x27;</span>);<br><span class="hljs-comment">//&#123;\n  &quot;name&quot;: &quot;小明&quot;,\n  &quot;age&quot;: 14,\n  &quot;gender&quot;: true,\n  &quot;height&quot;: 1.65,\n  &quot;grade&quot;: null,\n  &quot;middle-school&quot;: &quot;\\&quot;W3C\\&quot; Middle School&quot;,\n  &quot;skills&quot;: [\n    &quot;JavaScript&quot;,\n    &quot;Python&quot;,\n    &quot;Lisp&quot;\n  ]\n&#125;&#x27;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">如果我们还想要精确控制如何序列化小明，可以给`xiaoming`定义一个`toJSON()`的方法，直接返回JSON应该序列化的数据：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> xiaoming = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">14</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">1.65</span>,<br>    <span class="hljs-attr">grade</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&#x27;middle-school&#x27;</span>: <span class="hljs-string">&#x27;\&quot;W3C\&quot; Middle School&#x27;</span>,<br>    <span class="hljs-attr">skills</span>: [<span class="hljs-string">&#x27;JavaScript&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Lisp&#x27;</span>],<br>    <span class="hljs-attr">toJSON</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">// 只输出name和age，并且改变了key：</span><br>            <span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,<br>            <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span><br>        &#125;;<br>    &#125;<br>&#125;;<br><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(xiaoming); <span class="hljs-comment">// &#x27;&#123;&quot;Name&quot;:&quot;小明&quot;,&quot;Age&quot;:14&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p><code>JSON.parse()</code>还可以接收一个函数，用来转换解析出的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14&#125;&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;name&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> value + <span class="hljs-string">&#x27;同学&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj)); <span class="hljs-comment">// &#123;name: &#x27;小明同学&#x27;, age: 14&#125;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ES的发展</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/ES%E7%9A%84%E5%8F%91%E5%B1%95/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/ES%E7%9A%84%E5%8F%91%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="ES5新特性"><a href="#ES5新特性" class="headerlink" title="ES5新特性"></a>ES5新特性</h1><ol><li><p><code>use strict</code>严格模式</p><p> 严格模式下，不能使用未声明的变量</p></li><li><p><code>String.trim()</code>，删除字符串两端的空格</p><p> <img src="https://secure2.wostatic.cn/static/u9iE5sfGpmfXCbFKx6rbzN/image.png?auth_key=1710129067-sSTVqvHUK56ZoKdgYjqKhm-0-0c0d8f4a5d80fe4ead26b09cb7fbb73a"></p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27; 你好,king &#x27;</span><br>str.<span class="hljs-title function_">trim</span>() <span class="hljs-comment">// &#x27;你好,king&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><code>Array.isArray()</code>,检查对象是否为数组</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ol start="4"><li><code>Array.forEach()</code>,为每个数组元素都调用一次函数，不会生成新数组</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item,index,arr</span>) =&gt;</span> &#123;<br>  arr[index] = <span class="hljs-number">1</span> <br>&#125;)  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[1, 1, 1]</span><br></code></pre></td></tr></table></figure><ol start="5"><li><code>Array.map()</code>,遍历数组，原数组不会改变,会生成一个新的数组</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">return</span> item* <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[1, 2, 3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr) <span class="hljs-comment">//[2, 4, 6]</span><br></code></pre></td></tr></table></figure><ol start="6"><li><code>Array.filter()</code>,过滤数组，会返回新的数组，不改变原数组</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> filterArr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index ,arr</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[1, 2, 3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filterArr) <span class="hljs-comment">//[3]</span><br><br></code></pre></td></tr></table></figure><ol start="7"><li><code>Array.reduce()</code>,</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur, index, arr</span>) =&gt;</span> &#123;<br><br>&#125;,init)<br></code></pre></td></tr></table></figure><pre><code class="hljs">- arr: 表示原数组- prev:表示上一次调用回调时的返回值，或者初始值init- cur:表示当前正在处理的数组元素- index:表示正在处理的数组元素的索引，若提供init值，则索引为0，否则索引为1- init: 表示初始值1. 数组求和</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> sumArr = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> pre + cur<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sumArr) <span class="hljs-comment">// 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[1, 2, 3]</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">2. 计算数组中每个元素出现的次数    这里的由于初始值为一个空对象，所以第一次的pre就是一个空对象</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> person = [<span class="hljs-string">&#x27;李白&#x27;</span>,<span class="hljs-string">&#x27;雅典娜&#x27;</span>,<span class="hljs-string">&#x27;安琪拉&#x27;</span>,<span class="hljs-string">&#x27;李白&#x27;</span>,<span class="hljs-string">&#x27;诸葛亮&#x27;</span>,<span class="hljs-string">&#x27;安琪拉&#x27;</span>]<br><span class="hljs-keyword">let</span> nameObj = person.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,cur</span>) =&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>( cur <span class="hljs-keyword">in</span> pre)&#123;<br>        pre[cur]++<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        pre[cur] = <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> pre<br>&#125;, &#123;&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameObj) <span class="hljs-comment">// &#123;李白: 2, 雅典娜: 1, 安琪拉: 2, 诸葛亮: 1&#125;</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">3. 数组扁平化    这里第一次的pre是一个空数组，使用递归</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]],<span class="hljs-number">6</span>]<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">newArr</span> = (<span class="hljs-params">arr</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,cur</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> pre.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(cur) ? <span class="hljs-title function_">newArr</span>(cur) : cur)<br>&#125;,[])<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">newArr</span>(arr)) <span class="hljs-comment">// [1, 2, 3, 4, 5, 6]</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">4. 数组去重    这里第一次的pre是一个空数组，所以return出来pre就是一个数组</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br><span class="hljs-keyword">const</span> resultArr = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,cur</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(!pre.<span class="hljs-title function_">includes</span>(cur))&#123;<br>        <span class="hljs-keyword">return</span> pre.<span class="hljs-title function_">concat</span>(cur)<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> pre<br>    &#125;<br>&#125;,[])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(resultArr)<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">5. </code></pre><ol start="8"><li><code>Array.reduceRight()</code>,</li><li><code>Array.every()</code>，判断数组中所有的项是否符合指定的条件，返回值为布尔值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">65</span>]<br><span class="hljs-keyword">const</span> allOver18 = arr.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">18</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrOver18) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ol start="10"><li><code>Array.some()</code>，判断数组中是否有值符合指定条件，返回值为布尔值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">65</span>]<br><span class="hljs-keyword">const</span> someOver18 = arr.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">18</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(someOver18) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ol start="11"><li><code>Array.indeOf()</code>，检索数组中的某个元素值，并返回其第一次出现的索引值，若数组中没有该值返回-1</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">34</span>, <span class="hljs-number">65</span>]<br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">32</span>) <span class="hljs-comment">// -1</span><br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">34</span>) <span class="hljs-comment">//1 </span><br></code></pre></td></tr></table></figure><ol start="12"><li><code>Array.lastIndexOf()</code>，跟<code>Array.indexOf</code>类似，但是是从数组结尾处开始检索的</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">34</span>, <span class="hljs-number">65</span>]<br>arr.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">34</span>) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><ol start="13"><li><code>JSON.parse()</code>，用于将文本转换为JavaScript对象</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//例如后端返回的数据是</span><br><span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;张三&quot;, &quot;age&quot;:&quot;18&quot;&#125;&#x27;</span><br><span class="hljs-keyword">const</span> person = <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;张三&quot;, &quot;age&quot;:&quot;18&quot;&#125;&#x27;</span><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(person) <span class="hljs-comment">// &#123;name: &#x27;张三&#x27;, age: &#x27;18&#x27;&#125;</span><br>  <br></code></pre></td></tr></table></figure><ol start="14"><li><code>JSON.stringfy()</code>，用于将JavaScript对象转换为文本</li><li><code>Date.now()</code>，返回自零日期（1970年1月1日00:00:00:00）以来的毫秒数</li><li>属性Getter和Setter</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">ageP</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span><br>  &#125;,<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">ageP</span>(<span class="hljs-params">value</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = value<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="17"><li><p>新的对象属性和方法</p><p><code>Object.defineProperty()</code> 是 ES5 中的新对象方法。</p><p>它允许定义对象属性和&#x2F;或更改属性的值和&#x2F;或元数据。</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 创建对象：</span><br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;Bill&quot;</span>,<br>  lastName : <span class="hljs-string">&quot;Gates&quot;</span>,<br>  language : <span class="hljs-string">&quot;NO&quot;</span><br>&#125;;<br><span class="hljs-comment">// 更改属性：</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&quot;language&quot;</span>, &#123;<br>  get : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> language &#125;,<br>  set : <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123; language = value.<span class="hljs-title function_">toUpperCase</span>()&#125;<br>&#125;);<br><span class="hljs-comment">// 更改语言</span><br>person.<span class="hljs-property">language</span> = <span class="hljs-string">&quot;en&quot;</span>;<br></code></pre></td></tr></table></figure><p>18. </p><h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><ol><li>let，块作用域声明变量</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// Here x is 10</span><br>&#123; <br>  <span class="hljs-keyword">let</span> x = <span class="hljs-number">2</span>;<br>  <span class="hljs-comment">// Here x is 2</span><br>&#125;<br><span class="hljs-comment">// Here x is 10</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>const</p><p> <code>const</code> 语句允许您声明常量（具有常量值的 JavaScript 变量）。</p><p> 常量类似于 <code>let</code> 变量，但不能更改值。</p></li><li><p>指数运算符</p><p> 取幂运算符（<code>**</code>）将第一个操作数提升到第二个操作数的幂。</p><p> <code>x ** y</code> 的结果与 <code>Math.pow(x,y)</code> 相同：</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> y = <span class="hljs-number">5</span> ** <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> z = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(x,<span class="hljs-number">2</span>);   <span class="hljs-comment">// 结果都是 25</span><br></code></pre></td></tr></table></figure><ol start="4"><li>默认参数值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFun</span>(<span class="hljs-params">x,y = <span class="hljs-number">10</span></span>)&#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br><span class="hljs-title function_">handleFun</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><ol start="5"><li><code>Array.find()</code>，该方法返回符合指定条件的第一个项</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">32</span>, <span class="hljs-number">34</span>]<br><span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item &gt;<span class="hljs-number">18</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr) <span class="hljs-comment">//34</span><br></code></pre></td></tr></table></figure><ol start="6"><li><code>Array.findIndex()</code>，该方法返回符合指定条件的第一个项的索引值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">32</span>, <span class="hljs-number">34</span>]<br><span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">18</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr) <span class="hljs-comment">//1 </span><br></code></pre></td></tr></table></figure><ol start="7"><li>新的数字方法<ul><li>Number.isInteger()；参数是整数返回true，否则false</li><li>Number.isSafeInteger()；参数是整数且是安全整数（-(2<strong>53 - 1) 到 +(2</strong>53 - 1)）</li></ul></li><li>箭头函数，使用const不使用var定义，是因为函数表达式始终是常量值，</li></ol><h1 id="ECMAScript2016"><a href="#ECMAScript2016" class="headerlink" title="ECMAScript2016"></a>ECMAScript2016</h1><ol><li>求幂赋值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span><br>x **= <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">//25</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>Array.includes()</code>，该方法用于检查元素是否存在于数组中</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>arr.<span class="hljs-title function_">includes</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h1 id="ECMAScript2017"><a href="#ECMAScript2017" class="headerlink" title="ECMAScript2017"></a>ECMAScript2017</h1><ol><li>字符串填充<ul><li>str.padStart(填充过后的位数,填充的内容)</li><li>str.padEnd(填充过后的位数,填充的内容)</li></ul></li><li><code>Object.entries()</code>，返回对象中键值对的数组</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> person = &#123;<br>  firstName : <span class="hljs-string">&quot;Bill&quot;</span>,<br>  lastName : <span class="hljs-string">&quot;Gates&quot;</span>,<br>  age : <span class="hljs-number">50</span>,<br>  eyeColor : <span class="hljs-string">&quot;blue&quot;</span><br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(person) <br><span class="hljs-comment">//[[&#x27;firstName&#x27;, &#x27;Bill&#x27;],[&#x27;lastName&#x27;, &#x27;Gates&#x27;][&#x27;age&#x27;, 50][&#x27;eyeColor&#x27;, &#x27;blue&#x27;]]</span><br></code></pre></td></tr></table></figure><ol start="3"><li><code>Object.values()</code>，返回对象的每一项的值</li><li>Async函数</li></ol><h1 id="ECMAScript2018"><a href="#ECMAScript2018" class="headerlink" title="ECMAScript2018"></a>ECMAScript2018</h1><ol><li><code>Promise.finally</code></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>();<br><br>promise.<span class="hljs-title function_">then</span>();<br>promise.<span class="hljs-title function_">catch</span>();<br>promise.<span class="hljs-title function_">finally</span>();<br></code></pre></td></tr></table></figure><ol start="2"><li><code>Rest</code>，这允许我们破坏一个对象并将剩余物收集到一个新对象上：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">4</span> &#125;;<br>x; <span class="hljs-comment">// 1</span><br>y; <span class="hljs-comment">// 2</span><br>z; <span class="hljs-comment">// &#123; a: 3, b: 4 &#125;</span><br></code></pre></td></tr></table></figure><h1 id="ECMAScript2019"><a href="#ECMAScript2019" class="headerlink" title="ECMAScript2019"></a>ECMAScript2019</h1><ol><li><code>Object.fromEntries()</code></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> fruits = [<br>[<span class="hljs-string">&quot;apples&quot;</span>, <span class="hljs-number">300</span>],<br>[<span class="hljs-string">&quot;pears&quot;</span>, <span class="hljs-number">900</span>],<br>[<span class="hljs-string">&quot;bananas&quot;</span>, <span class="hljs-number">500</span>]<br>];<br><span class="hljs-keyword">const</span> myObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(fruits); <br><span class="hljs-comment">//&#123;apples: 300, pears: 900, bananas: 500&#125;</span><br><br><br></code></pre></td></tr></table></figure><ol start="2"><li>可选的catch绑定，从 ES2019 开始，如果不需要，可以省略 catch 参数：</li><li><code>flat()</code>，通过展平嵌套数组来创建新数组</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> myArr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]];<br><span class="hljs-keyword">const</span> newArr = myArr.<span class="hljs-title function_">flat</span>()<br></code></pre></td></tr></table></figure><ol start="4"><li><code>faltMap()</code>， 方法首先映射数组的所有元素，然后通过展平数组来创建新数组。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> myArr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">const</span> newArr = myArr.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x * <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>5. </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么要对URL进行编码</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AF%B9URL%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A0%81/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AF%B9URL%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>URL 元字符：分号（;），逗号（,），斜杠（&#x2F;），问号（?），冒号（:），at（@），&amp;，等号（&#x3D;），加号（+），美元符号（$），井号（#）</p><p>语义字符：<code>a-z</code>，<code>A-Z</code>，<code>0-9</code>，连词号（<code>-</code>），下划线（<code>_</code>），点（<code>.</code>），感叹号（<code>!</code>），波浪线（<code>~</code>），星号（<code>*</code>），单引号（<code>&#39;</code>），圆括号（<code>()</code>）</p><p>为什么要使用encodeURLComponent等对浏览器URL进行编码？</p><p>浏览器地址栏上的<code>https://www.google.com/search?q=中&amp;文</code>复制链接为啥变成看不懂的东西<code>https://www.google.com/search?q=%E4%B8%AD&amp;%E6%96%87</code></p><p>浏览器会对url进行自动编码</p><p><code>decodeURI()</code>、<code>decodeURIComponent()</code>用于URL 片段的解码。它们分别是<code>encodeURI()</code>、<code>encodeURIComponent()</code>方法的逆运算。</p><h4 id="encodeURI"><a href="#encodeURI" class="headerlink" title="encodeURI()"></a>encodeURI()</h4><p><code>encodeURI()</code>方法用于转码整个 URL。它的参数是一个字符串，代表整个 URL。它会将<strong>元字符和语义字符之外</strong>的字符，都进行转义。示例如下</p><h4 id="encodeURIComponent"><a href="#encodeURIComponent" class="headerlink" title="encodeURIComponent()"></a>encodeURIComponent()</h4><p><code>encodeURIComponent()</code>方法用于转码 URL 的组成部分，会转码除了语义字符之外的所有字符，即元字符也会被转码。所以，它不能用于转码整个 URL。它接受一个参数，就是 URL 的片段。示例如下：</p><h4 id="decodeURI"><a href="#decodeURI" class="headerlink" title="decodeURI"></a>decodeURI</h4><h4 id="decodeURIComponent"><a href="#decodeURIComponent" class="headerlink" title="decodeURIComponent"></a>decodeURIComponent</h4><h4 id="3-1-区别"><a href="#3-1-区别" class="headerlink" title="3.1 区别"></a>3.1 区别</h4><p>从以上我们可以看出，<code>encodeURI()</code>方法用于转码整个 URL，<code>encodeURIComponent()</code>方法用于转码 URL 的组成部分；原因是<code>encodeURI()</code>与<code>encodeURIComponent()</code>有着本质区别：<code>encodeURI()</code>不会对URL 元字符进行转码，而<code>encodeURIComponent()</code>会对URL元字符进行转码；这样一来，会导致<code>encodeURIComponent()</code>转码过后的URL无法直接访问；所以<code>encodeURIComponent()</code>一般用于转码URL的部分参数；</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在vue中使用xlsx导出表格</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8xlsx%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8xlsx%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm i xlsx<br><br><span class="hljs-comment">// utils/exel.ts</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">XLSX</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;xlsx&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">exportFile</span> = (<span class="hljs-params">arr: any[]</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title class_">AMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;导出的数据不能为空&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// const sheet = XLSX.utils.json_to_sheet(arr);</span><br>  <span class="hljs-comment">// const book = XLSX.utils.book_new();</span><br>  <span class="hljs-comment">// XLSX.utils.book_append_sheet(book, sheet, &#x27;sheet1&#x27;);</span><br>  <span class="hljs-comment">// XLSX.writeFile(book, `user$&#123;(new Date()).getTime()&#125;.xls`);</span><br>  <span class="hljs-keyword">const</span> wb = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">book_new</span>();<br><br>  <span class="hljs-comment">// 自定义多级表头</span><br>  <span class="hljs-keyword">const</span> header = [<br>    <span class="hljs-comment">// 第一级表头</span><br>    [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;个性化&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;内容属性&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;整体&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>],<br>    <span class="hljs-comment">// 第二级表头</span><br>    [<span class="hljs-string">&#x27;mid&#x27;</span>, <span class="hljs-string">&#x27;buvid&#x27;</span>, <span class="hljs-string">&#x27;人群属性&#x27;</span>, <span class="hljs-string">&#x27;三观&#x27;</span>, <span class="hljs-string">&#x27;兴趣选择&#x27;</span>, <span class="hljs-string">&#x27;长期兴趣&#x27;</span>, <span class="hljs-string">&#x27;已关注&#x27;</span>, <span class="hljs-string">&#x27;近期行为&#x27;</span>, <span class="hljs-string">&#x27;实时行为&#x27;</span>, <span class="hljs-string">&#x27;原创&#x27;</span>, <span class="hljs-string">&#x27;特色&#x27;</span>, <span class="hljs-string">&#x27;专业性&#x27;</span>, <span class="hljs-string">&#x27;时效性&#x27;</span>, <span class="hljs-string">&#x27;情感共鸣&#x27;</span>, <span class="hljs-string">&#x27;获得感&#x27;</span>, <span class="hljs-string">&#x27;美学&#x27;</span>, <span class="hljs-string">&#x27;多样性&#x27;</span>, <span class="hljs-string">&#x27;安全性&#x27;</span>],<br>  ];<br><br>  <span class="hljs-comment">// 合并单元格并居中文字</span><br>  <span class="hljs-keyword">const</span> mergeCells = [<br>    <span class="hljs-comment">// 合并第一级表头的单元格</span><br>    &#123; <span class="hljs-attr">s</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">0</span> &#125;, <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">1</span> &#125; &#125;,<br>    &#123; <span class="hljs-attr">s</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">8</span> &#125; &#125;,<br>    &#123; <span class="hljs-attr">s</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">9</span> &#125;, <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">13</span> &#125; &#125;,<br>    &#123; <span class="hljs-attr">s</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">14</span> &#125;, <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">17</span> &#125; &#125;,<br>    <span class="hljs-comment">// 合并第二级表头的单元格</span><br>    <span class="hljs-comment">// &#123; s: &#123; r: 1, c: 0 &#125;, e: &#123; r: 1, c: 2 &#125; &#125;,</span><br>    <span class="hljs-comment">// &#123; s: &#123; r: 1, c: 3 &#125;, e: &#123; r: 1, c: 5 &#125; &#125;,</span><br>  ];<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;要导出的arr===&gt;&#x27;</span>, arr);<br>  <span class="hljs-keyword">const</span> exportData = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item:any</span>) =&gt;</span> [<br>    item.<span class="hljs-property">mid</span>,<br>    item.<span class="hljs-property">buvid</span>,<br>    ...(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(item.<span class="hljs-property">extra</span>)),<br>  ]);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exportData&#x27;</span>, exportData);<br><br>  <span class="hljs-keyword">const</span> wsData = [...header, ...exportData];<br>  <span class="hljs-keyword">const</span> ws = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">json_to_sheet</span>(wsData, &#123; <span class="hljs-attr">skipHeader</span>: <span class="hljs-literal">true</span> &#125;);<br>  <span class="hljs-comment">// 自动调整列宽以适应最长的值</span><br>  <span class="hljs-comment">// const colWidths = header[0].map(() =&gt; (&#123; wch: 0 &#125;));</span><br>  <span class="hljs-keyword">const</span> colWidths = header[<span class="hljs-number">1</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">wch</span>: <span class="hljs-number">0</span> &#125;));<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;colWidths&#x27;</span>, colWidths);<br><br>  wsData.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">row</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;row&#x27;</span>, row);<br><br>    row.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cell, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (cell &amp;&amp; cell.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">const</span> textWidth = cell.<span class="hljs-title function_">toString</span>().<span class="hljs-property">length</span> * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-comment">// 如果是第一行（列头），以列头宽度为准</span><br>          colWidths[i].<span class="hljs-property">wch</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(colWidths[i].<span class="hljs-property">wch</span>, textWidth);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 如果是数据行，以内容宽度为准</span><br>          colWidths[i].<span class="hljs-property">wch</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(colWidths[i].<span class="hljs-property">wch</span>, textWidth);<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;);<br>  <span class="hljs-comment">// wsData.forEach((row) =&gt; &#123;</span><br>  <span class="hljs-comment">//   row.forEach((cell, i) =&gt; &#123;</span><br>  <span class="hljs-comment">//     if (cell &amp;&amp; cell.length) &#123;</span><br>  <span class="hljs-comment">//       const textWidth = cell.toString().length;</span><br>  <span class="hljs-comment">//       console.log(&#x27;textWidth&#x27;, textWidth);</span><br><br>  <span class="hljs-comment">//       // 如果是第一行（列头），以列头宽度为准</span><br>  <span class="hljs-comment">//       if (colWidths[i].wch) &#123;</span><br>  <span class="hljs-comment">//         colWidths[i].wch = Math.max(colWidths[i].wch, textWidth);</span><br>  <span class="hljs-comment">//       &#125;</span><br>  <span class="hljs-comment">//     &#125;</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;);</span><br>  ws[<span class="hljs-string">&#x27;!cols&#x27;</span>] = colWidths;<br><br>  <span class="hljs-comment">// 将合并单元格信息应用于工作表</span><br>  ws[<span class="hljs-string">&#x27;!merges&#x27;</span>] = mergeCells;<br><br>  <span class="hljs-comment">// 针对合并的单元格设置居中样式</span><br>  <span class="hljs-comment">// ws.A1.s = &#123; alignment: &#123; horizontal: &#x27;center&#x27;, vertical: &#x27;center&#x27; &#125; &#125;;</span><br>  <span class="hljs-comment">// ws.D1.s = &#123; alignment: &#123; horizontal: &#x27;center&#x27;, vertical: &#x27;center&#x27; &#125; &#125;;</span><br><br>  <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">book_append_sheet</span>(wb, ws, <span class="hljs-string">&#x27;Sheet1&#x27;</span>);<br>  <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-title function_">writeFile</span>(wb, <span class="hljs-string">&#x27;exported_data.xlsx&#x27;</span>);<br>&#125;;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js实现虚拟滚动</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/js%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%BB%9A%E5%8A%A8/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/js%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%BB%9A%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-为什么使用虚拟滚动？"><a href="#1-为什么使用虚拟滚动？" class="headerlink" title="1.为什么使用虚拟滚动？"></a>1.为什么使用虚拟滚动？</h1><p>首先提到一个现象，前端的性能瓶颈那就是页面的卡顿，当然这种页面的卡顿包含了多种原因。例如HTTP请求过多导致数据加载国漫，下载的静态文件非常大导致页面加载时间很长，js中一些算法响应的时间过长等。很多前端工程师都花费很多的精力在dom渲染上来优化页面加载。</p><h1 id="2-浏览器渲染原理"><a href="#2-浏览器渲染原理" class="headerlink" title="2.浏览器渲染原理"></a>2.浏览器渲染原理</h1><p>在我们讨论今天的这个虚拟滚动原理之前需要了解一下浏览器的渲染原理。</p><p>浏览器渲染页面的过程分为以下几步：</p><ol><li>解析html文件并生成 Dom Tree。</li><li>CSS解析生成CSS Rule Tree。</li><li>在渲染阶段，浏览器会把DOM Tree 和 CSS Rule Tree 给DOM Tree上的每个节点添加样式，并生成Render Tree。</li><li>Render Tree（layout&#x2F;reflow），绘制元素尺寸、位置计算。</li><li>将计算好的信息发给GPU并显示在页面。</li></ol><p>具体的浏览器原理在这篇文章不做过多的介绍，有兴趣的话可以去看我的另一篇文章《一篇文章理解浏览器渲染原理和机制》。</p><h1 id="3-浏览器渲染瓶颈"><a href="#3-浏览器渲染瓶颈" class="headerlink" title="3.浏览器渲染瓶颈"></a>3.浏览器渲染瓶颈</h1><p>首先大家要明白重绘和回流(重排)的概念：</p><ul><li>重绘(repaint)：当Render Tree 中的一些元素需要更新元素本身的属性，只影响外观样式和颜色等，不影响整个布局。</li><li>回流(reflow)：当Render Tree 中的某些元素因为规模、尺寸、位置等改变时，会影响整个布局。</li></ul><p>回流必定发生重绘，重绘不一定发生回流，所以大家可以知道，回流所造成的影响是比较大的，如果页面中频繁的触发回流的操作，那么最终造成页面卡顿也是肯定的。</p><p>造成回流和重绘的操作有以下类别：</p><ul><li>页面初始化</li><li>添加或者删除页面上的可视区DOM元素</li><li>元素位置发生改变，定位和浮动，盒模型</li><li>页面文本内容发生变化，影响输入框的大小改变。</li><li>图片显示加载，如果没有加载图片又会被替换成相应提示文字信息。</li><li>浏览器窗口尺寸大小变化（回流是根据视口大小来计算页面元素的位置和大小）。</li></ul><p>其实对于这些需要考虑的因素，一些浏览器也是做出了相应的处理，因为每次回流可能会造成巨大的影响，浏览器本身会实现一个队列记录每次回流时操作，当存放的操作数量达到一定值或者达到一定时间后会对队列中的操作进行清空，并一次性进行一次回流，让多次回流操作压缩成一次回流操作执行，提高效率。</p><p>本文章将着重讲述关于滚动事件scroll event造成的影响。滚动事件本身不会造成太多的性能消耗，而是因为滚动事件伴随有大量的元素参与进来一起进行回流的操作才会影响浏览器的性能。例如一个表格有上万行数据，如果一次性展示在页面中，并且在滚动时显示对应偏移的数据，那么每一次滚动都会对这几万个元素进行回流，那么性能肯定会很差。</p><p>浏览器的瓶颈主要在于：</p><ol><li>无法一次性渲染太多的DOM元素。</li><li>每次滚动事件将会让对应的DOM中所有元素重新渲染。</li></ol><p>针对于浏览器的瓶颈问题，有三种解决办法：数据分页、无限滚动、虚拟滚动。</p><h1 id="4-数据分页"><a href="#4-数据分页" class="headerlink" title="4.数据分页"></a>4.数据分页</h1><p>许多网页和应用程序都会用到这样的方，对需要展示的大量数据进行分割分页，后端已经做好了分页，前端只需要调用后端的接口传入相应的第几页的参数就能获取到，减少了一次性需要渲染的行数，但是如果查询的表列数非常多，还是可能会渲染很多元素，不是一个很稳定的方法。</p><h1 id="5-无限滚动"><a href="#5-无限滚动" class="headerlink" title="5.无限滚动"></a>5.无限滚动</h1><p>该方法是在页面渲染一次性所能成手最大范围的数据量，当滚动条快接近底部时，再去追加渲染下一批需要渲染的元素，但是该方法的明显缺血在于，如果数据量过大，无限滚动下去那么最终所造成渲染的元素越来越多，性能也不会很好。</p><h1 id="6-虚拟滚动"><a href="#6-虚拟滚动" class="headerlink" title="6.虚拟滚动"></a>6.虚拟滚动</h1><p>虚拟滚动其实就是综合数据分页和无限滚动的方法，在有限的视口中只渲染我们所能看到的数据，超出视口之外的数据就不进行渲染，可以通过计算可视范围内的但单元格，保证每一次滚动渲染的DOM元素都是可以控制的，不会担心像数据分页一样一次性渲染过多，也不会发生像无限滚动方案那样会存在数据堆积，是一种很好的解决办法。</p><p>假设实际开发中服务端一次响应20万条列表数据，此时设备屏幕只允许容纳20条，那么用户理论上只可以看见20条数据，其他的数据不会进行渲染加载。如果前端将20万条数据全部渲染成DOM元素，可能造成程序卡顿，占用较大资源，非常影响用户体验，那么虚拟滚动技术就完美的解决了这一问题。</p><p><img src="https://secure2.wostatic.cn/static/q8QUv7MNPy4rDmu6YdKhYK/image.png?auth_key=1691487122-ihZtGo7FfJHWtt8g2qQnwF-0-5a4c45ff89770bda3980d8a8b331f8d6"></p><p>如图所示，当我们进行滚动时，可视区域大小不变，渲染的元素数量也是可以控制的，合理的减少了不必要的DOM渲染，提高浏览器的性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">可以计算：卷入行数 = <span class="hljs-title function_">scrollTop</span>(卷入高度) / 每行的高度(itemH)<br></code></pre></td></tr></table></figure><p>黄色边框内为可视区域，可视区域内的红色行表示在页面能展示的数据，每次滚动时，计算scrollTop的值，可视区域内的红色渲染部分高度可以略大于黄色边框可是高度，避免滚动的时候直接替换。</p><p>如何计算可视区域渲染的元素以及实现虚拟滚动，步骤如下：</p><ul><li>统一设置每一行的高度需要相同，方便计算。</li><li>需要计算渲染数据数量（数组的长度），根据每行的高度以及元素的总量计算整个DOM渲染容器的高度。</li><li>获取可视区域的高度</li><li>触发滚动事件后，计算偏移量（滚动条据顶距离），再根据可视区域高度计算本次偏移的截止量，得到需要渲染的具体数据。</li><li>对于与表格的列来说，需要做虚拟滚动的话，在x轴同样可以根据以上步骤执行，实现横向虚拟滚动。</li></ul><h1 id="7-自定义封装一个虚拟滚动组件："><a href="#7-自定义封装一个虚拟滚动组件：" class="headerlink" title="7.自定义封装一个虚拟滚动组件："></a>7.自定义封装一个虚拟滚动组件：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//子组件：</span><br>&lt;template&gt;<br>  &lt;!-- 可视区盒子 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;`height:$&#123;viewH&#125;px;overflow-y:scroll`&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    @<span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;handleScroll&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;`height:$&#123;scrollH&#125;px`&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item_box&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;`transform:translateY($&#123;offsetY&#125;px)`&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;`height:$&#123;itemH&#125;px`&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;&#123; item &#125;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ScrollComponent&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: <span class="hljs-title class_">Array</span>,   <span class="hljs-comment">// 列表总数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">viewH</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-comment">// 外部高度</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">itemH</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-comment">// 单项高度</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">scrollH</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 整个滚动列表高度(总高度)</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">list</span>: [],    <span class="hljs-comment">// 每次显示的数据</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">showNum</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 页面需要显示的数量</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">offsetY</span>: <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 动态偏移量- 外层的盒子进行滚动设置</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">lastTime</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//最新的时间</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  mounted () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 初始化计算</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollH</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">length</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemH</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 计算可视化高度中能存几个列表，可以略多余可视化高度能存放的列表数量避免滚动时被替换</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">showNum</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">viewH</span> / <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemH</span>) + <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 默认展示的几个数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">showNum</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastTime</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// handleScroll 滚动时候触发回调</span></span></span><br><span class="language-javascript"><span class="language-xml">    handleScroll (e) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 控制滚动时间间隔</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() - <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastTime</span> &gt; <span class="hljs-number">10</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> scrollTop = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span> <span class="hljs-comment">//滚动条高度</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 每一次滚动后 根据scrollTop值获取一个可以整除itemH结果进行偏移</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 例如：scrollTop = 1220，1220 % this.itemH = 20 offsetY = 1220-20 = 1200</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetY</span> = scrollTop - (scrollTop % <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemH</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;卷入scrollTop值:&#x27;</span>, scrollTop, <span class="hljs-string">&#x27;卷入的行数：&#x27;</span>, scrollTop % <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemH</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">slice</span>(</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(scrollTop / <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemH</span>), <span class="hljs-comment">// 计算卷入了多少行</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(scrollTop / <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemH</span>) + <span class="hljs-variable language_">this</span>.<span class="hljs-property">showNum</span></span></span><br><span class="language-javascript"><span class="language-xml">        )</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastTime</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() <span class="hljs-comment">//更新最新时间</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">left</span>: <span class="hljs-number">500px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.item</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid pink;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ScrollComponent</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;dataList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:viewH</span>=<span class="hljs-string">&quot;viewH&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:itemH</span>=<span class="hljs-string">&quot;itemH&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ScrollComponent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/ScrollComponent.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">ScrollComponent</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">dataList</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">viewH</span>: <span class="hljs-number">200</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">itemH</span>: <span class="hljs-number">40</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  mounted () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">* &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>浏览器显示结果：</p><p><img src="https://secure2.wostatic.cn/static/whsD1frWo9KfNzrtzjbmUr/image.png?auth_key=1691487382-7dYgqgpLoSS7vQQTAMrdJX-0-720a6dffc5bd68bb8c7fa93d9b2c2762"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器的缓存</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="设置浏览器缓存"><a href="#设置浏览器缓存" class="headerlink" title="设置浏览器缓存"></a>设置浏览器缓存</h1><p>在 Vue 项目中设置浏览器缓存可以通过配置 HTTP 头部或使用插件来完成。下面我将分别介绍这两种方法。</p><ol><li>配置 HTTP 头部： 在你的后端服务器上配置适当的 HTTP 头部可以告诉浏览器如何缓存你的静态资源。你可以设置 <code>Cache-Control</code> 和 <code>Expires</code> 等头部字段以控制缓存时间。 例如，在使用 Express.js 的 Node.js 服务器上，你可以通过以下代码设置缓存：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>, &#123;<br>  <span class="hljs-attr">maxAge</span>: <span class="hljs-string">&#x27;1d&#x27;</span>,<br>  <span class="hljs-attr">etag</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">lastModified</span>: <span class="hljs-literal">false</span>,<br>&#125;));<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">在这个例子中，`maxAge` 设置了资源的缓存过期时间为一天。</code></pre><ol start="2"><li>使用插件： 你可以使用第三方插件来帮助你管理浏览器缓存。例如，你可以考虑使用 Axios、vue-resource 或 vue-axios 等插件，它们具有内置的缓存控制功能。 安装插件后，你可以通过设置请求的 <code>cache</code> 选项来控制缓存行为。以下是一个使用 Axios 的示例：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-comment">// 发送 GET 请求并启用缓存</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;your-api-endpoint&#x27;</span>, &#123; <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span> &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理响应数据</span><br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理错误</span><br>  &#125;);<span class="hljs-string">`</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><pre><code class="hljs">通过将 `cache` 选项设置为 `true`，Axios 将自动处理缓存并在需要时从缓存中获取数据。</code></pre><h1 id="清除浏览器缓存"><a href="#清除浏览器缓存" class="headerlink" title="清除浏览器缓存"></a>清除浏览器缓存</h1><p>你无法直接从 Vue 项目中自动清除浏览器缓存，因为这个过程是由浏览器自动完成的。但是，你可以通过代码中的某些技术手段来间接实现自动清除浏览器缓存的效果。</p><p>下面是两种常见的方法：</p><ol><li>版本控制： 通过在你的静态资源的 URL 中添加版本号或时间戳，可以强制浏览器在每次更新后重新下载资源。例如，可以在引入你的 CSS 和 JavaScript 文件时，将文件名中包含版本号或时间戳：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;css/styles.css?v=1.0&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/app.js?v=1.0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="hljs-string">` </span><br></code></pre></td></tr></table></figure><pre><code class="hljs">当你更新了静态资源时，修改 URL 中的版本号或时间戳，这样浏览器会认为这是一个新的资源，从而重新下载并更新缓存。</code></pre><ol start="2"><li><p>缓存控制： 在你的后端服务器上配置适当的 HTTP 头部，可以告诉浏览器在更新后不要使用缓存的旧版本。你可以设置 <code>Cache-Control</code> 和 <code>Expires</code> 等头部字段来控制缓存时间，以及使用 <code>ETag</code> 或 <code>Last-Modified</code> 等字段进行缓存验证。</p><p> 例如，在使用 Express.js 的 Node.js 服务器上，你可以通过以下代码禁用缓存：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;no-cache, no-store, must-revalidate&#x27;</span>);<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Pragma&#x27;</span>, <span class="hljs-string">&#x27;no-cache&#x27;</span>);<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Expires&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">这样，每次请求该资源时，浏览器都会重新从服务器获取最新的资源，而不是使用缓存中的旧版本。</code></pre><p>请注意，这些方法都只能间接实现自动清除浏览器缓存的效果，并不能真正清除浏览器缓存。用户仍然可以通过浏览器设置手动清除缓存。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ts的使用</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/Ts%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/Ts%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="TypeScript基础类型"><a href="#TypeScript基础类型" class="headerlink" title="TypeScript基础类型"></a>TypeScript基础类型</h1><p>Ts 基础类型有：数值（<code>Number</code>）、字符串（<code>String</code>）、布尔（<code>Boolean</code>）、数组（<code>Array</code>）、枚举（<code>Enum</code>）、<code>Any</code>、元祖（<code>Tuple</code>）、<code>Void</code>、<code>Unknown</code>、<code>Never</code>、<code>Null</code>和<code>Undefined</code>。</p><h1 id="TypeScript高级类型"><a href="#TypeScript高级类型" class="headerlink" title="TypeScript高级类型"></a>TypeScript高级类型</h1><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>联合类型表示取值可以为多种类型中的一种，使用 <code>|</code> 分隔每个类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">myFavoriteNumber</span>: string | number;<br>myFavoriteNumber = <span class="hljs-string">&#x27;seven&#x27;</span>; <span class="hljs-comment">// OK</span><br>myFavoriteNumber = <span class="hljs-number">7</span>; <span class="hljs-comment">// OK</span><br><br></code></pre></td></tr></table></figure><p>联合类型通常与 <code>null</code> 或 <code>undefined</code> 一起使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sayHello</span> = (<span class="hljs-params">name: string | <span class="hljs-literal">undefined</span></span>) =&gt; &#123;<br>  <span class="hljs-comment">/* ... */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>例如，这里 <code>name</code> 的类型是 <code>string | undefined</code> 意味着可以将 <code>string</code> 或 <code>undefined</code> 的值传递给<code>sayHello</code> 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">sayHello</span>(<span class="hljs-string">&quot;Semlinker&quot;</span>);<br><span class="hljs-title function_">sayHello</span>(<span class="hljs-literal">undefined</span>);<br></code></pre></td></tr></table></figure><p>通过这个示例，你可以凭直觉知道类型 A 和类型 B 联合后的类型是同时接受 A 和 B 值的类型。</p><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>TypeScript 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interface <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">id</span>: string;<br>  <span class="hljs-attr">age</span>: number;<br>&#125;<br><br>interface <span class="hljs-title class_">IWorker</span> &#123;<br>  <span class="hljs-attr">companyId</span>: string;<br>&#125;<br><br>type <span class="hljs-title class_">IStaff</span> = <span class="hljs-title class_">IPerson</span> &amp; <span class="hljs-title class_">IWorker</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">staff</span>: <span class="hljs-title class_">IStaff</span> = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;E1006&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br>  <span class="hljs-attr">companyId</span>: <span class="hljs-string">&#x27;EFT&#x27;</span><br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(staff)<br><br></code></pre></td></tr></table></figure><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>类型别名会给一个类型起个新名字。 类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">type <span class="hljs-title class_">Message</span> = string | string[];<br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">greet</span> = (<span class="hljs-params">message: Message</span>) =&gt; &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="TypeScript类"><a href="#TypeScript类" class="headerlink" title="TypeScript类"></a>TypeScript类</h1><h1 id="TypeScript函数"><a href="#TypeScript函数" class="headerlink" title="TypeScript函数"></a>TypeScript函数</h1><h2 id="参数类型和返回类型"><a href="#参数类型和返回类型" class="headerlink" title="参数类型和返回类型"></a>参数类型和返回类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserId</span>(<span class="hljs-params">name: string, id: number</span>): string &#123;<br>  <span class="hljs-keyword">return</span> name + id;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">IdGenerator</span>: <span class="hljs-function">(<span class="hljs-params">chars: string, nums: number</span>) =&gt;</span> string;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserId</span>(<span class="hljs-params">name: string, id: number</span>): string &#123;<br>  <span class="hljs-keyword">return</span> name + id;<br>&#125;<br><span class="hljs-title class_">IdGenerator</span> = createUserId;。<br></code></pre></td></tr></table></figure><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 可选参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserId</span>(<span class="hljs-params">name: string, id: number, age?: number</span>): string &#123;<br>  <span class="hljs-keyword">return</span> name + id;<br>&#125;<br><br><span class="hljs-comment">// 默认参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserId</span>(<span class="hljs-params"></span><br><span class="hljs-params">  name: string = <span class="hljs-string">&quot;Semlinker&quot;</span>,</span><br><span class="hljs-params">  id: number,</span><br><span class="hljs-params">  age?: number</span><br><span class="hljs-params"></span>): string &#123;<br>  <span class="hljs-keyword">return</span> name + id;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">array, ...items</span>) &#123;<br>  items.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>    array.<span class="hljs-title function_">push</span>(item);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">let</span> a = [];<br><span class="hljs-title function_">push</span>(a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h1 id="TypeScript-接口"><a href="#TypeScript-接口" class="headerlink" title="TypeScript 接口"></a>TypeScript 接口</h1><p>在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。</p><p>TypeScript 中的接口是一个非常灵活的概念，除了可用于<a href="https://link.juejin.cn/?target=https://ts.xcatliu.com/advanced/class-and-interfaces.html#%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3">对类的一部分行为进行抽象</a>以外，也常用于对「对象的形状（Shape）」进行描述。</p><h3 id="可选-只读属性-任意属性"><a href="#可选-只读属性-任意属性" class="headerlink" title="可选 | 只读属性| 任意属性"></a>可选 | 只读属性| 任意属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interface <span class="hljs-title class_">Person</span> &#123;<br>  readonly <span class="hljs-attr">name</span>: string; <span class="hljs-comment">// 只读</span><br>  age?: number; <span class="hljs-comment">// 可选</span><br>  [<span class="hljs-attr">propName</span>: string]: any; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">Person</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span> &#125;;<br><br></code></pre></td></tr></table></figure><h2 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">printLabel</span>(<span class="hljs-params">label:string</span>):<span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;print&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">labelInfo: &#123; label: string &#125;</span>):<span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;labelInfo&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// print(&#x27;haha&#x27;)    错误</span><br><span class="hljs-comment">// print(&#123;name: &#x27;haha&#x27;&#125;)    错误</span><br><span class="hljs-title function_">print</span>(&#123;<span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;wang&#x27;</span>&#125;)<br><br><span class="hljs-comment">//interface关键字定义接口</span><br>interface <span class="hljs-title class_">FullName</span> &#123;<br>    <span class="hljs-attr">firstName</span>: string<br>    secondName?: string <span class="hljs-comment">//可选属性</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printName</span>(<span class="hljs-params">name:FullName</span>)&#123;  <span class="hljs-comment">//必须传入对象firstName secondName</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name.<span class="hljs-property">firstName</span> + name.<span class="hljs-property">secondName</span>)<br>&#125;<br><span class="hljs-title function_">printName</span>(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;zhang&#x27;</span>,<span class="hljs-string">&#x27;san&#x27;</span>) <span class="hljs-comment">// 错 只能传两个字符串</span><br><br></code></pre></td></tr></table></figure><h1 id="TypeScript泛型T"><a href="#TypeScript泛型T" class="headerlink" title="TypeScript泛型T"></a>TypeScript泛型<code>T</code></h1><p>设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是：类的实例成员、类的方法、函数参数和函数返回值。</p><p>泛型（Generics）是允许同一个函数接受不同类型参数的一种模板。相比于使用 any 类型，使用泛型来创建可复用的组件要更好，因为泛型会保留参数类型。</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p><code>T extends object</code> 是泛型约束的一种表现，泛型约束简单点说就是把泛型的具体化数据类型范围缩小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interface <span class="hljs-title class_">Sizeable</span> &#123;<br>  <span class="hljs-attr">size</span>: number;<br>&#125;<br><span class="hljs-keyword">function</span> trace&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sizeable</span>&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">size</span>);<br>  <span class="hljs-keyword">return</span> arg;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型变量"><a href="#泛型变量" class="headerlink" title="泛型变量"></a>泛型变量</h2><p>对刚接触 TypeScript 泛型的小伙伴来说，看到 T 和 E，还有 K 和 V 这些泛型变量时，估计会一脸懵逼。其实这些大写字母并没有什么本质的区别，只不过是一个约定好的规范而已。也就是说使用大写字母 A-Z 定义的类型变量都属于泛型，把 T 换成 A，也是一样的。下面我们介绍一下一些常见泛型变量代表的意思：</p><p>T（Type）：表示一个 TypeScript 类型<br>K（Key）：表示对象中的键类型<br>V（Value）：表示对象中的值类型<br>E（Element）：表示元素类型</p><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interface <span class="hljs-title class_">GenericIdentityFn</span>&lt;T&gt; &#123;<br>  (<span class="hljs-attr">arg</span>: T): T;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericNumber</span>&lt;T&gt; &#123;<br>  <span class="hljs-attr">zeroValue</span>: T;<br>  <span class="hljs-attr">add</span>: <span class="hljs-function">(<span class="hljs-params">x: T, y: T</span>) =&gt;</span> T;<br>&#125;<br><br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericNumber</span>&lt;number&gt;();<br>myGenericNumber.<span class="hljs-property">zeroValue</span> = <span class="hljs-number">0</span>;<br>myGenericNumber.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> getData&lt;T&gt;(<span class="hljs-attr">value</span>:T):T &#123;<br>    <span class="hljs-keyword">return</span> value<br>&#125;<br>getData&lt;number&gt;(<span class="hljs-number">123</span>)<br>getData&lt;string&gt;(<span class="hljs-string">&#x27;123&#x27;</span>)<br><span class="hljs-comment">//或者可以将返回值设为any</span><br><span class="hljs-keyword">function</span> getNum&lt;T&gt;(<span class="hljs-attr">value</span>:T):any &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;1233&#x27;</span><br>&#125;<br>getNum&lt;number&gt;(<span class="hljs-number">123</span>)<br><br></code></pre></td></tr></table></figure><h1 id="TS中的Type跟interface的区别"><a href="#TS中的Type跟interface的区别" class="headerlink" title="TS中的Type跟interface的区别"></a>TS中的<code>Type</code>跟<code>interface</code>的区别</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><h3 id="都可以描述一个对象或者函数"><a href="#都可以描述一个对象或者函数" class="headerlink" title="都可以描述一个对象或者函数"></a>都可以描述一个对象或者函数</h3><h4 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interface <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-attr">name</span>: string<br>  <span class="hljs-attr">age</span>: number<br>&#125;<br><br>interface <span class="hljs-title class_">SetUser</span> &#123;<br>  (<span class="hljs-attr">name</span>: string, <span class="hljs-attr">age</span>: number): <span class="hljs-keyword">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>type</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">type <span class="hljs-title class_">User</span> = &#123;<br>  <span class="hljs-attr">name</span>: string<br>  <span class="hljs-attr">age</span>: number<br>&#125;;<br><br>type <span class="hljs-title class_">SetUser</span> = <span class="hljs-function">(<span class="hljs-params">name: string, age: number</span>)=&gt;</span> <span class="hljs-keyword">void</span>;<br></code></pre></td></tr></table></figure><h3 id="都允许拓展（extends）"><a href="#都允许拓展（extends）" class="headerlink" title="都允许拓展（extends）"></a>都允许拓展（extends）</h3><p>interface 和 type 都可以拓展，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 extends interface 。 虽然效果差不多，但是两者语法不同。</p><h4 id="interface-extends-interface"><a href="#interface-extends-interface" class="headerlink" title="interface extends interface"></a>interface extends interface</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interface <span class="hljs-title class_">Name</span> &#123; <br>  <span class="hljs-attr">name</span>: string; <br>&#125;<br>interface <span class="hljs-title class_">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Name</span> &#123; <br>  <span class="hljs-attr">age</span>: number; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="type-extends-type"><a href="#type-extends-type" class="headerlink" title="type extends type"></a>type extends type</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">type <span class="hljs-title class_">Name</span> = &#123; <br>  <span class="hljs-attr">name</span>: string; <br>&#125;<br>type <span class="hljs-title class_">User</span> = <span class="hljs-title class_">Name</span> &amp; &#123; <span class="hljs-attr">age</span>: number  &#125;;<br></code></pre></td></tr></table></figure><h4 id="interface-extends-type"><a href="#interface-extends-type" class="headerlink" title="interface extends type"></a>interface extends type</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">type <span class="hljs-title class_">Name</span> = &#123; <br>  <span class="hljs-attr">name</span>: string; <br>&#125;<br>interface <span class="hljs-title class_">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Name</span> &#123; <br>  <span class="hljs-attr">age</span>: number; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="type-extends-interface"><a href="#type-extends-interface" class="headerlink" title="type extends interface"></a>type extends interface</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interface <span class="hljs-title class_">Name</span> &#123; <br>  <span class="hljs-attr">name</span>: string; <br>&#125;<br>type <span class="hljs-title class_">User</span> = <span class="hljs-title class_">Name</span> &amp; &#123; <br>  <span class="hljs-attr">age</span>: number; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="type-可以而-interface-不行"><a href="#type-可以而-interface-不行" class="headerlink" title="type 可以而 interface 不行"></a>type 可以而 interface 不行</h3><ul><li>type 可以声明基本类型别名，联合类型，元组等类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 基本类型别名</span><br>type <span class="hljs-title class_">Name</span> = string<br><br><span class="hljs-comment">// 联合类型</span><br>interface <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-title function_">wong</span>();<br>&#125;<br>interface <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-title function_">miao</span>();<br>&#125;<br><br>type <span class="hljs-title class_">Pet</span> = <span class="hljs-title class_">Dog</span> | <span class="hljs-title class_">Cat</span><br><br><span class="hljs-comment">// 具体定义数组每个位置的类型</span><br>type <span class="hljs-title class_">PetList</span> = [<span class="hljs-title class_">Dog</span>, <span class="hljs-title class_">Pet</span>]<br><br></code></pre></td></tr></table></figure><ul><li>type 语句中还可以使用 typeof 获取实例的 类型进行赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 当你想获取一个变量的类型时，使用 typeof</span><br><span class="hljs-keyword">let</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>type B = <span class="hljs-keyword">typeof</span> div<br></code></pre></td></tr></table></figure><ul><li>其他骚操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">type <span class="hljs-title class_">StringOrNumber</span> = string | number;  <br>type <span class="hljs-title class_">Text</span> = string | &#123; <span class="hljs-attr">text</span>: string &#125;;  <br>type <span class="hljs-title class_">NameLookup</span> = <span class="hljs-title class_">Dictionary</span>&lt;string, <span class="hljs-title class_">Person</span>&gt;;  <br>type <span class="hljs-title class_">Callback</span>&lt;T&gt; = <span class="hljs-function">(<span class="hljs-params">data: T</span>) =&gt;</span> <span class="hljs-keyword">void</span>;  <br>type <span class="hljs-title class_">Pair</span>&lt;T&gt; = [T, T];  <br>type <span class="hljs-title class_">Coordinates</span> = <span class="hljs-title class_">Pair</span>&lt;number&gt;;  <br>type <span class="hljs-title class_">Tree</span>&lt;T&gt; = T | &#123; <span class="hljs-attr">left</span>: <span class="hljs-title class_">Tree</span>&lt;T&gt;, <span class="hljs-attr">right</span>: <span class="hljs-title class_">Tree</span>&lt;T&gt; &#125;;<br><br></code></pre></td></tr></table></figure><h3 id="interface-可以而-type-不行"><a href="#interface-可以而-type-不行" class="headerlink" title="interface 可以而 type 不行"></a>interface 可以而 type 不行</h3><p>interface 能够声明合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interface <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-attr">name</span>: string<br>  <span class="hljs-attr">age</span>: number<br>&#125;<br><br>interface <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-attr">sex</span>: string<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">User 接口为 &#123;</span><br><span class="hljs-comment">  name: string</span><br><span class="hljs-comment">  age: number</span><br><span class="hljs-comment">  sex: string </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue中的watch监听</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/vue%E4%B8%AD%E7%9A%84watch%E7%9B%91%E5%90%AC/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/vue%E4%B8%AD%E7%9A%84watch%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>socket的使用</title>
    <link href="/%E5%BE%B7%E8%87%BB/socket%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/%E5%BE%B7%E8%87%BB/socket%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="socket的使用"><a href="#socket的使用" class="headerlink" title="socket的使用"></a>socket的使用</h1><h3 id="1-创建socket"><a href="#1-创建socket" class="headerlink" title="1.创建socket"></a>1.创建socket</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建独用的websocket</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> listenMessageKey 监听事件key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">WebSocketKit</span> = (<span class="hljs-params">listenMessageKey = <span class="hljs-string">&#x27;onWebSocketMessage&#x27;</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">Socket</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">setIntervalWesocketPush</span>: <span class="hljs-built_in">any</span> = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">websocketUrl</span>: <span class="hljs-built_in">any</span> = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable constant_">LOCKRECONNECT</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">// 避免ws重复连接</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 建立websocket连接</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; url ws地址</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">createSocket</span> = (<span class="hljs-params">url: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (url) &#123;<br>      websocketUrl = url<br>    &#125;<br>    <span class="hljs-keyword">if</span> (websocketUrl) &#123;<br>      <span class="hljs-comment">// tslint:disable-next-line: no-unused-expression</span><br>      <span class="hljs-title class_">Socket</span> &amp;&amp; <span class="hljs-title class_">Socket</span>.<span class="hljs-title function_">close</span>()<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Socket</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;建立websocket连接&#x27;</span>)<br>        <span class="hljs-title class_">Socket</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(websocketUrl)<br>        <span class="hljs-title class_">Socket</span>.<span class="hljs-property">onopen</span> = onopenWS<br>        <span class="hljs-title class_">Socket</span>.<span class="hljs-property">onmessage</span> = onWebSocketMessage<br>        <span class="hljs-title class_">Socket</span>.<span class="hljs-property">onerror</span> = onerrorWS<br>        <span class="hljs-title class_">Socket</span>.<span class="hljs-property">onclose</span> = oncloseWS<br>        <span class="hljs-comment">// return Socket</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;websocket已连接&#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 重新连接</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">reConnectWebSocket</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">LOCKRECONNECT</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-variable constant_">LOCKRECONNECT</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-comment">// 没连接上会一直重连，设置延迟避免请求过多</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">createSocket</span>(<span class="hljs-literal">null</span>)<br>      <span class="hljs-variable constant_">LOCKRECONNECT</span> = <span class="hljs-literal">false</span><br>    &#125;, <span class="hljs-number">10000</span>)<br>  &#125;<br>  <span class="hljs-comment">/** 打开WS之后发送心跳 */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onopenWS</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">sendPing</span>()<br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">WebSocketClose</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;websocket已关闭:&#x27;</span>, <span class="hljs-title class_">Socket</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Socket</span>) &#123;<br>      <span class="hljs-title class_">Socket</span>.<span class="hljs-title function_">close</span>()<br>      <span class="hljs-title class_">Socket</span> = <span class="hljs-literal">null</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;websocket已关闭=====Socket&#x27;</span>, <span class="hljs-title class_">Socket</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">/** 连接失败重连 */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onerrorWS</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Socket</span>) &#123;<br>      <span class="hljs-title class_">Socket</span>.<span class="hljs-title function_">close</span>()<br>    &#125;<br>    <span class="hljs-built_in">clearInterval</span>(setIntervalWesocketPush)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接失败重连中&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Socket</span>.<span class="hljs-property">readyState</span> !== <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-title class_">Socket</span> = <span class="hljs-literal">null</span><br>      <span class="hljs-title function_">reConnectWebSocket</span>()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/** WS数据接收统一处理 */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onWebSocketMessage</span> = (<span class="hljs-params">e: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-comment">// console.log(&#x27;websocket--message------------&#x27;, e)</span><br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span> + e.<span class="hljs-property">data</span> + <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">const</span> dataObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(result)<br>    <span class="hljs-keyword">const</span> message = &#123;<br>      <span class="hljs-attr">data</span>:&#123;...(dataObj||&#123;&#125;)&#125;,<br>      <span class="hljs-attr">code</span>:(dataObj||&#123;&#125;).<span class="hljs-property">code</span>?(dataObj||&#123;&#125;).<span class="hljs-property">code</span>:<span class="hljs-string">&#x27;000000&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">// console.log(&#x27;websocket--message&#x27;, message)</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">dispatchEvent</span>(<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomEvent</span>(listenMessageKey, &#123;<br>        <span class="hljs-attr">detail</span>: &#123;<br>          <span class="hljs-attr">data</span>: e.<span class="hljs-property">data</span>,<br>          <span class="hljs-attr">result</span>: message<br>        &#125;<br>      &#125;)<br>    )<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送数据但连接未建立时进行处理等待重发</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">any</span>&#125; message 需要发送的数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">connecting</span> = (<span class="hljs-params">message: <span class="hljs-built_in">object</span></span>) =&gt; &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Socket</span>.<span class="hljs-property">readyState</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-title function_">connecting</span>(message)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title class_">Socket</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(message))<br>      &#125;<br>    &#125;, <span class="hljs-number">3000</span>)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">any</span>&#125; message 需要发送的数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendWSPush</span> = (<span class="hljs-params">message: <span class="hljs-built_in">object</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Socket</span> !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-title class_">Socket</span>.<span class="hljs-property">readyState</span> === <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-title class_">Socket</span>.<span class="hljs-title function_">close</span>()<br>      <span class="hljs-title function_">reConnectWebSocket</span>()<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Socket</span>.<span class="hljs-property">readyState</span> === <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-title class_">Socket</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(message))<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Socket</span>.<span class="hljs-property">readyState</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-title function_">connecting</span>(message)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/** 断开重连 */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">oncloseWS</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-built_in">clearInterval</span>(setIntervalWesocketPush)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;websocket已断开....正在尝试重连&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Socket</span>.<span class="hljs-property">readyState</span> !== <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-title class_">Socket</span> = <span class="hljs-literal">null</span><br>      <span class="hljs-title function_">reConnectWebSocket</span>()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送心跳</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; time 心跳间隔毫秒 默认5000</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; ping 心跳名称 默认字符串ping</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendPing</span> = (<span class="hljs-params">time = <span class="hljs-number">60000</span>, ping = <span class="hljs-string">&#x27;ping&#x27;</span></span>) =&gt; &#123;<br>    <span class="hljs-built_in">clearInterval</span>(setIntervalWesocketPush)<br>    <span class="hljs-title class_">Socket</span>.<span class="hljs-title function_">send</span>(ping)<br>    setIntervalWesocketPush = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title class_">Socket</span>.<span class="hljs-title function_">send</span>(ping)<br>    &#125;, time)<br>  &#125;<br><br>  <span class="hljs-comment">// enum MESSAGE_CODE &#123;</span><br>  <span class="hljs-comment">//   /** 获取到图片上传到云端后消息 */</span><br>  <span class="hljs-comment">//   LOAD_IMAGE = 10001,</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">IsCreateWebSocket</span> = <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">EventListenerList</span>: &#123; <span class="hljs-attr">code</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">event</span>: <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> <span class="hljs-built_in">void</span> &#125;[] = []<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> defaultValue 初始化默认值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> messageCode webSocket消息注册信息接收 [可选]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> timer 数据刷新间隔(秒) [可选]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> onWebSocketEvent&lt;T&gt;(<br>    <span class="hljs-attr">messageCode</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">event</span>: <span class="hljs-function">(<span class="hljs-params">data: T</span>) =&gt;</span> <span class="hljs-built_in">void</span> = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>    &#125;<br>  ) &#123;<br>    <span class="hljs-title class_">EventListenerList</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">code</span>: messageCode, <span class="hljs-attr">event</span>: event &#125;)<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">IsCreateWebSocket</span>) &#123;<br>      <span class="hljs-comment">// 注册监听事件</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">getsocketData</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>        <br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">detail</span>.<span class="hljs-property">result</span>) &#123;<br>          <span class="hljs-keyword">const</span> message = e.<span class="hljs-property">detail</span>.<span class="hljs-property">result</span><br>          <span class="hljs-comment">// console.log(&#x27;e-----------------&gt;&#x27;,message)</span><br>          <span class="hljs-keyword">if</span> (message.<span class="hljs-property">code</span> === messageCode) &#123;<br>            <span class="hljs-title class_">EventListenerList</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">if</span> (item.<span class="hljs-property">code</span> === messageCode) &#123;<br>                item.<span class="hljs-title function_">event</span>(message.<span class="hljs-property">data</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>              &#125;<br>            &#125;)<br>          &#125;<br>          <span class="hljs-keyword">if</span> (message.<span class="hljs-property">msg</span> &amp;&amp; message.<span class="hljs-property">msg</span> !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            <span class="hljs-comment">// createMessage.warning(message.msg || &#x27;&#x27;)</span><br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(listenMessageKey, getsocketData)<br>      <span class="hljs-title class_">IsCreateWebSocket</span> = <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/** socket消息管理器 */</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">/** 创建连接socket */</span><br>    <span class="hljs-attr">connect</span>: createSocket,<br>    <span class="hljs-comment">/** socket监听事件 */</span><br>    <span class="hljs-attr">onWebSocketEvent</span>: onWebSocketEvent,<br>    <span class="hljs-comment">/** 发送socket消息 */</span><br>    <span class="hljs-attr">send</span>: sendWSPush,<br>    <span class="hljs-comment">/** 关闭socket */</span><br>    <span class="hljs-attr">close</span>: <span class="hljs-title class_">WebSocketClose</span><br>    <span class="hljs-comment">// Socket: Socket,</span><br>  &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">/** 默认的socket消息处理对象 */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">WebSocketKitDefault</span> = <span class="hljs-title class_">WebSocketKit</span>(<span class="hljs-string">&#x27;onWebSocketKitDefaultListener&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-使用socket"><a href="#2-使用socket" class="headerlink" title="2.使用socket"></a>2.使用socket</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;big-screen&quot;&gt;<br>    &lt;div class=&quot;header&quot;&gt;<br>      &lt;div class=&quot;header-img&quot;&gt;<br>        &lt;img style=&quot;height: 100%&quot; src=&quot;../../assets/back1.jpg&quot; alt=&quot;&quot; /&gt;<br>        &lt;div class=&quot;header-img-message&quot;&gt;<br>          &lt;div<br>            class=&quot;call warm-reminder&quot;<br>            v-if=&quot;!CallPatientName&quot;<br>            style=&quot;padding: 0 10px&quot;<br>          &gt;<br>            暂无叫号信息<br>          &lt;/div&gt;<br>          &lt;div<br>            class=&quot;call warm-reminder&quot;<br>            v-if=&quot;CallPatientName&quot;<br>            style=&quot;padding: 0 10px&quot;<br>          &gt;<br>            &#123;&#123; CallPatientName &#125;&#125;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;call-list&quot;&gt;<br>      &lt;ScreenCardVue<br>        class=&quot;content-card&quot;<br>        ref=&quot;contentCard&quot;<br>        :NurseBigScreens=&quot;NurseBigScreens&quot;<br>      &gt;<br>        &lt;template #content=&quot;&#123; record &#125;&quot;&gt;<br>          &lt;PatientList<br>            :TopData=&quot;record.TopData&quot;<br>            :AfterData=&quot;record.AfterData&quot;<br>          /&gt;<br>        &lt;/template&gt;<br>      &lt;/ScreenCardVue&gt;<br>      &lt;!-- &lt;/div&gt; --&gt;<br>    &lt;/div&gt;<br>    &lt;div<br>      class=&quot;warm-reminder&quot;<br>      style=&quot;display: flex; align-items: center; justify-content: center&quot;<br>    &gt;<br>      温馨提示：预约签到者签到后请耐心等待屏幕更新！！！<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; onMounted, ref, watch &#125; from &quot;vue&quot;;<br>import ScreenCardVue from &quot;./modules/ScreenCard.vue&quot;;<br>import PatientList from &quot;./modules/PatientList.vue&quot;;<br>import &#123; NurseBigScreensParams &#125; from &quot;../../api/model/roomDoctor&quot;;<br>import &#123; druginfoService &#125; from &quot;../../api/druginfo&quot;;<br><br>const drug = new druginfoService();<br>import &#123; WebSocketKitDefault &#125; from &quot;../../uilt/webSocket&quot;;<br>import &#123; useRoute &#125; from &quot;vue-router&quot;;<br>import &#123; ElMessage &#125; from &quot;element-plus&quot;;<br>/** 护士站大屏展示的数据 */<br>let NurseBigScreens = ref([]);<br>/** 现在被叫到号的人名字 */<br>let CallPatientName = ref(&quot;&quot;);<br><br>/** 根据路由地址栏传递的参数，获取到参数 */<br>const Route = useRoute();<br>/** 从地址栏获取到护士台code和医院code */<br>const NurseDeskCode = Route.query.nurseCode;<br>const hospital = Route.query.hospitalCode;<br>// watch(<br>//   () =&gt; &#123;<br>//     NurseBigScreens;<br>//   &#125;,<br>//   () =&gt; &#123;<br>//     NurseBigScreens.value;<br>//   &#125;<br>// );<br>onMounted(async () =&gt; &#123;<br>  //判断浏览器是否支持websocket<br>  if (&quot;WebSocket&quot; in window) &#123;<br>    if (!NurseDeskCode) &#123;<br>      ElMessage.error(&quot;无护士站code码&quot;);<br>      return;<br>    &#125;<br>    const wsUrl = `ws://10.11.13.75:30233/api/nursescreenws?mac=$&#123;NurseDeskCode&#125;`;<br>    // 链接websocket<br>    WebSocketKitDefault.connect(wsUrl);<br>    WebSocketKitDefault.onWebSocketEvent&lt;&#123;<br>      code: string;<br>      NurseBigScreens: NurseBigScreensParams[];<br>      Type: string;<br>      MessAge: string;<br>    &#125;&gt;(&quot;000000&quot;, (res) =&gt; &#123;<br>      if (res.MessAge !== undefined) &#123;<br>        console.log(&quot;接收到消息--------&gt;&quot;, res.MessAge);<br>        CallPatientName.value = res.MessAge;<br>      &#125;<br>      if (res.Type == &quot;data&quot;) &#123;<br>        console.log(111);<br>      &#125; else &#123;<br>        getNurseSpeak(res.MessAge);<br>        // getConnectSocket();<br>        // 5月1号改动<br>        // getNurseDate();<br>      &#125;<br>    &#125;);<br>  &#125; else &#123;<br>    alert(&quot;当前浏览器 Not support websocket&quot;);<br>  &#125;<br>  /** 由于一开始数据请求不过来，故用一个计时器 */<br>  setTimeout(async () =&gt; &#123;<br>    getNurseDate();<br>    // getConnectSocket();<br>  &#125;, 200);<br>&#125;);<br>/** 请求数据的时间间隔 */<br>setInterval(() =&gt; &#123;<br>  getNurseDate();<br>&#125;, 59000);<br><br>/** 获取大屏展示的数据 */<br>async function getNurseDate() &#123;<br>  let res = await drug.getNurseBigScreens(&#123;<br>    nurseDeskCode: NurseDeskCode,<br>    methodName: &quot;&quot;,<br>    hospitalCode: hospital,<br>  &#125;);<br>  // console.log(res.Data);<br>  /** 筛选一下没有患者的科室 */<br>  NurseBigScreens.value = res.Data.filter(<br>    (item) =&gt; item.AfterData.length !== 0 || item.TopData[0].Name !== &quot;&quot;<br>  );<br>  // NurseBigScreens.value = res.Data<br>  console.log(&quot;全部数据================&gt;&quot;, NurseBigScreens.value);<br>&#125;<br>/** 链接socket数据的接口请求 */<br>// async function getConnectSocket() &#123;<br>//   let res = await drug.getNurseBigScreenSocket(&#123;<br>//     id: NurseDeskCode,<br>//     hospitalCode: hospital,<br>//   &#125;);<br>// &#125;<br>//叫号<br>// function Speak(item) &#123;<br>//   let res = axios.post(&quot;MAC&quot;,<br>//     `/api/Broadcast/Speak?content=$&#123;item&#125;`,<br>//     &#123;&#125;<br>//   );<br>// &#125;<br>/** 叫号 */<br>async function getNurseSpeak(item) &#123;<br>  let res = await drug.getNurseBigScreenSpeak(item);<br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped lang=&quot;less&quot;&gt;<br>.warm-reminder &#123;<br>  height: 7%;<br>&#125;<br>.call &#123;<br>  font-size: 32px;<br>  position: absolute;<br>  top: 63%;<br>  left: 50%;<br>  transform: translate3d(-50%, -50%, 0);<br>  height: 100%;<br>  user-select: none;<br>  font-weight: bold;<br>&#125;<br>.big-screen &#123;<br>  height: 100vh;<br>  background-color: rgb(9, 29, 74);<br>  color: #08f9ff;<br>&#125;<br><br>.header &#123;<br>  width: 100%;<br>  height: 7%;<br>&#125;<br><br>.header .header-img &#123;<br>  position: relative;<br>  width: 100%;<br>  height: 100%;<br>&#125;<br>.header .header-img img &#123;<br>  width: 100%;<br>  height: 100%;<br>&#125;<br>.call-list &#123;<br>  height: calc(100vh - 14%);<br>  // overflow: hidden;<br>&#125;<br><br>.content-card &#123;<br>  grid-template-rows: 100%;<br>  display: grid;<br>  grid-template-columns: repeat(6, 16.666%);<br>  overflow: hidden;<br>  height: 100%;<br>  // grid-gap: 1.15%;<br>  // margin: 0.7% 0 0 0.7%;<br>  // overflow: hidden;<br>&#125;<br><br>.warm-reminder &#123;<br>  font-size: 32px;<br>  font-weight: bolder;<br>  text-align: center;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于在vite+js+vue3中使用bootstrap3的问题</title>
    <link href="/bilibili/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E5%85%B3%E4%BA%8E%E5%9C%A8vite-js-vue3%E4%B8%AD%E4%BD%BF%E7%94%A8bootstrap3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/bilibili/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E5%85%B3%E4%BA%8E%E5%9C%A8vite-js-vue3%E4%B8%AD%E4%BD%BF%E7%94%A8bootstrap3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 3 不是 Vue3 的官方支持版本，但是仍然可以在 Vue3 项目中使用 Bootstrap 3。下面是在 Vite + Vue3 中使用 Bootstrap 3 的完整步骤：<br><a name="fN7z9"></a></p><h2 id="安装-Bootstrap-3"><a href="#安装-Bootstrap-3" class="headerlink" title="安装 Bootstrap 3"></a>安装 Bootstrap 3</h2><p>使用 npm 安装 Bootstrap 3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install bootstrap@<span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><p><a name="VyjMc"></a></p><h2 id="在-main-js-中引入-Bootstrap-3"><a href="#在-main-js-中引入-Bootstrap-3" class="headerlink" title="在 main.js 中引入 Bootstrap 3"></a>在 main.js 中引入 Bootstrap 3</h2><p>在 main.js 中，需要先引入 Bootstrap 3 的 CSS 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span> <br></code></pre></td></tr></table></figure><p>接下来，需要<strong>在 Vue3 实例中全局注册 $ 和 jQuery 变量，以便在整个应用程序中使用 Bootstrap</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span> <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span> <br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span> <br><span class="hljs-comment">// 全局注册 $ 和 jQuery  </span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>) <br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">$</span> <br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">jQuery</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">jQuery</span><br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>) <br></code></pre></td></tr></table></figure><p><a name="OoO7B"></a></p><h2 id="在组件中使用-Bootstrap-3"><a href="#在组件中使用-Bootstrap-3" class="headerlink" title="在组件中使用 Bootstrap 3"></a>在组件中使用 Bootstrap 3</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;   <br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span> <br>&lt;/template&gt; <br>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;MyComponent&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125; </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> <br>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-comment">/* 可以使用 Bootstrap 中的类 */</span> </span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span> <br></code></pre></td></tr></table></figure><p>这就是在 Vite + Vue3 中使用 Bootstrap 3 的完整步骤。需要注意的是，Bootstrap 3 不是 Vue3 的官方支持版本，因此在使用时可能会遇到一些问题。您可以参考 Bootstrap 3 的官方文档和 Vue3 的官方文档，以了解更多信息。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js设计与实现</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/Vue-js%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/Vue-js%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>命令式代码</p><p>声明式代码</p><p>虚拟dom就是为了最小化找出声明式代码跟命令式代码出现的</p><p>声明式的更新性能消耗 &#x3D; 找出差异的性能消耗 + 直接修改的性能消耗</p><p>使用原生JavaScript操作DOM的方法、虚拟DOM和innerHTML三者操作界面的性能，不能简单地下定论，这与<code>页面大小</code>、<code>变更部分的大小</code>都有关系，除此之外，与<code>创建页面</code>还是<code>更新页面</code>也有关系，选择哪种更新策略，需要我们结合<code>心智负担</code>、<code>可维护性</code>等因素综合考虑。</p><p>Vue.js3是一个编译时 +运行时的框架</p><p>对于一个组件来说，他要渲染的内容都是通过渲染函数产生的，然后<code>渲染器</code>再把渲染函数返回的虚拟DOM渲染为真实DOM，喝酒时末班的工作原理，也是Vue.js渲染页面的流程。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//举例</span><br><span class="hljs-number">01</span> &lt;template&gt;<br><span class="hljs-number">02</span>   &lt;div <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;handler&quot;</span>&gt;<br><span class="hljs-number">03</span>     click me<br><span class="hljs-number">04</span>   &lt;/div&gt;<br><span class="hljs-number">05</span> &lt;/template&gt;<br><span class="hljs-number">06</span><br><span class="hljs-number">07</span> &lt;script&gt;<br><span class="hljs-number">08</span> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-number">09</span>   <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">/* ... */</span>&#125;,<br><span class="hljs-number">10</span>   <span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-number">11</span>     <span class="hljs-attr">handler</span>: <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">/* ... */</span>&#125;<br><span class="hljs-number">12</span>   &#125;<br><span class="hljs-number">13</span> &#125;<br><span class="hljs-number">14</span> &lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>其中<template>标签里的内容就是模版内容，编译器会把模版内容编译成渲染函数并添加到<script>标签块的组件对象上，所以最终在浏览器里运行的代码就是：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-number">01</span> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-number">02</span>   <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">/* ... */</span>&#125;,<br><span class="hljs-number">03</span>   <span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-number">04</span>     <span class="hljs-attr">handler</span>: <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">/* ... */</span>&#125;<br><span class="hljs-number">05</span>   &#125;,<br><span class="hljs-number">06</span>   <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-number">07</span>     <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">onClick</span>: handler &#125;, <span class="hljs-string">&#x27;click me&#x27;</span>)<br><span class="hljs-number">08</span>   &#125;<br><span class="hljs-number">09</span> &#125;<br></code></pre></td></tr></table></figure><p>所以，无论是使用模版还是直接手写渲染函数，对于一个组件来说，他要渲染的内容最终都是通过渲染函数产生的，然后<code>渲染器</code>再把渲染函数返回的虚拟DOM渲染为真实的DOM，这就是末班的工作原理，也是Vue.js渲染页面的流程</p><h3 id="副作用函数"><a href="#副作用函数" class="headerlink" title="副作用函数"></a>副作用函数</h3><p>副作用函数指得是会产生副作用的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params"></span>) &#123;<br>  doucument.<span class="hljs-property">body</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;hello Vue3&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如上代码，当effect函数执行时，它会设置body的文本内容，但除了effect函数之外的任何函数都可以读取或设置body的文本内容。也就是说effect函数的执行会直接或间接影响其他函数的执行，这是我们说effect函数产生了副作用。</p><p>一个函数修改了全局变量，这其实也是一个副作用，如下代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">let</span> val = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params"></span>) &#123;<br>  val = <span class="hljs-number">2</span> <span class="hljs-comment">//修改全局变量，产生副作用</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h3><p>假设在一个副作用函数中读取了某个对象的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;hello world&#x27;</span> &#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//effect函数的执行会读取 obj.text</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerText</span> = obj.<span class="hljs-property">text</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如上代码所示，当obj.text的值改变的时候我们希望副作用函数effect函数会重新执行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">obj.<span class="hljs-property">text</span> = <span class="hljs-string">&#x27;hello vue3&#x27;</span> <span class="hljs-comment">// 修改obj.text 的值，同时希望副作用函数会重新执行</span><br></code></pre></td></tr></table></figure><h4 id="响应式数据的基本实现"><a href="#响应式数据的基本实现" class="headerlink" title="响应式数据的基本实现"></a>响应式数据的基本实现</h4><p>怎么才能让obj变成响应式数据呢？ 通过观察我们能发现两点线索：</p><ul><li>当副作用函数effect执行时，会触发字段obj.text的<code>读取</code>操作</li><li>当修改obj.text的值时，会触发字段obj.text的<code>设置</code>操作</li></ul><p>如果我们能拦截一个对象的读取和设置，事情就变得简单了，当读取字段obj.text时，我们可以把副作用函数effect存储到一个“桶”里，如下图所示：</p><p><img src="https://secure2.wostatic.cn/static/uqXYoyfieAwCT1D36pjgVW/image.png?auth_key=1710129066-bNqJusHxxK3NXgVKgf33xU-0-a23fdadaa835ac36361a6d39cb2f9fb5" alt="将副作用函数存储到“桶”中"></p><p>接着，当设置obj.text时，再把副作用函数effect从“桶”里面取出并执行即可，如下图所示：</p><p><img src="https://secure2.wostatic.cn/static/jQXoegqR35kLWP1hvQYogE/image.png?auth_key=1710129066-ekHqUFbWiH1SFWZZkdA8PG-0-02d247f8ca08ffd6e2ce414af7f9510e" alt="把副作用函数从“桶”内取出并执行"></p><p>现在问题的关键就变成了我们如何才能拦截一个对象属性的读取和设置操作。在ES2015之前，只能通过<code>Object.defineProperty</code>函数实现，这也是Vue.js2所采用的方式。在ES2015+中，我们可以使用代理对象Proxy来实现，这也是Vue.js3所采用的方式。</p><p>接下来我们就根据如上思路，采用Proxy来实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//存储副作用函数的桶</span><br><span class="hljs-keyword">const</span> bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br><br><span class="hljs-comment">//原始数据</span><br><span class="hljs-keyword">const</span> data = &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;hello world&#x27;</span> &#125;<br><span class="hljs-comment">//对原始数据的代理</span><br><span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(data, &#123;<br>  <span class="hljs-comment">//拦截读取操作</span><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>    <span class="hljs-comment">//将副作用函数effect添加到存储副作用函数的桶中</span><br>    bucket.<span class="hljs-title function_">add</span>(effect)<br>    <span class="hljs-comment">// 返回属性值</span><br>    <span class="hljs-keyword">return</span> target[key]<br>  &#125;,<br>  <span class="hljs-comment">//拦截设置操作</span><br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, newVal</span>) &#123;<br>    <span class="hljs-comment">//设置属性值</span><br>    target[key] = newVal<br>    <span class="hljs-comment">//把副作用函数从桶里取出并执行</span><br>    bucket.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>())<br>    <span class="hljs-comment">//返回true代表设置操作成功</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br><br>&#125;)<br></code></pre></td></tr></table></figure><p>响应系统的工作流程：</p><ul><li>当读取操作发生时，将副作用函数收集到‘桶’中</li><li>当设置操作发生时，从‘桶’中取出副作用函数并执行</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>react基础</title>
    <link href="/bilibili/%E5%AD%A6%E4%B9%A0/react%E5%9F%BA%E7%A1%80/"/>
    <url>/bilibili/%E5%AD%A6%E4%B9%A0/react%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-语法糖</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue3/2-vue-%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue3/2-vue-%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://www.pudn.com/news/62eb64ad864d5c73ac50b953.html#propsdefineProps_176">https://www.pudn.com/news/62eb64ad864d5c73ac50b953.html#propsdefineProps_176</a><br><a name="NyW4q"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>提示：Vue3.2 版本开始才能使用语法糖！<br /><script setup> 是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖。在 Vue3.2 中只需要在 script 标签上加上 setup 属性，无需 return，template 便可直接使用。相比于普通的</p><ul><li>更少的样板内容，更简洁的代码。</li><li>能够使用纯 TypeScript 声明 props 和抛出事件。</li><li>更好的运行时性能 (其模板会被编译成与其同一作用域的渲染函数，没有任何的中间代理)。</li><li>更好的 IDE 类型推断性能 (减少语言服务器从代码中抽离类型的工作)。<br><a name="umv5U"></a></li></ul><h1 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h1><p>要使用这个语法，需要将 setup attribute 添加到 <script> 代码块上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript">   </span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello script setup&#x27;</span>) </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>里面的代码会被编译成组件 setup() 函数的内容。这意味着与普通的 <script> 只在组件被首次引入的时候执行一次不同，<script setup> 中的代码会在每次组件实例被创建的时候执行。<br><a name="NtsdS"></a></p><h1 id="二、设置name"><a href="#二、设置name" class="headerlink" title="二、设置name"></a>二、设置name</h1><p>新增加一个script标签，在这个标签中写入name属性，代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;   <br>  &lt;button&gt;demo&lt;/button&gt; <br>&lt;/template&gt; <br>&lt;script&gt; <br>  export default &#123;   name: &quot;VButton&quot;, &#125;; <br>&lt;/script&gt; <br>&lt;script setup&gt; &lt;/script&gt; <br>&lt;style scoped lang=&quot;less&quot;&gt; &lt;/style&gt; <br></code></pre></td></tr></table></figure><p><a name="wbCJg"></a></p><h1 id="三、data的设置和使用"><a href="#三、data的设置和使用" class="headerlink" title="三、data的设置和使用"></a>三、data的设置和使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot;&gt;&lt;button&gt;+1&lt;/button&gt; &#123;&#123; num &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt; &lt;script setup&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>const num = ref(0);<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="BFfwY"></a></p><h1 id="四、method使用"><a href="#四、method使用" class="headerlink" title="四、method使用"></a>四、method使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot;&gt;&lt;button @click=&quot;btnClick&quot;&gt;+1&lt;/button&gt; &#123;&#123; num &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt; &lt;script setup&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>const num = ref(0);<br>const btnClick = () =&gt; &#123;<br>  num.value = num.value + 1;<br>&#125;;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="qrLG8"></a></p><h1 id="五、store仓库的使用"><a href="#五、store仓库的使用" class="headerlink" title="五、store仓库的使用"></a>五、store仓库的使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>();</span><br><span class="language-javascript">store.<span class="hljs-property">getters</span>.<span class="hljs-property">userInfo</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><a name="pOhPP"></a></p><h1 id="六、computed计算属性的使用"><a href="#六、computed计算属性的使用" class="headerlink" title="六、computed计算属性的使用"></a>六、computed计算属性的使用</h1><p>接受一个 getter 函数，并根据 getter 的返回值返回一个不可变的响应式 ref 对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; computed, reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>; </span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span>; </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>(); </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> userInfo = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">getters</span>.<span class="hljs-property">userInfo</span>); </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;   </span><br><span class="language-javascript">    <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;小&#x27;</span>,   </span><br><span class="language-javascript">    <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;叮当&#x27;</span> &#125;) </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;   </span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span> </span><br><span class="language-javascript">&#125;) </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><a name="oaDEg"></a></p><h1 id="七、路由userRoute和userRouter使用"><a href="#七、路由userRoute和userRouter使用" class="headerlink" title="七、路由userRoute和userRouter使用"></a>七、路由userRoute和userRouter使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();</span><br><span class="language-javascript">route.<span class="hljs-property">query</span>; <span class="hljs-comment">// 获取路由query route.params // 获取路由params router.push(&#123; path: &#x27;/login&#x27;, query: &#123;&#125; &#125;);</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><a name="tpGx5"></a></p><h1 id="八、使用组件以及动态组件"><a href="#八、使用组件以及动态组件" class="headerlink" title="八、使用组件以及动态组件"></a>八、使用组件以及动态组件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;!-- PascalCase，建议使用，有助于区分原生的自定义元素 --&gt;<br>    &lt;MyComponent /&gt;<br>    &lt;!-- kebab-case --&gt;<br>    &lt;my-component /&gt; &lt;component :is=&quot;Foo&quot; /&gt;<br>    &lt;component :is=&quot;someCondition ? Foo : Bar&quot; /&gt; &lt;FooBarChild /&gt;<br>    &lt;Form.Input&gt;<br>        &lt;Form.Label&gt;label&lt;/Form.Label&gt; <br>    &lt;/Form.Input&gt;<br>&lt;/template&gt; <br>&lt;script setup&gt; <br>import MyComponent from &#x27;./MyComponent.vue&#x27; <br>import Foo from &#x27;./Foo.vue&#x27; <br>import Bar from &#x27;./Bar.vue&#x27; <br>// 有命名的 import 导入和组件的推断名冲突了，可以使用 import 别名导入 <br>import &#123; FooBar as FooBarChild &#125; from &#x27;./components&#x27; <br>// 从单个文件中导入多个组件 <br>import * as Form from &#x27;./form-components&#x27; &lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="l8a2y"></a></p><h1 id="九、使用指令"><a href="#九、使用指令" class="headerlink" title="九、使用指令"></a>九、使用指令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1 v-my-directive&gt;This is a Heading&lt;/h1&gt;<br>  &lt;h1 py-directive&gt;This is a Heading&lt;/h1&gt;<br>&lt;/template&gt; &lt;script setup&gt;<br>// 内部定义<br>const vMyDirective = &#123;<br>  beforeMount: (el) =&gt; &#123;<br>    // 在元素上做些操作<br>  &#125;,<br>&#125;;<br>// 外部导入的指令同样能够工作，并且能够通过重命名来使其符合命名规范<br>import &#123; myDirective as pyDirective &#125; from &quot;./MyDirective.js&quot;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><a name="LaPnv"></a></p><h1 id="十、emit和defineEmits的使用"><a href="#十、emit和defineEmits的使用" class="headerlink" title="十、emit和defineEmits的使用"></a>十、emit和defineEmits的使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]); <span class="hljs-comment">// setup code emits(&#x27;change&#x27;, &#x27;cancel&#x27;); emits(&#x27;delete&#x27;);</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><a name="tiY83"></a></p><h1 id="十一、props和defineProps的使用"><a href="#十一、props和defineProps的使用" class="headerlink" title="十一、props和defineProps的使用"></a>十一、props和defineProps的使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123; <span class="hljs-attr">foo</span>: <span class="hljs-title class_">String</span> &#125;);</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props.<span class="hljs-property">foo</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><a name="PUYjD"></a></p><h1 id="十二、watch的使用"><a href="#十二、watch的使用" class="headerlink" title="十二、watch的使用"></a>十二、watch的使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"> <span class="hljs-keyword">import</span> &#123; ref, watch, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>; <span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>; <span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>); </span><br><span class="language-javascript"><span class="hljs-comment">// 监听一个数据源 </span></span><br><span class="language-javascript"><span class="hljs-title function_">watch</span>(num, <span class="hljs-function">(<span class="hljs-params">num, prevNum</span>) =&gt;</span> &#123;   </span><br><span class="language-javascript">    <span class="hljs-comment">/* ... */</span> </span><br><span class="language-javascript">&#125;) </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> fooRef = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>); </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> barRef = <span class="hljs-title function_">ref</span>(<span class="hljs-number">2</span>); </span><br><span class="language-javascript"><span class="hljs-comment">// 监听多个数据源 </span></span><br><span class="language-javascript"><span class="hljs-title function_">watch</span>([fooRef, barRef], <span class="hljs-function">(<span class="hljs-params">[foo, bar], [prevFoo, prevBar]</span>) =&gt;</span> &#123;   </span><br><span class="language-javascript">    <span class="hljs-comment">/* ... */</span>   </span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fooRef或barRef变了&#x27;</span>) </span><br><span class="language-javascript">&#125;) </span><br><span class="language-javascript"><span class="hljs-comment">// 监听路由参数 </span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>(); </span><br><span class="language-javascript"><span class="hljs-title function_">watch</span>(   </span><br><span class="language-javascript">    <span class="hljs-function">() =&gt;</span> route.<span class="hljs-property">fullPath</span>,   </span><br><span class="language-javascript">    <span class="hljs-function">() =&gt;</span> &#123;     </span><br><span class="language-javascript">        <span class="hljs-comment">// code   </span></span><br><span class="language-javascript">    &#125; ); </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><a name="AW8lB"></a></p><h1 id="十三、watchEffect的使用"><a href="#十三、watchEffect的使用" class="headerlink" title="十三、watchEffect的使用"></a>十三、watchEffect的使用</h1><p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);</span><br><span class="language-javascript"><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count.<span class="hljs-property">value</span>));</span><br><span class="language-javascript"><span class="hljs-comment">// -&gt; logs 0</span></span><br><span class="language-javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  count.<span class="hljs-property">value</span>++;</span><br><span class="language-javascript">  <span class="hljs-comment">// -&gt; logs 1</span></span><br><span class="language-javascript">&#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><a name="toPWW"></a></p><h1 id="十四、defineExpose的使用"><a href="#十四、defineExpose的使用" class="headerlink" title="十四、defineExpose的使用"></a>十四、defineExpose的使用</h1><p>使用<script setup> 的组件是默认关闭的，也即通过模板 ref 或者 $parent 链获取到的组件的公开实例，不会暴露任何在 <script setup> 中声明的绑定。<br />为了在 <script setup> 组件中明确要暴露出去的属性，使用 defineExpose 编译器宏：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span> </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span> </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> b = <span class="hljs-title function_">ref</span>(<span class="hljs-number">2</span>) </span><br><span class="language-javascript"><span class="hljs-title function_">defineExpose</span>(&#123;   a,   b &#125;) </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>当父组件通过模板 ref 的方式获取到当前组件的实例，获取到的实例会像这样 { a: number, b: number } (ref 会和在普通实例中一样被自动解包)<br />父组件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;btnClick&quot;&gt;点击&lt;/button&gt; <br>  &lt;Content ref=&quot;content&quot; /&gt;<br>&lt;/template&gt; <br>&lt;script setup&gt;<br>import &#123; ref &#125; from &quot;vue&quot;; <br>// content组件ref <br>const content = ref(&#x27;content&#x27;) <br>// 点击设置 <br>const btnClick = () =&gt; &#123;   <br>    console.log(content.value.b) <br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="rzplD"></a></p><h1 id="十五、provide-和-inject-的使用"><a href="#十五、provide-和-inject-的使用" class="headerlink" title="十五、provide 和 inject 的使用"></a>十五、provide 和 inject 的使用</h1><p>不限层级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, provide &#125; from &quot;vue&quot;;<br>let name = ref(&quot;张三&quot;);<br>// 使用provide<br>provide(&quot;provideState&quot;, &#123;<br>  name,<br>  changeName: () =&gt; &#123;<br>    name.value = &quot;李四&quot;;<br>  &#125;,<br>&#125;);<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p>子组件或子孙组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; inject &#125; from &quot;vue&quot;;<br>const changeState = inject(&quot;changeState&quot;);<br>changeState.changeName();<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="MFIxy"></a></p><h1 id="十六、useSlots-和-useAttrs的使用"><a href="#十六、useSlots-和-useAttrs的使用" class="headerlink" title="十六、useSlots 和 useAttrs的使用"></a>十六、useSlots 和 useAttrs的使用</h1><p>在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; useSlots, useAttrs &#125; from &quot;vue&quot;;<br>const slots = useSlots();<br>const attrs = useAttrs();<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="Mkgvg"></a></p><h1 id="十七、await的使用"><a href="#十七、await的使用" class="headerlink" title="十七、await的使用"></a>十七、await的使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const handleLogin = async (phone: string, code: string) =&gt; &#123;<br>  try &#123;<br>    const &#123; token &#125; = await requestAuthLogin(&#123; phone, code &#125;);<br>    console.log(token);<br>  &#125; catch (e) &#123;<br>    console.log(e);<br>  &#125; finally &#123;<br>  &#125;<br>&#125;;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="GNtlB"></a></p><h1 id="十八、style特性"><a href="#十八、style特性" class="headerlink" title="十八、style特性"></a>十八、style特性</h1><p>单文件组件的 <style> 标签可以通过 v-bind 这一 CSS 函数将 CSS 的值关联到动态的组件状态上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const theme = &#123; color: &quot;red&quot; &#125;;<br>&lt;/script&gt; <br>&lt;template&gt;<br>  &lt;p&gt;hello&lt;/p&gt;<br>&lt;/template&gt; <br>&lt;style scoped&gt;<br>p &#123;<br>  color: v-bind(&quot;theme.color&quot;);<br>&#125;<br>&lt;/style&gt; <br></code></pre></td></tr></table></figure><p>实际的值会被编译成 hash 的 CSS 自定义 property，CSS 本身仍然是静态的。自定义 property 会通过内联样式的方式应用到组件的根元素上，并且在源值变更的时候响应式更新。<br><a name="Lkkth"></a></p><h1 id="十九、使用vue实例"><a href="#十九、使用vue实例" class="headerlink" title="十九、使用vue实例"></a>十九、使用vue实例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>    import &#123; getCurrentInstance &#125; from &quot;vue&quot;; // 获取当前组件实例<br>    const instance = getCurrentInstance(); // 获取当前组件的上下文，下面两种方式都能获取到组件的上下文。<br>    // 方式一，这种方式只能在开发环境下使用，生产环境下的ctx将访问不到<br>    const &#123; ctx &#125; = getCurrentInstance(); //  方式二，此方法在开发环境以及生产环境下都能放到组件上下文对象（推荐）<br>    const &#123; proxy &#125; = getCurrentInstance(); // ctx 中包含了组件中由ref和reactive创建的响应式数据对象,以及以下对象及方法;<br>    proxy.$attrs;<br>    proxy.$data;<br>    proxy.$el;<br>    proxy.$emit;<br>    proxy.$forceUpdate;<br>    proxy.$nextTick;<br>    proxy.$options;<br>    proxy.$parent;<br>    proxy.$props;<br>    proxy.$refs;<br>    proxy.$root;<br>    proxy.$slots;<br>    proxy.$watch;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="hvBLw"></a></p><h1 id="二十、仅限-TypeScript-的功能"><a href="#二十、仅限-TypeScript-的功能" class="headerlink" title="二十、仅限 TypeScript 的功能"></a>二十、仅限 TypeScript 的功能</h1><p>设置类型声明时的默认 props 值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt; <br>interface IProps &#123;   <br>    foo: string   <br>    bar?: number <br>&#125; ;<br>const props = defineProps&lt;IProps&gt;(); <br><br>const emit = defineEmits&lt;&#123;   <br>    (event: &#x27;change&#x27;, id: number): void;   <br>    (event: &#x27;update&#x27;, value: string): void;   <br>    (event: &#x27;close&#x27;): void; <br>&#125;&gt;() <br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p>仅限类型的 defineProps 声明的不足之处在于，它没有可以给 props 提供默认值的方式。为了解决这个问题，提供了 withDefaults 编译器宏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt; <br>interface Props &#123;   <br>    msg?: string   <br>    labels?: string[] <br>&#125; <br>const props = withDefaults(defineProps&lt;Props&gt;(), &#123;   <br>    msg: &#x27;hello&#x27;,   <br>    labels: () =&gt; [&#x27;one&#x27;, &#x27;two&#x27;] <br>&#125;) <br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><a name="GBi72"></a></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>setup执行的时机：在beforeCreate之前执行一次，this是undefined。</li><li>由于模块执行语义的差异，<script setup> 中的代码依赖单文件组件的上下文。当将其移动到外部的 .js 或者 .ts 文件中的时候，对于开发者和工具来说都会感到混乱。因而 <script setup> 不能和 src attribute 一起使用。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue3</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue3/1-vue3/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue3/1-vue3/</url>
    
    <content type="html"><![CDATA[<p><a name="e487a692"></a></p><h1 id="一、Vue3的特点"><a href="#一、Vue3的特点" class="headerlink" title="一、Vue3的特点"></a>一、Vue3的特点</h1><ol><li>在响应式系统中用ES6的Proxy对象替代ES5的obj.defineProperty方法</li><li>使用组合式API</li><li>重写了虚拟DOM(算法)</li><li>提高了首次渲染及更新的速度</li><li>摇树策略</li><li>打包的体积变小了</li></ol><p><a name="a391b939"></a></p><h1 id="二、安装环境"><a href="#二、安装环境" class="headerlink" title="二、安装环境"></a>二、安装环境</h1><p><a name="e5b841c6"></a></p><h2 id="方法一：用vue-cli安装vue3"><a href="#方法一：用vue-cli安装vue3" class="headerlink" title="方法一：用vue-cli安装vue3"></a>方法一：用vue-cli安装vue3</h2><p><strong>整个课件都以vue-cli安装的版本为例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue -V <br>//显示vue-cli版本为5.0.1<br>@vue/cli 5.0.1<br><br>vue create vue3项目名称<br></code></pre></td></tr></table></figure><blockquote><p>手动配置vue3选项<br>可以自动安装vue-router, vuex, sass</p></blockquote><p><a name="f80a9470"></a></p><h2 id="方法二：-用vite"><a href="#方法二：-用vite" class="headerlink" title="方法二： 用vite"></a>方法二： 用vite</h2><p>Vite 是一个 web 开发构建工具，由于其原生 ES 模块导入方式，可以实现闪电般的冷服务器启动。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init vite@latest vue3app --template vue <br>//npx: <span class="hljs-number">6</span> 安装成功，用时 <span class="hljs-number">3.536</span> 秒<br><br>cd vue3app<br><span class="hljs-built_in">npm</span> install<br><span class="hljs-built_in">npm</span> run dev<br></code></pre></td></tr></table></figure><blockquote><p>需要手动安装 vue-router, vuex, sass<br>会生成vite.config.js</p></blockquote><p>webpack和vite的对比：<a href="https://www.jianshu.com/p/504d8c79424d">https://www.jianshu.com/p/504d8c79424d</a><br><a name="0afe72ff"></a></p><h1 id="三、vue的版本"><a href="#三、vue的版本" class="headerlink" title="三、vue的版本"></a>三、vue的版本</h1><p>在package.json中可以看到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.2.13&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vue-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.3&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vuex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.0&quot;</span><br></code></pre></td></tr></table></figure><p><a name="67f6e549"></a></p><h1 id="四、了解vue3和vue2的变化"><a href="#四、了解vue3和vue2的变化" class="headerlink" title="四、了解vue3和vue2的变化"></a>四、了解vue3和vue2的变化</h1><p><a name="f90745e5"></a></p><h2 id="1-main-js的变化"><a href="#1-main-js的变化" class="headerlink" title="1. main.js的变化"></a>1. main.js的变化</h2><p>vue2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>vue3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>createdApp替代了new Vue()<br>使用router, store时，用use()替代了注册<br>mount()方法替代了$mount</p></blockquote><p><a name="f5c11c1b"></a></p><h2 id="2-store-x2F-index-js"><a href="#2-store-x2F-index-js" class="headerlink" title="2. store&#x2F;index.js"></a>2. store&#x2F;index.js</h2><p>vue2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>vue3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="71044069"></a></p><h2 id="3-router-x2F-index-js的变化"><a href="#3-router-x2F-index-js的变化" class="headerlink" title="3. router&#x2F;index.js的变化"></a>3. router&#x2F;index.js的变化</h2><p>vue2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/Home.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/About.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>  <span class="hljs-attr">base</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>,<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>vue3+javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/Home.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> routes = <br>  [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>      <span class="hljs-comment">// route level code-splitting</span><br>      <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>      <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/About.vue&#x27;</span>)<br>    &#125;<br>  ]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>vue3+typescript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory, <span class="hljs-title class_">RouteRecordRaw</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView.vue&#x27;</span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteRecordRaw</span>&gt; = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p><a name="d323b2f3"></a></p><h1 id="五、组合式API的应用场景"><a href="#五、组合式API的应用场景" class="headerlink" title="五、组合式API的应用场景"></a>五、组合式API的应用场景</h1><blockquote><p>参考官网介绍</p></blockquote><p>使用 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组件选项来组织逻辑通常都很有效。然而，当我们的组件开始变得更大时，<strong>逻辑关注点</strong>的列表也会增长。尤其对于那些一开始没有编写这些组件的人来说，这会导致组件难以阅读和理解。<br />这种碎片化使得理解和维护复杂组件变得困难。选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块。<br />如果能够<strong>将同一个逻辑关注点相关代码收集在一起</strong>会更好。而这正是组合式 API 使我们能够做到的。</p><p><a name="38560777"></a></p><h1 id="六、组合式API的基础"><a href="#六、组合式API的基础" class="headerlink" title="六、组合式API的基础"></a>六、组合式API的基础</h1><ul><li>在 Vue 组件中，我们在组件选项setup中使用组合式API </li><li><code>setup</code> 选项在组件创建<strong>之前</strong>执行，一旦 <code>props</code> 被解析，就将作为组合式 API 的入口 </li><li>在 <code>setup</code> 中你应该避免使用 <code>this</code>，因为它不会找到组件实例 </li><li><code>setup</code> 选项是一个接收 <code>props</code> 和 <code>context</code> 的函数，我们将在<a href="https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0">之后</a>进行讨论 </li><li>将 <code>setup</code> 返回的所有内容都暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// src/components/UserRepositories.vue</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">RepositoriesFilters</span>, <span class="hljs-title class_">RepositoriesSortBy</span>, <span class="hljs-title class_">RepositoriesList</span> &#125;,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">user</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props) <span class="hljs-comment">// &#123; user: &#x27;&#x27; &#125;</span><br><br>    <span class="hljs-keyword">return</span> &#123;&#125; <span class="hljs-comment">// 这里返回的任何内容都可以用于组件的其余部分</span><br>  &#125;<br>  <span class="hljs-comment">// 组件的“其余部分”</span><br>  <span class="hljs-attr">computed</span>: &#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><a name="3d52cdb9"></a></p><h1 id="七、vue3中的生命周期的变化"><a href="#七、vue3中的生命周期的变化" class="headerlink" title="七、vue3中的生命周期的变化"></a>七、vue3中的生命周期的变化</h1><blockquote><p>vue3和vue2的生命周期函数基本相同，只是销毁阶段变为: beforeUnmount,  unmounted.<br>如果使用组合式API,则在setup内部使用生命周期时改变on+生命周期名称</p></blockquote><ol><li><p>setup()  : 替代beforeCreate和created</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props,ctx</span>)&#123;<br>  <span class="hljs-comment">//props是父组件传入的值</span><br>  <span class="hljs-comment">// ctx是上下文，可以调用emit方法，向父组件发送自定义事件</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>onMouted() : 当加载完毕的时候  (用在setup中)</p></li><li><p>onUnmounted(): 当组件卸载时 (用在setup中)</p></li></ol><p>***注意</p><blockquote><p>组合式API中没有this<br />所有在模板中使用的变量或方法都需要在setup()中return</p></blockquote><p>使用生命周期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;  onMounted, onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>  <span class="hljs-attr">components</span>: &#123;&#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onMounted&#x27;</span>);<br>      &#125;,<span class="hljs-number">1000</span>)<br>    &#125;)<br>    <span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-built_in">clearInterval</span>(timer)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onUnmounted&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123;<br><br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><a name="a4c06e6d"></a></p><h1 id="八、定义响应式数据的API"><a href="#八、定义响应式数据的API" class="headerlink" title="八、定义响应式数据的API"></a>八、定义响应式数据的API</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;ref,reactive,toRefs&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br></code></pre></td></tr></table></figure><ol><li>ref() : 定义单一响应式数据</li><li>reactive(): 一次定义多个响应式数据</li><li>toRefs() : 配合reactive使用</li></ol><p><a name="0dc08327"></a></p><h1 id="九、总结ref、reactive和toRefs的使用"><a href="#九、总结ref、reactive和toRefs的使用" class="headerlink" title="九、总结ref、reactive和toRefs的使用"></a>九、总结ref、reactive和toRefs的使用</h1><p><a name="bf1d3fe9"></a></p><h2 id="1-用ref-定义响应式数据"><a href="#1-用ref-定义响应式数据" class="headerlink" title="1. 用ref 定义响应式数据"></a>1. 用ref 定义响应式数据</h2><ul><li><p>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;thing&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;addThing&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index ) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delItem(index)&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在setup中用ref定义响应式数据</p><blockquote><p>更新数据时用  “数据.value&#x3D;新值” 来更改，因为数据是ref包装过的元素，值在value中<br>模板中调用的数据和方法必须return出去<br>模板中直接使用，不需要加value</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; ref, reactive, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>  <span class="hljs-attr">components</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// 组合式API入口</span><br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> thing = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">let</span> list = <span class="hljs-title function_">ref</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addThing</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      list.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(thing.<span class="hljs-property">value</span>);<br>      thing.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">delItem</span> = (<span class="hljs-params">index</span>) =&gt; &#123;<br>      list.<span class="hljs-property">value</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      thing,<br>      list,<br>      addThing,<br>      delItem,<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><a name="b0e2e7d5"></a></p><h2 id="2-用reactive定义响应式数据"><a href="#2-用reactive定义响应式数据" class="headerlink" title="2. 用reactive定义响应式数据"></a>2. 用reactive定义响应式数据</h2><ul><li>只使用reactive</li></ul><p>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  &#123;&#123; person.name &#125;&#125;----------&#123;&#123; person.age &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span>修改数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>setup中</p><blockquote><p>用reactive定义的响应式数据，使用时直接 “数据.属性” 即可  例： person.name<br>return出去整个对象person<br>在模板中使用时，需要数据.属性  例： person.name</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;<br>     <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Alice&quot;</span>,<br>     <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>   &#125;);<br> <br>   <span class="hljs-keyword">const</span> <span class="hljs-title function_">edit</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>     person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Jenny&quot;</span>;<br>   &#125;;<br>   <span class="hljs-keyword">return</span> &#123;<br>     person,<br>     edit<br>   &#125;;<br> &#125;,<br></code></pre></td></tr></table></figure><p><a name="dd4dd85d"></a></p><h2 id="3-结合toRefs-定义响应式数据"><a href="#3-结合toRefs-定义响应式数据" class="headerlink" title="3. 结合toRefs,定义响应式数据"></a>3. 结合toRefs,定义响应式数据</h2><p>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  &#123;&#123; name &#125;&#125;----------&#123;&#123; age &#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span>修改数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>setup中</p><blockquote><p>用toRefs把多个数据转为多个ref,并展开</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Alice&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    &#125;);<br>  <br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">edit</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Jenny&quot;</span>;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> &#123;<br>      ...<span class="hljs-title function_">toRefs</span>(person),<br>      edit<br>    &#125;;<br>  &#125;,<br></code></pre></td></tr></table></figure><p><a name="df2c338a"></a></p><h1 id="十、计算属性和监听器"><a href="#十、计算属性和监听器" class="headerlink" title="十、计算属性和监听器"></a>十、计算属性和监听器</h1><p>引入computed、watch() API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; computed,watch,watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 计算属性返回的是响应式数据，但不需要提前通过ref或reactive定义</span><br><span class="hljs-keyword">let</span> schoolList = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> list.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.<span class="hljs-property">age</span>&lt;<span class="hljs-number">18</span>)<br>&#125;)<br><br><span class="hljs-comment">// 监听器，第一个参数是要监听变化的响应式数据，第二个是数据变化触发的回调</span><br><span class="hljs-title function_">watch</span>(type,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watch&#x27;</span>,type.<span class="hljs-property">value</span>);<br>&#125;)<br><span class="hljs-comment">//组件初始化即执行一次，之后依赖监听数据的变化，决定是否执行</span><br><span class="hljs-comment">//但不能获取原始值</span><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watchEffect&#x27;</span>,type.<span class="hljs-property">value</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="fd2fa996"></a></p><h1 id="十一、父向子传值"><a href="#十一、父向子传值" class="headerlink" title="十一、父向子传值"></a>十一、父向子传值</h1><p>父组件模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">//通过自定义属性传值<br><span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">List</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子组件js</p><blockquote><p>通过props选项获取父组件的数据<br />如果在setup中要访问父组件传来的值，要通过props</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br>  <span class="hljs-comment">//通过props选项获取父组件的数据</span><br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">list</span>: <span class="hljs-title class_">Array</span><br>  &#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-comment">//如果在setup中要访问父组件传来的值，要通过props</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">del</span> = (<span class="hljs-params">index</span>)=&gt;&#123;<br>      props.<span class="hljs-property">list</span>.<span class="hljs-title function_">splice</span>(index,<span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>      del<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="140390a7"></a></p><h1 id="十二、子向父传值"><a href="#十二、子向父传值" class="headerlink" title="十二、子向父传值"></a>十二、子向父传值</h1><p>子组件js<br />在setup中引入ctx,调用emit方法,发送自定义事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;search&#x27;</span>,<br>  <span class="hljs-comment">//如果在新的脚手架中emit报错，应该添加下面的语句，对send提前注册</span><br>  <span class="hljs-comment">// emits: [&#x27;send&#x27;],</span><br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props,ctx</span>) &#123;<br>    <span class="hljs-keyword">let</span> item = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment">//添加新事项</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>      <span class="hljs-comment">//在setup中引入ctx,调用emit方法</span><br>      ctx.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;send&quot;</span>,item.<span class="hljs-property">value</span>)<br>      item.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>      item,<br>      add<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>父组件模板中监听自定义事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Search</span> @<span class="hljs-attr">send</span>=<span class="hljs-string">&quot;getItem&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Search</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在触发的方法中接收子组件的值</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getItem</span> = (<span class="hljs-params">item</span>)=&gt;&#123;<br>  list.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(item)<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="33889d05"></a></p><h1 id="十三、自定义钩子-hook-函数（组合式函数）"><a href="#十三、自定义钩子-hook-函数（组合式函数）" class="headerlink" title="十三、自定义钩子(hook)函数（组合式函数）"></a>十三、自定义钩子(hook)函数（组合式函数）</h1><ul><li>在export default外部定义钩子函数</li><li>在setup中调用钩子函数</li><li>在钩子函数中的使用和直接写在setup中思路相同，可以调用组合式API (ref(),reactive(),onMounted)</li></ul><p>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;thing&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;addThing&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><br>      添加<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 显示所有数据 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delItem(index)&quot;</span>&gt;</span><br>      &#123;&#123; item &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 显示&gt;10的数据 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list2&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delItem(index)&quot;</span>&gt;</span><br>      &#123;&#123; item &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; ref, computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//todolist</span><br>    <span class="hljs-keyword">let</span> todolist = <span class="hljs-title function_">useTodoList</span>()<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      ...todolist<br>    &#125;;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">//todolist的逻辑</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useTodoList</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> thing = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">let</span> list = <span class="hljs-title function_">ref</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addThing</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      list.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(thing.<span class="hljs-property">value</span>);<br>      thing.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">delItem</span> = (<span class="hljs-params">index</span>) =&gt; &#123;<br>      list.<span class="hljs-property">value</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> list2 = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-keyword">return</span> list.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> item &lt; <span class="hljs-number">10</span>  <br>      &#125;)<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      thing,<br>      list,<br>      addThing,<br>      delItem,<br>      list2<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="80de0749"></a></p><h1 id="十四、路由对象和路由记录的使用"><a href="#十四、路由对象和路由记录的使用" class="headerlink" title="十四、路由对象和路由记录的使用"></a>十四、路由对象和路由记录的使用</h1><p>获取路由对象，实现编程式导航</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br>.....<br><br>  <span class="hljs-title function_">setup</span>(<br>    <span class="hljs-comment">//获取路由对象</span><br>    <span class="hljs-keyword">let</span> router = <span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toAbout</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>  <span class="hljs-comment">// router.push(&quot;/about&quot;)</span><br><br>  <span class="hljs-comment">//path和query结合使用,  name和params,query结合使用</span><br>  router.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">query</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">5</span><br>    &#125;<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">return</span> &#123;<br>  toAbout<br>&#125;<br>)<br></code></pre></td></tr></table></figure><p>获取路由记录，从而获取路由参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br>......<br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//获取路由记录信息</span><br>  <span class="hljs-keyword">let</span> route = <span class="hljs-title function_">useRoute</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="2e109456"></a></p><h1 id="十五、使用vuex"><a href="#十五、使用vuex" class="headerlink" title="十五、使用vuex"></a>十五、使用vuex</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;useStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br>...<br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//store的实例</span><br>  <span class="hljs-keyword">let</span> store = <span class="hljs-title function_">useStore</span>()<br>  <span class="hljs-comment">// let city = ref(store.state.city)  // 这种方式获取的city,在store改变后不会更新视图</span><br><br>  <span class="hljs-comment">//必须通过下面的方式获取store中的数据</span><br>  <span class="hljs-keyword">let</span> city = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> store.<span class="hljs-property">state</span>.<span class="hljs-property">city</span><br>  &#125;)<br><br>  <span class="hljs-keyword">let</span> <span class="hljs-title function_">changeCity</span> = (<span class="hljs-params">newCity</span>)=&gt;&#123;<br>    <span class="hljs-comment">//提交mutations来更改store中的数据</span><br>    store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;changeCity&quot;</span>,newCity)<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    city,<br>    changeCity<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p><a name="023bfda2"></a></p><h1 id="十六、vue3-ts"><a href="#十六、vue3-ts" class="headerlink" title="十六、vue3 + ts"></a>十六、vue3 + ts</h1><p><a name="450f4d68"></a></p><h2 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1. 配置环境"></a>1. 配置环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue create 项目名称<br></code></pre></td></tr></table></figure><blockquote><p>选择vue3和typescript选项</p></blockquote><p><a name="bc0ef29b"></a></p><h2 id="2-shims-vue-d-ts"><a href="#2-shims-vue-d-ts" class="headerlink" title="2. shims-vue.d.ts"></a>2. shims-vue.d.ts</h2><blockquote><p>&#x2F;**</p><ul><li>shims-vue.d.ts的作用</li><li>为了 typescript 做的适配定义文件，因为.vue 文件不是一个常规的文件类型，ts 是不能理解 vue 文件是干嘛的， </li><li>加这一段是是告诉 ts，vue 文件是这种类型的。</li><li>可以把这一段删除，会发现 import 的所有 vue 类型的文件都会报错。<br>*&#x2F;</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* eslint-disable */</span><br>declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.vue&#x27;</span> &#123;<br>  <span class="hljs-keyword">import</span> type &#123; <span class="hljs-title class_">DefineComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">component</span>: <span class="hljs-title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, any&gt;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> component<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="27e113f4"></a></p><h2 id="3-tsconfig-json的警告"><a href="#3-tsconfig-json的警告" class="headerlink" title="3. tsconfig.json的警告"></a>3. tsconfig.json的警告</h2><p>参考链接： <a href="https://blog.csdn.net/bidang3275/article/details/114852411">https://blog.csdn.net/bidang3275/article/details/114852411</a></p><p><a name="bf39d102"></a></p><h2 id="4-使用-路径报错"><a href="#4-使用-路径报错" class="headerlink" title="4. 使用@路径报错"></a>4. 使用@路径报错</h2><p>在vscode中禁用vetur扩展，安装volar</p><p><a name="d91da3ff"></a></p><h2 id="5-基础代码"><a href="#5-基础代码" class="headerlink" title="5. 基础代码"></a>5. 基础代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; defineComponent, ref, reactive,toRefs ,onMounted,computed,watch,watchEffect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// HelloWorld,</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="6.defineComponent"></a></p><h2 id="6-defineComponent"><a href="#6-defineComponent" class="headerlink" title="6.defineComponent"></a>6.defineComponent</h2><p>要让 TypeScript 正确推断 Vue 组件选项中的类型，需要使用 <code>defineComponent</code> 全局方法定义组件：</p><p><a name="565256a3"></a></p><h1 id="十七、快速生成vue3代码片段"><a href="#十七、快速生成vue3代码片段" class="headerlink" title="十七、快速生成vue3代码片段"></a>十七、快速生成vue3代码片段</h1><p>【文件】 – 【首选项】— 【配置用户代码片段】—【vue.json】–把代码粘进去<br />在*.vue文件中，输入”vue3”,即可显示代码提示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;Print to console&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;&lt;template&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;\t&lt;div class=\&quot;$1\&quot;&gt;\n\r\t&lt;/div&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;&lt;/template&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;\t\t&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;&lt;script lang=\&quot;ts\&quot;&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;import &#123; defineComponent,ref, reactive, toRefs, onBeforeMount, onMounted, watchEffect, computed &#125; from &#x27;vue&#x27;;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;import &#123; useStore &#125; from &#x27;vuex&#x27;;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;import &#123; useRoute, useRouter &#125; from &#x27;vue-router&#x27;;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;export default defineComponent(&#123;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;\tname:&#x27;&#x27;,&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;\tsetup()&#123;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;\t&#125;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;&#125;)&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;&lt;/script&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;&lt;style scoped lang=&#x27;scss&#x27;&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;&lt;/style&gt;&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Log output to console&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><a name="de9178da"></a></p><h1 id="十八、获取原生DOM"><a href="#十八、获取原生DOM" class="headerlink" title="十八、获取原生DOM"></a>十八、获取原生DOM</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;cart&quot;&gt;<br>        &lt;!-- 1. 定义ref属性 --&gt;<br>        &lt;input type=&quot;text&quot; ref=&quot;inputBox&quot;&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>        <br>&lt;script lang=&quot;ts&quot;&gt;<br>import &#123; defineComponent, ref, onMounted, Ref &#125; from &#x27;vue&#x27;;<br>export default defineComponent(&#123;<br>    name: &#x27;&#x27;,<br>    setup() &#123;<br>        // 2. 创建响应式数据，和模板中的属性值保持一致，且初值为null<br>        let inputBox: Ref = ref(null)<br><br><br>        onMounted(() =&gt; &#123;<br>            //3. 在onMounted中调用<br>            // console.log(inputBox);<br>            inputBox.value.focus()<br>        &#125;)<br>        return &#123;<br>            // 4. return到外部<br>            inputBox<br>        &#125;<br>    &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><a name="b069c215"></a></p><h1 id="十九、组件注册"><a href="#十九、组件注册" class="headerlink" title="十九、组件注册"></a>十九、组件注册</h1><ul><li>局部注册： 和vue2相同 </li><li>全局注册:  全局地注册一个组件，使得它在当前应用中的任何组件上都可以使用，而不需要额外再导入。<br />main.ts <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br><span class="hljs-comment">//注册全局组件</span><br>app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;Box&quot;</span>, &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;button&gt;全局组件&lt;/button&gt;`</span><br>&#125;)<br>app.<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>特别注意：如果在运行时警告<br>[vue warn]:Component provided template option but runtime compilation is not supported in this build of Vue</p></blockquote></li></ul><p>修改vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 添加词句，运行时编译</span><br>  <span class="hljs-attr">runtimeCompiler</span>: <span class="hljs-literal">true</span><br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>路由守卫</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/25-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B6/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/25-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<p><a name="QI20a"></a></p><h1 id="1-导航守卫"><a href="#1-导航守卫" class="headerlink" title="1.导航守卫"></a>1.导航守卫</h1><p>参考文章：<a href="https://juejin.cn/post/7003255556735516702">https://juejin.cn/post/7003255556735516702</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332444077-0f4c5d61-1806-42b0-b3bb-dc6f03c300f2.png#averageHue=%23e0d4bc&clientId=u90f18e7d-bcc1-4&from=paste&height=477&id=u87be6920&name=image.png&originHeight=858&originWidth=1152&originalType=binary&ratio=1&rotation=0&showTitle=false&size=265356&status=done&style=none&taskId=ud14e02c0-9f6e-415c-a188-a57a1dcd8fb&title=&width=640.0000169542105" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332455645-bca15e05-9ee2-4603-b17e-99f8b57e3230.png#averageHue=%23e0d1bc&clientId=u90f18e7d-bcc1-4&from=paste&height=430&id=uae8c4851&name=image.png&originHeight=774&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5954783&status=done&style=none&taskId=u03ebb208-0887-455b-8389-26ee84eb70d&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332470117-eb8fca26-02cc-43a6-9122-8eaa99fc5d83.png#averageHue=%23ddcdb6&clientId=u90f18e7d-bcc1-4&from=paste&height=388&id=u69836638&name=image.png&originHeight=698&originWidth=1144&originalType=binary&ratio=1&rotation=0&showTitle=false&size=164532&status=done&style=none&taskId=u82fd2b76-be6b-4eb4-813a-7e8fdd7af19&title=&width=635.5555723920285" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332502882-c4daf895-af43-4049-a64b-a34f5364b3ce.png#averageHue=%23c4d5d8&clientId=u90f18e7d-bcc1-4&from=paste&height=723&id=u31efc659&name=image.png&originHeight=1301&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10009225&status=done&style=none&taskId=ub3427fcc-e3ca-4c9c-a631-b49feec7787&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332513106-de96e5aa-92d6-4450-9c1a-a09046c24fb2.png#averageHue=%23fdfcfc&clientId=u90f18e7d-bcc1-4&from=paste&height=587&id=uf6eca73f&name=image.png&originHeight=1056&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8124335&status=done&style=none&taskId=ue7f1ca07-976b-4401-935a-e295a3f6faf&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332531238-4417fcc8-47ee-44ab-a7c5-ebda89b2f46d.png#averageHue=%232b2f37&clientId=u90f18e7d-bcc1-4&from=paste&height=800&id=u56306151&name=image.png&originHeight=1440&originWidth=2344&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10143981&status=done&style=none&taskId=u2ae310b5-a4dc-4b79-b786-20545f2ca8a&title=&width=1302.2222567193312" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332532782-97d4244e-7648-4385-8c0f-52e23469d263.png#averageHue=%23cdd4c7&clientId=u90f18e7d-bcc1-4&from=paste&height=685&id=ucdc62307&name=image.png&originHeight=1233&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9486074&status=done&style=none&taskId=u4012631a-e7d2-482f-954a-31a9f182248&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332530550-14d07fc3-fd6e-418a-a35e-a47fb91220cb.png#averageHue=%232e333b&clientId=u90f18e7d-bcc1-4&from=paste&height=500&id=u6a7613b3&name=image.png&originHeight=900&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6924150&status=done&style=none&taskId=ua7789b98-c05d-471a-80d8-ba9271377ec&title=&width=1422.2222598982455" alt="image.png"><br><a name="c3PZg"></a></p><h1 id="2-导航守卫解析流程"><a href="#2-导航守卫解析流程" class="headerlink" title="2.导航守卫解析流程"></a>2.导航守卫解析流程</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332547588-9ebedc42-05f0-4829-ab4f-e0f1679f7742.png#averageHue=%23f7f2eb&clientId=u90f18e7d-bcc1-4&from=paste&height=461&id=ud39de8a9&name=image.png&originHeight=830&originWidth=1492&originalType=binary&ratio=1&rotation=0&showTitle=false&size=405185&status=done&style=none&taskId=u328cb639-42ad-4fcb-8fb2-3bf66a839a5&title=&width=828.8889108469463" alt="image.png"><br><a name="WLD1a"></a></p><h1 id="3-路由元信息"><a href="#3-路由元信息" class="headerlink" title="3.路由元信息"></a>3.路由元信息</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332580585-8206df3b-d985-4019-8cd6-aefcef67d13f.png#averageHue=%232c3039&clientId=u90f18e7d-bcc1-4&from=paste&height=938&id=u4e8a3f92&name=image.png&originHeight=1689&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7310055&status=done&style=none&taskId=u6f034115-6e62-40c7-ba0b-0cde6d0df69&title=&width=800.0000211927631" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332587634-ce5fb0af-07de-4d28-9629-32c4d73c68d4.png#averageHue=%23fcfbfa&clientId=u90f18e7d-bcc1-4&from=paste&height=418&id=u626cf18a&name=image.png&originHeight=752&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5785536&status=done&style=none&taskId=u01380c5c-d346-46fb-a124-849a577c2c8&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332594108-e8df5756-27c3-47e1-aaef-779ceea94ef7.png#averageHue=%232b3038&clientId=u90f18e7d-bcc1-4&from=paste&height=800&id=ube463a2d&name=image.png&originHeight=1440&originWidth=1734&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7504512&status=done&style=none&taskId=ua27f4744-9cb4-4bfe-98c4-51518632cfb&title=&width=963.3333588529523" alt="image.png"><br><a name="nHwBT"></a></p><h1 id="4-路由懒加载"><a href="#4-路由懒加载" class="headerlink" title="4.路由懒加载"></a>4.路由懒加载</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332593268-631811b0-2c40-478c-8c1a-e3720d818848.png#averageHue=%23fbf9f7&clientId=u90f18e7d-bcc1-4&from=paste&height=121&id=ud1d85e78&name=image.png&originHeight=217&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1669547&status=done&style=none&taskId=ucf3ebf86-71a6-4ce9-9594-4f70ed34387&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332606130-82d15871-1bae-4ba8-ac61-75a9546a6d9b.png#averageHue=%2397adb5&clientId=u90f18e7d-bcc1-4&from=paste&height=752&id=uc44bed33&name=image.png&originHeight=1353&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10409278&status=done&style=none&taskId=u29c7b8ca-8f9f-4f79-8412-9b3db492f6f&title=&width=1422.2222598982455" alt="image.png"><br />打包上线： </p><ol><li>因为history模式需要服务器配置， 所以将路由模式改为hash</li><li>npm run build,  会生成dist文件夹，存放打包后的资源</li><li>dist中即为生产环境的代码，必须放在服务器环境测试</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vuex</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/23.vuex/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/23.vuex/</url>
    
    <content type="html"><![CDATA[<p><a name="tcInW"></a></p><h1 id="1-Vuex-是什么？"><a href="#1-Vuex-是什么？" class="headerlink" title="1.Vuex 是什么？"></a>1.Vuex 是什么？</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。<br />它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p><a name="TK3wg"></a></p><h1 id="2-什么是“状态管理模式”？"><a href="#2-什么是“状态管理模式”？" class="headerlink" title="2.什么是“状态管理模式”？"></a>2.什么是“状态管理模式”？</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。<br />让我们从一个简单的 Vue 计数应用开始：<br />这个状态管理 包含以下几个部分：<br />state，驱动应用的数据源；<br />view，以声明方式将 state 映射到视图；<br />actions，响应在 view 上的用户输入导致的状态变化。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668331461341-858b49c8-7144-465f-a024-57c17d3d5b94.png#averageHue=%23272d36&clientId=u10f17d30-1f8b-4&from=paste&height=551&id=u7a702874&name=image.png&originHeight=992&originWidth=572&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93664&status=done&style=none&taskId=ue16c459e-7d1d-4396-bf7a-9ab9df352b7&title=&width=317.77778619601423" alt="image.png"><br><a name="oVSBp"></a></p><h1 id="3-vuex单向数据流"><a href="#3-vuex单向数据流" class="headerlink" title="3.vuex单向数据流"></a>3.vuex单向数据流</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668331492957-422fbae4-aa6f-4983-a73f-cb8bec6798eb.png#averageHue=%23fcf0f0&clientId=u10f17d30-1f8b-4&from=paste&height=800&id=u31fbd9c0&name=image.png&originHeight=1440&originWidth=1824&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7893953&status=done&style=none&taskId=u6143df89-0069-4c43-b70f-12887fe1612&title=&width=1013.3333601775" alt="image.png"><br />当用户单击，需要计数增加时（View）<br />并不能直接影响到count （State）<br />必须触发methods中某个方法，来改变count的值  （View —-&gt;Actions —&gt; State）<br />而当count值被改变，又进而重新渲染到页面 (State—&gt; View)<br><a name="F3Tu6"></a></p><h1 id="4-Vuex的意义"><a href="#4-Vuex的意义" class="headerlink" title="4.Vuex的意义"></a>4.Vuex的意义</h1><p>当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：<br />1、多个视图依赖于同一状态。(状态即数据)<br />2、来自不同视图的行为需要变更同一状态。</p><p>对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。<br />对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。<br />以上的这些模式非常脆弱，通常会导致无法维护的代码。</p><p>因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！</p><p>另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。</p><p>这就是 Vuex 背后的基本思想，借鉴了 Flux、Redux、和 The Elm Architecture。与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。</p><p>5.什么情况下我应该使用 Vuex？<br />虽然 Vuex 可以帮助我们管理共享状态，但也附带了更多的概念和框架。这需要对短期和长期效益进行权衡。       <br />如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。<br />引用 Redux 的作者 Dan Abramov 的话说就是：Vuex就像眼镜：您自会知道什么时候需要它。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668331616502-37666ef8-d1bf-449c-9bb9-5db743cb3df0.png#averageHue=%23eeeeee&clientId=u10f17d30-1f8b-4&from=paste&height=487&id=uc2c91f3d&name=image.png&originHeight=877&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6747210&status=done&style=none&taskId=uf54faae9-2e1d-4b87-9295-d00f2880ccd&title=&width=1422.2222598982455" alt="image.png"><br><a name="D0S9v"></a></p><h1 id="5-Vuex的运行机制"><a href="#5-Vuex的运行机制" class="headerlink" title="5.Vuex的运行机制"></a>5.Vuex的运行机制</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1669299433316-53020fad-d0bf-41ec-899a-85456daffd5e.png#averageHue=%23fefefe&clientId=u53c85f43-f8af-4&from=paste&height=339&id=u2afb0afb&name=image.png&originHeight=610&originWidth=1022&originalType=binary&ratio=1&rotation=0&showTitle=false&size=187382&status=done&style=none&taskId=u66a86160-cb22-48cd-94c5-4b7bac0112d&title=&width=567.7777928187527" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1669299408875-e190f97f-0a7e-43e2-a050-00ad84fc79f1.png#averageHue=%23fefefe&clientId=u53c85f43-f8af-4&from=paste&height=114&id=u75710ad0&name=image.png&originHeight=206&originWidth=996&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55150&status=done&style=none&taskId=u60f054fb-8a6d-4c84-8f6d-938e2cded23&title=&width=553.3333479916612" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668331637782-d6399b7c-f932-42e6-9d63-473644e2408a.png#averageHue=%23fefdfb&clientId=u10f17d30-1f8b-4&from=paste&height=800&id=u59e0712c&name=image.png&originHeight=1440&originWidth=1832&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7928561&status=done&style=none&taskId=u3467a13e-bde4-4d45-b186-f63706cf5ed&title=&width=1017.777804739682" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1669299612713-c6921b7e-62ae-4322-ab9d-2c96a86863ad.png#averageHue=%23fefefe&clientId=u53c85f43-f8af-4&from=paste&height=560&id=u84cf9634&name=image.png&originHeight=1008&originWidth=1320&originalType=binary&ratio=1&rotation=0&showTitle=false&size=351037&status=done&style=none&taskId=u23c74db7-6d2f-47a1-95ff-a7dc5f4c1c3&title=&width=733.3333527600329" alt="image.png"><br><a name="z7v5X"></a></p><h1 id="6-Vuex的实例：复杂组件之间传值"><a href="#6-Vuex的实例：复杂组件之间传值" class="headerlink" title="6.Vuex的实例：复杂组件之间传值"></a>6.Vuex的实例：复杂组件之间传值</h1><p>第一步：src&#x2F;store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">selected</span>: [],<br>        <span class="hljs-attr">seller</span>: &#123;&#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-title function_">getSeller</span>(<span class="hljs-params">ctx, id</span>) &#123;<br>            axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/getSeller&quot;</span>, &#123;<br>                <span class="hljs-attr">params</span>: &#123;<br>                    <span class="hljs-attr">id</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span><br>                &#125;<br>            &#125;)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;changeSeller&quot;</span>,res.<span class="hljs-property">data</span>)<br>            &#125;)<br>        &#125;<br>    &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">addSelected</span>(<span class="hljs-params">state, food</span>) &#123;<br>            state.<span class="hljs-property">selected</span>.<span class="hljs-title function_">push</span>(food)<br>        &#125;,<br>        <span class="hljs-attr">changeSeller</span>:<span class="hljs-function">(<span class="hljs-params">state,data</span>)=&gt;</span>&#123;<br>            state.<span class="hljs-property">seller</span> = data<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-attr">newSelected</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> state.<span class="hljs-property">selected</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> item.<span class="hljs-property">count</span><br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>第二步：src&#x2F;main.js， 注册store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br>......<br><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    router,<br>    store,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>第三步：在组件中使用数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.  在模板中使用：</span><br>&lt;p&gt;商家名称：&#123;&#123;$store.<span class="hljs-property">state</span>.<span class="hljs-property">seller</span>.<span class="hljs-property">name</span>&#125;&#125;&lt;/p&gt;<br><br><br><span class="hljs-comment">// 2.   ajax异步请求改变数据</span><br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;getSeller&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>)<br>&#125;,<br><br><span class="hljs-comment">// 3.  对状态管理中的数据过滤</span><br><span class="hljs-attr">computed</span>:&#123;<br>    <span class="hljs-title function_">selected2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">newSelected</span><br>    &#125;<br>&#125;,<br><br><span class="hljs-comment">// 4.  同步改变数据</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;addSelected&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">food</span>)<br></code></pre></td></tr></table></figure><p><a name="u18Tn"></a></p><h1 id="7-Vuex的运行机制总结"><a href="#7-Vuex的运行机制总结" class="headerlink" title="7.Vuex的运行机制总结"></a>7.Vuex的运行机制总结</h1><p>一、new Vuex.Store() 实例中有四个主要选项 state, actions , mutations，getters，该实例要注册到new Vue()的根实例中<br />二、state 中存储状态 （即共享数据）， 在应用的任何一个组件，可以通过this.$store.state.键名来访问数据，而且数据是响应式，只要state数据改变，组件的部分即更新<br />三、但组件不能直接修改state中的数据，如果要修改，需要通过this.$store.dispatch()触发actions中定义的方法（可传值）<br />四、在actions中，可通过上下文(ctx)的commit方法，触发mutations中定义的方法，在mutations的方法中可改变state的值<br />五、actions中一般放获取异步数据的请求，如果请求不是异步，且数据不复杂，组件也可以直接调用 commit来触发mutations的方法，从而实现状态的修改</p><p><a name="oole0"></a></p><h1 id="面试题：为什么把异步操作放在actions中"><a href="#面试题：为什么把异步操作放在actions中" class="headerlink" title="面试题：为什么把异步操作放在actions中"></a>面试题：为什么把异步操作放在actions中</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">因为异步操作本身是耗时的，当修改数据的时候，一开始数据还是空的<br>但是actions是可以使用异步请求的，表示actions是在异步请求过来之后，才对数据发生改变<br>有点类似于async和await中的await，你把方法放在actions之后，他就等着获取数据，获取到数据之后再去执行mutations中对数据的更改<br></code></pre></td></tr></table></figure><p><a name="PvZlw"></a></p><h1 id="8-Vuex的高级使用–getter"><a href="#8-Vuex的高级使用–getter" class="headerlink" title="8.Vuex的高级使用–getter"></a>8.Vuex的高级使用–getter</h1><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668331968821-c412f7ce-3692-4109-b466-287e226bc172.png#averageHue=%23bec8bb&clientId=u10f17d30-1f8b-4&from=paste&height=644&id=HRssb&name=image.png&originHeight=1160&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8924443&status=done&style=none&taskId=ud29d3574-b86f-483c-8734-3535748fdbf&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668331980447-47c3ffb7-4ce4-47d9-8a71-b86392f0a73c.png#averageHue=%232a2e36&clientId=u10f17d30-1f8b-4&from=paste&height=800&id=v1sd8&name=image.png&originHeight=1440&originWidth=1992&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8620874&status=done&style=none&taskId=u5c7f6329-370c-43ef-a741-2f1f0be9842&title=&width=1106.6666959833224" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668331985662-bf0f1a1b-af3d-4aaa-a3a1-e377a7d93805.png#averageHue=%2395afbc&clientId=u10f17d30-1f8b-4&from=paste&height=602&id=uJHk1&name=image.png&originHeight=1084&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8339750&status=done&style=none&taskId=uaeb9f518-0430-4563-b5ce-95d1f1327c2&title=&width=1422.2222598982455" alt="image.png"><br><a name="qGQHl"></a></p><h1 id="9-Vuex-—-辅助函数的使用"><a href="#9-Vuex-—-辅助函数的使用" class="headerlink" title="9.Vuex —- 辅助函数的使用"></a>9.Vuex —- 辅助函数的使用</h1><p>this.$store.state.selectedAll的用法太繁琐<br />可以使用辅助函数，vuex有4个辅助函数<br />1）mapState 映射state中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;p&gt;显示城市:&#123;&#123;city&#125;&#125;&lt;/p&gt;<br>import &#123; mapState &#125; from &#x27;vuex&#x27;<br>// 可以在computed中用mapState函数<br>computed:&#123;<br>  ...mapState([&#x27;city&#x27;,&#x27;students&#x27;]),<br>&#125;<br></code></pre></td></tr></table></figure><p>2）mapGetters 映射getters中的计算属性<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668331988229-4a2bb4fd-72cd-40a7-87fc-66292ca78f1e.png#averageHue=%2330353d&clientId=u10f17d30-1f8b-4&from=paste&height=800&id=KMA20&name=image.png&originHeight=1440&originWidth=1764&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7634324&status=done&style=none&taskId=u650561a2-c539-4e0a-8487-c1ce55698b5&title=&width=980.0000259611348" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;(item,index) in selectStudent &quot; :key=&quot;index&quot;&gt;<br>      &#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125; -- &#123;&#123;item.age&#125;&#125;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;  <br>&lt;/template&gt;<br> export default &#123;<br>   import &#123;mapState,mapGetters&#125; from &#x27;vuex&#x27;;<br>             <br>   computed:&#123;<br>   ...mapGetters([&#x27;selectStudent&#x27;])<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>3）也可在methods中用mapMutations 和mapActions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState,mapMutations&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br>...<br><span class="hljs-attr">methods</span>: &#123;<br>...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;change&#x27;</span>])<br>&#125;<br><span class="hljs-comment">//然后直接用this.change方法名即可</span><br></code></pre></td></tr></table></figure><p>注意：<br />mapState和mapGetters 必须在computed中<br />mapActions和mapMutations必须在methods中<br />解析mapState的格式：<a href="https://blog.csdn.net/zjslan_js/article/details/124223716">https://blog.csdn.net/zjslan_js&#x2F;article&#x2F;details&#x2F;124223716</a><br><a name="Rvt1m"></a></p><h1 id="10-Vuex拆分—单文件拆分"><a href="#10-Vuex拆分—单文件拆分" class="headerlink" title="10.Vuex拆分—单文件拆分"></a>10.Vuex拆分—单文件拆分</h1><p>store&#x2F;state.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>  &#123;<br>      city  <span class="hljs-string">&#x27;上海&#x27;</span>,<br>      <span class="hljs-attr">selectedAll</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>store&#x2F;mutations.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>  &#123;<br>    <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> state <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./state&#x27;</span><br><span class="hljs-keyword">import</span> mutations <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mutations&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>state,<br>mutations<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="ePkfm"></a></p><h1 id="11-Vuex的高级使用–module"><a href="#11-Vuex的高级使用–module" class="headerlink" title="11.Vuex的高级使用–module"></a>11.Vuex的高级使用–module</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332012225-ea274d80-4672-4f0f-b214-0e47d81bad1c.png#averageHue=%238da3b0&clientId=u10f17d30-1f8b-4&from=paste&height=800&id=u3035f7fa&name=image.png&originHeight=1440&originWidth=1691&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7318458&status=done&style=none&taskId=u5079da09-6e9b-412e-9487-f098913f11a&title=&width=939.4444693312239" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668332019395-c94436d6-0baa-42cf-b717-c112190050d8.png#averageHue=%2388a3b2&clientId=u10f17d30-1f8b-4&from=paste&height=800&id=u08647826&name=image.png&originHeight=1440&originWidth=2048&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8863194&status=done&style=none&taskId=u363bc287-7b78-4fac-a950-cbb11368615&title=&width=1137.7778079185964" alt="image.png"><br />案例：module 和 辅助函数 一起使用<br />store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// import moduleA from &#x27;./city&#x27;</span><br><br><span class="hljs-comment">// 使用router路由，也需要添加Vue.ues</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">let</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>:&#123;<br>    <span class="hljs-attr">city</span>:<span class="hljs-string">&#x27;郑州&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">actions</span>:&#123;<br>    <span class="hljs-title function_">changeCity</span>(<span class="hljs-params">ctx</span>)&#123;<br>      <span class="hljs-keyword">let</span> newCity = <span class="hljs-string">&#x27;北京&#x27;</span>;<br>      ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;changeCity&#x27;</span>,newCity)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">changeCity</span>(<span class="hljs-params">state,data</span>)&#123;<br>      state.<span class="hljs-property">city</span> = data<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> moduleB = &#123;<br>  <span class="hljs-attr">state</span>:&#123;<br>    <span class="hljs-attr">area</span>:<span class="hljs-string">&#x27;高新区&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">actions</span>:&#123;<br>    <span class="hljs-title function_">changeArea</span>(<span class="hljs-params">ctx</span>)&#123;<br>      <span class="hljs-keyword">let</span> newArea = <span class="hljs-string">&#x27;金水区&#x27;</span>;<br>      ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;changeArea&#x27;</span>,newArea)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">changeArea</span>(<span class="hljs-params">state,newArea</span>)&#123;<br>      state.<span class="hljs-property">area</span> = newArea<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>:&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 绑定到vuex.strore实例身上</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">a</span>:moduleA,<br>    <span class="hljs-attr">b</span>:moduleB<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>viws&#x2F;student.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template lang=&quot;&quot;&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;学生信息页面&lt;/h1&gt;<br>        &lt;p&gt;显示城市：&#123;&#123;$store.state.a.city&#125;&#125;&lt;/p&gt;<br>        &lt;p&gt;显示区域：&#123;&#123;$store.state.b.area&#125;&#125;&lt;/p&gt;<br>        &lt;p&gt;&lt;button @click=&quot;change&quot;&gt;修改数据&lt;/button&gt;&lt;/p&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123;mapMutations&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>    methods:&#123;<br>        ...mapMutations([&#x27;changeArea&#x27;,&#x27;changeCity&#x27;]),<br>        change()&#123;<br>            // 使用辅助函数<br>            this.changeCity(&#x27;北京&#x27;)<br>            this.changeArea(&#x27;朝阳群众&#x27;)<br>            // 原来的调用方式<br>            // this.$store.commit(&#x27;changeCity&#x27;,&#x27;北京&#x27;);<br>            // this.$store.commit(&#x27;changeArea&#x27;,&#x27;朝阳群众&#x27;);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style lang=&quot;&quot;&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>token的使用</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/22.token%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/22.token%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>网址：<a href="https://www.jianshu.com/p/58abb716b5dc/">https://www.jianshu.com/p/58abb716b5dc/</a></p><blockquote><p>具体概念参考上面链接</p></blockquote><p>参考网站：<a href="https://panjiachen.github.io/vue-element-admin/#/login?redirect=%2Fdashboard">https://panjiachen.github.io/vue-element-admin/#/login?redirect=%2Fdashboard</a><br><a name="kK8tr"></a></p><h2 id="1-面试题-Token验证的基本流程"><a href="#1-面试题-Token验证的基本流程" class="headerlink" title="1. 面试题-Token验证的基本流程"></a>1. 面试题-Token验证的基本流程</h2><p>1.服务端收到请求，去验证用户名与密码<br />2.验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端<br />3.客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里<br />4.客户端每次向服务端请求资源的时候需要带着服务端签发的 Token<br />5.服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据<br><a name="0b8e79f1"></a></p><h2 id="2-了解与token相关的概念（仅需了解）"><a href="#2-了解与token相关的概念（仅需了解）" class="headerlink" title="2. 了解与token相关的概念（仅需了解）"></a>2. 了解与token相关的概念（仅需了解）</h2><p><a name="91450bb8"></a></p><h3 id="2-1-JWT标准的Token有如下三个部分"><a href="#2-1-JWT标准的Token有如下三个部分" class="headerlink" title="2.1  JWT标准的Token有如下三个部分"></a>2.1  JWT标准的Token有如下三个部分</h3><p>header (头部)<br />payload （数据）<br />signature （签名）</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiIsInR5</span>cCI<span class="hljs-number">6</span>IkpX<span class="hljs-attr">VCJ9</span>.eyJ<span class="hljs-number">1</span>c<span class="hljs-number">2</span>VyX<span class="hljs-number">25</span>hbWUiOiJhZ<span class="hljs-name">G1</span>pbiIsI<span class="hljs-symbol">nVzZXJfaWQiOjEsImlhdCI6</span>MTU<span class="hljs-number">5</span><span class="hljs-symbol">NDI2</span>MjQ<span class="hljs-number">5</span><span class="hljs-symbol">NSwiZXhwIjoxNTk0</span>MzQ<span class="hljs-number">4</span>ODk<span class="hljs-number">1</span>fQ<span class="hljs-number">.1</span>MJ_MAFgpBjOjpggj<span class="hljs-number">69</span>Xz<span class="hljs-number">8</span>F_evBcMAe<span class="hljs-symbol">nRK_7</span>a<span class="hljs-number">8</span>fdVrc<br></code></pre></td></tr></table></figure><p><a name="4f53bed4"></a></p><h3 id="2-2-安装两个依赖包"><a href="#2-2-安装两个依赖包" class="headerlink" title="2.2  安装两个依赖包"></a>2.2  安装两个依赖包</h3><ul><li><p>依赖包：jsonwebtoken<br />作用： 生成token与验证 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install jsonwebtoken --save<br><span class="hljs-attribute">npm</span> install express-jwt@<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>jsonwebtoken的两个api </p><ul><li>生成token的方法 sign</li><li>验证token的方法 verify</li></ul></li><li><p>依赖包： express-jwt </p><blockquote><p>千万千万注意版本： 6.1.1</p></blockquote></li><li><p>express-jwt的作用<br />验证token是否过期并规定哪些路由不需要验证 express-jwt({})<br><a name="50f793a3"></a></p></li></ul><h3 id="2-3-token-Express后端相关代码"><a href="#2-3-token-Express后端相关代码" class="headerlink" title="2.3  token Express后端相关代码"></a>2.3  token Express后端相关代码</h3><ul><li>定义生成token和获取token的函数<br />&#x2F;token&#x2F;token.js <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><br><span class="hljs-comment">// 密钥</span><br><span class="hljs-keyword">const</span> jwtSecret = <span class="hljs-string">&#x27;wangwushan&#x27;</span>;  <span class="hljs-comment">//签名</span><br><br><span class="hljs-comment">//登录接口 生成token的方法</span><br><span class="hljs-comment">// setToken携带的参数及参数的数量自定义</span><br><span class="hljs-keyword">const</span> setToken = <span class="hljs-keyword">function</span> (<span class="hljs-params">uname</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//expiresln 设置token过期的时间</span><br>    <span class="hljs-comment">//&#123; user_name: user_name, user_id: user_id &#125; 传入需要解析的值（ 一般为用户名，用户id 等）</span><br>    <span class="hljs-comment">// const token = jwt.sign(&#123; user_name: user_name &#125;, jwtSecret, &#123; expiresIn: &#x27;24h&#x27; &#125;);</span><br>    <span class="hljs-keyword">const</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">uname</span>: uname &#125;, jwtSecret, &#123; <span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&#x27;10s&#x27;</span> &#125;);<br>    <span class="hljs-comment">// 注意：expiresIn 过期事件，可以调整为24h后过期，10s太短了</span><br>    <span class="hljs-title function_">resolve</span>(token)<br>  &#125;)<br>&#125;<br><span class="hljs-comment">//各个接口需要验证token的方法</span><br><span class="hljs-keyword">const</span> getToken = <span class="hljs-keyword">function</span> (<span class="hljs-params">token</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!token) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;token是空的&#x27;</span>)<br>      <span class="hljs-title function_">reject</span>(&#123;<br>        <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;token 是空的&#x27;</span><br>      &#125;)<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 验证token</span><br>      <span class="hljs-keyword">var</span> info = jwt.<span class="hljs-title function_">verify</span>(token.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">1</span>], jwtSecret);<br>      <span class="hljs-title function_">resolve</span>(info);  <span class="hljs-comment">//解析返回的值（sign 传入的值）</span><br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  setToken,<br>  getToken<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><a name="2b22a0fc"></a></p><h3 id="2-4-解析token-验证token"><a href="#2-4-解析token-验证token" class="headerlink" title="2.4  解析token,验证token"></a>2.4  解析token,验证token</h3><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-comment">//express跨域</span><br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>)<br><span class="hljs-comment">// 生成token和验证token是否正确的函数</span><br><span class="hljs-keyword">const</span> vertoken=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./token/token&#x27;</span>)<br><br><span class="hljs-comment">//验证token是否过期，并规定哪些路由不用验证token</span><br><span class="hljs-keyword">const</span> expressJwt=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>)<br><br><span class="hljs-keyword">const</span> bookRouter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router/bookRouter&quot;</span>)<br><span class="hljs-keyword">const</span> userRouter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router/userRouter&quot;</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>())<br><br><br><span class="hljs-comment">//=============================================验证token</span><br><br><span class="hljs-comment">//解析token获取用户信息</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-keyword">let</span> token = req.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;authorization&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(token == <span class="hljs-literal">undefined</span>)&#123;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    vertoken.<span class="hljs-title function_">getToken</span>(token).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;解析后的token&#x27;</span>,data);<br>      req.<span class="hljs-property">data</span> = data;<br>      <span class="hljs-title function_">next</span>();<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>      <span class="hljs-title function_">next</span>();<br>    &#125;)<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">//验证token是否过期并规定那些路由不需要验证</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">expressJwt</span>(&#123;<br>  <span class="hljs-attr">secret</span>:<span class="hljs-string">&#x27;dkfjdjfkdfdfd&#x27;</span>,<br>  <span class="hljs-comment">// 加密算法</span><br>  <span class="hljs-attr">algorithms</span>:[<span class="hljs-string">&#x27;HS256&#x27;</span>]<br>&#125;).<span class="hljs-title function_">unless</span>(&#123;<br>  <span class="hljs-attr">path</span>:[<span class="hljs-string">&#x27;/login&#x27;</span>]  <span class="hljs-comment">//不需要验证的接口名称</span><br>&#125;))<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  注意：直接安装使用expressJwt的时候，会在运行的时候报错</span><br><span class="hljs-comment">因为express-jwt升级了，后以前的用法应该是不同了</span><br><span class="hljs-comment">只需要将pakage.json中的express-jwt版本改为6.1.1，重新npm i 即可使用。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//token失效返回信息</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)&#123;<br>  <span class="hljs-keyword">if</span>(err.<span class="hljs-property">status</span>==<span class="hljs-number">401</span>)&#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;token失效11111111&#x27;</span>)<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_">next</span>()<br>  &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">use</span>(bookRouter)<br>app.<span class="hljs-title function_">use</span>(userRouter)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器已开启在3000端口&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="e8a5129e"></a></p><h3 id="2-5-登录接口"><a href="#2-5-登录接口" class="headerlink" title="2.5 登录接口"></a>2.5 登录接口</h3><p>&#x2F;router&#x2F;usersRouter.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">let</span> userRouter = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> db = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../utils/db&quot;</span>)<br><span class="hljs-keyword">const</span> vertoken = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../utils/token&quot;</span>)<br><br><span class="hljs-comment">// 登陆操作</span><br>userRouter.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> &#123;uname,pwd&#125; = req.<span class="hljs-property">body</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uname,pwd);<br>    <span class="hljs-keyword">let</span> sql = <span class="hljs-string">`select * from login where uname = &#x27;<span class="hljs-subst">$&#123;uname&#125;</span>&#x27; and pwd = &#x27;<span class="hljs-subst">$&#123;pwd&#125;</span>&#x27;`</span><br>    db.<span class="hljs-title function_">base</span>(sql, <span class="hljs-literal">null</span>, <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123; <span class="hljs-comment">// result 数组包对象格式</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>        <span class="hljs-keyword">if</span> (result.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-comment">//==============================================调用生成token的方法</span><br>            vertoken.<span class="hljs-title function_">setToken</span>(uname).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">token</span> =&gt;</span> &#123;<br>                data = &#123;<br>                <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>                <span class="hljs-attr">token</span>: token<br>                <span class="hljs-comment">//前端获取token后存储在localStroage中,</span><br>                <span class="hljs-comment">//**调用接口时 设置axios(ajax)请求头Authorization的格式为`Bearer ` +token</span><br>                &#125;<br>                res.<span class="hljs-title function_">send</span>(data)<br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            data = &#123;<br>                <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录失败 &#x27;</span><br>            &#125;<br>            res.<span class="hljs-title function_">send</span>(data)<br>        &#125;<br>    &#125;);<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = userRouter<br></code></pre></td></tr></table></figure><p><a name="c3e2573a"></a></p><h2 id="3-token-Vue前端相关代码"><a href="#3-token-Vue前端相关代码" class="headerlink" title="3. token Vue前端相关代码"></a>3. token Vue前端相关代码</h2><ul><li><p>登录后获取token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;http://localhost:3000/login&quot;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;login返回的数据&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;登录成功&#x27;</span>)<br>      <span class="hljs-comment">//存储token</span><br>      sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;token&quot;</span>,res.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>)<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure></li><li><p>前端请求携带token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;token&quot;</span>);<br>    <span class="hljs-keyword">if</span> (token) &#123;<br>      <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:5000/cart&quot;</span>, &#123;<br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;token&quot;</span>),<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请登录&quot;</span>);<br>    &#125;<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>axios的二次封装</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/19-axios%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/19-axios%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p><a name="ZAbD7"></a></p><h1 id="1-axios-简介"><a href="#1-axios-简介" class="headerlink" title="1.axios 简介"></a>1.axios 简介</h1><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><ol><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防止 CSRF&#x2F;XSRF</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668330351345-af6205d1-f85d-4894-b166-f6dbd93437e0.png#averageHue=%23f1f0f0&clientId=u6949adbf-a61f-4&from=paste&height=286&id=u77dd0174&name=image.png&originHeight=515&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3962183&status=done&style=none&taskId=u731e702e-bf06-4bb0-91d4-930ce0ccc0a&title=&width=1422.2222598982455" alt="image.png"><br><a name="ZNB8b"></a></p><h1 id="2-axios-安装"><a href="#2-axios-安装" class="headerlink" title="2.axios 安装"></a>2.axios 安装</h1><p>使用 npm:<br />npm install axios<br />使用 yarn:<br />yarn install axios<br />使用 cdn:<br /><script src="[https://unpkg.com/axios/dist/axios.min.js"></script>](<a href="https://unpkg.com/axios/dist/axios.min.js%22%3E">https://unpkg.com/axios/dist/axios.min.js&quot;&gt;</a></script>)<br><a name="AzSnM"></a></p><h1 id="3-什么是RESTful-了解即可"><a href="#3-什么是RESTful-了解即可" class="headerlink" title="3.什么是RESTful (了解即可)"></a>3.什么是RESTful (了解即可)</h1><ol><li>RESTful 是目前最流行的 API 设计规范，用于 Web 数据接口的设计。</li><li>RESTful 的核心思想就是，客户端发出的数据操作指令都是”动词 + 宾语”的结构。</li></ol><p></p><p>比如，GET &#x2F;articles这个命令，GET是动词，&#x2F;articles是宾语</p><p>动词通常就是五种 HTTP 方法，对应 CRUD 操作。</p><ol><li>GET：读取（Read）</li><li>POST：新建（Create）</li><li>PUT：更新（Update）</li><li>PATCH：更新（Update），通常是部分更新</li><li>DELETE：删除（Delete）</li></ol><p>更多RESTful的风格参考下面网址：RESTful API:   最佳实践<a href="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html">http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html</a></p><p><a name="K4Dxh"></a></p><h1 id="4-为什么会出现Restful-了解即可"><a href="#4-为什么会出现Restful-了解即可" class="headerlink" title="4.为什么会出现Restful (了解即可)"></a>4.为什么会出现Restful (了解即可)</h1><p>在Restful之前的操作：<br /><a href="http://127.0.0.1/user/query/1">http://127.0.0.1/user/query/1</a>     GET 根据用户id查询用户数据<br /><a href="http://127.0.0.1/user/save">http://127.0.0.1/user/save</a>           POST 新增用户<br /><a href="http://127.0.0.1/user/update">http://127.0.0.1/user/update</a>       POST 修改用户信息<br /><a href="http://127.0.0.1/user/delete/1">http://127.0.0.1/user/delete/1</a>      GET&#x2F;POST 删除用户信息</p><p>RESTful用法：<br /><a href="http://127.0.0.1/user/1">http://127.0.0.1/user/1</a>     GET 根据用户id查询用户数据<br /><a href="http://127.0.0.1/user">http://127.0.0.1/user</a>       POST 新增用户<br /><a href="http://127.0.0.1/user">http://127.0.0.1/user</a>      PUT 修改用户信息<br /><a href="http://127.0.0.1/user">http://127.0.0.1/user</a>     DELETE 删除用户信息</p><p>之前的操作是没有问题的,大神认为是有问题的,有什么问题呢?<br />你每次请求的接口或者地址,都在做描述,例如查询的时候用了query,新增的时候用了save,其实完全没有这个必要,我使用了get请求,就是查询.使用post请求,就是新增的请求,我的意图很明显,完全没有必要做描述,这就是为什么有了restful.<br><a name="alDo7"></a></p><h1 id="5-Axios-各种请求方式传递参数格式"><a href="#5-Axios-各种请求方式传递参数格式" class="headerlink" title="5.Axios 各种请求方式传递参数格式"></a>5.Axios 各种请求方式传递参数格式</h1><p>get delete 方法较为不同<br />get请求方式将需要入参的数据作为 params 属性的值，最后整体作为参数传递<br />delete请求方式将需要入参的数据作为 data 属性的值，最后整体作为参数传递<br />axios.get(url[, config])    GET 根据用户id查询用户数据<br />axios.post(url[, data[, config]])   POST 新增用户<br />axios.put(url[, data[, config]])   PUT 修改用户信息<br />axios.delete(url[, config])  DELETE 删除用户信息<br />axios.patch(url[, data[, config]])   PATCH 修改用户部分信息</p><p><a name="ffAm8"></a></p><h1 id="6-Axios-post方式：-新增信息"><a href="#6-Axios-post方式：-新增信息" class="headerlink" title="6.Axios post方式： 新增信息"></a>6.Axios post方式： 新增信息</h1><p>前端代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">===============================前端代码：<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 新增</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">addProduct</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://127.0.0.1:7001/product&#x27;</span>,&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尔康&#x27;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;10&#x27;</span><br>  &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125;)<br>&#125;,<br><br></code></pre></td></tr></table></figure><p>express.js 对应路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product&#x27;</span>,controller.<span class="hljs-property">product</span>.<span class="hljs-property">create</span>)<br></code></pre></td></tr></table></figure><p>后端controller控制器<br />需要在入口文件中配置post的接收参数的配置项<br />如果是express-generator不需要手动配置，如果是express需要手动配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>()); <span class="hljs-comment">// 以json的格式传递</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;)); <span class="hljs-comment">// 以urlencoded的格式传递</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增商品</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> data;<br>    <span class="hljs-keyword">let</span> productInfo = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span><br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">product</span>.<span class="hljs-title function_">create</span>(productInfo)<br>    <span class="hljs-keyword">if</span> (result)&#123;<br>        data = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;添加成功&#x27;</span><br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        data = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;添加失败&#x27;</span><br>        &#125;<br>    &#125;<br>    ctx.<span class="hljs-property">body</span> = data;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>后端service</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增商品</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>.<span class="hljs-property">mysql</span>.<span class="hljs-title function_">insert</span>(<span class="hljs-string">&#x27;product&#x27;</span>, data);<br>    <span class="hljs-keyword">return</span> result.<span class="hljs-property">affectedRows</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="FsXmE"></a></p><h1 id="7-Axios-post方式：-新增信息"><a href="#7-Axios-post方式：-新增信息" class="headerlink" title="7.Axios post方式： 新增信息"></a>7.Axios post方式： 新增信息</h1><p>如果和其它后台配合,后台说接不到数据,可参考下面代码 （了解即可）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;./api/addUser.php&quot;</span>, &#123;<br>    <span class="hljs-attr">username</span>: $(<span class="hljs-string">&quot;.username&quot;</span>).<span class="hljs-title function_">val</span>(),<br>    <span class="hljs-attr">pwd</span>: $(<span class="hljs-string">&quot;.pwd&quot;</span>).<span class="hljs-title function_">val</span>(),<br>    <span class="hljs-attr">age</span>: $(<span class="hljs-string">&quot;.age&quot;</span>).<span class="hljs-title function_">val</span>()<br>&#125;, &#123;<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">transformRequest</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">let</span> ret = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> it <span class="hljs-keyword">in</span> data) &#123;<br>            ret += <span class="hljs-built_in">encodeURIComponent</span>(it) + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data[it]) + <span class="hljs-string">&#x27;&amp;&#x27;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;]<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><a name="uqyXy"></a></p><h1 id="8-Axios-delete方式：-删除信息"><a href="#8-Axios-delete方式：-删除信息" class="headerlink" title="8.Axios delete方式： 删除信息"></a>8.Axios delete方式： 删除信息</h1><p>前端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">delProduct</span>(<span class="hljs-params">id</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;http://127.0.0.1:7001/product&#x27;</span>,&#123;<br>        <span class="hljs-attr">params</span>: &#123;<br>            id<br>        &#125;<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125;)<br>&#125;,<br><br></code></pre></td></tr></table></figure><p>express对应路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;/product&#x27;</span>,controller.<span class="hljs-property">product</span>.<span class="hljs-property">delete</span>)<br></code></pre></td></tr></table></figure><p>后端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除商品</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> data;<br>    <span class="hljs-keyword">let</span> id = ctx.<span class="hljs-property">query</span>.<span class="hljs-property">id</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id)<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">product</span>.<span class="hljs-title function_">delete</span>(id)<br>    <span class="hljs-keyword">if</span> (result)&#123;<br>        data = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;删除成功&#x27;</span><br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        data = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;删除失败&#x27;</span><br>        &#125;<br>    &#125;<br>    ctx.<span class="hljs-property">body</span> = data;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除商品</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>.<span class="hljs-property">mysql</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;product&#x27;</span>, &#123;id&#125;);<br>    <span class="hljs-keyword">return</span> result.<span class="hljs-property">affectedRows</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="luNYN"></a></p><h1 id="9-Axios-get方式：-查询信息"><a href="#9-Axios-get方式：-查询信息" class="headerlink" title="9.Axios get方式： 查询信息"></a>9.Axios get方式： 查询信息</h1><p>前端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/product&#x27;</span>, &#123;<br>    <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">5</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>express路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/product&#x27;</span>,controller.<span class="hljs-property">product</span>.<span class="hljs-property">selectAll</span>)<br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/product1&#x27;</span>,controller.<span class="hljs-property">product</span>.<span class="hljs-property">selectId</span>)<br></code></pre></td></tr></table></figure><p>后端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询商品-----控制器controller</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">selectAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> data;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">product</span>.<span class="hljs-title function_">selectAll</span>()<br>    <span class="hljs-keyword">if</span> (result)&#123;<br>        data = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">list</span>: result<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        data = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;没有数据&#x27;</span><br>        &#125;<br>    &#125;<br>    ctx.<span class="hljs-property">body</span> = data;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询指定id的商品</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">selectId</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> data;<br>    <span class="hljs-keyword">let</span> id = ctx.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id);<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">product</span>.<span class="hljs-title function_">selectId</span>(id)<br>    <span class="hljs-keyword">if</span> (result)&#123;<br>        data = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">list</span>: result<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        data = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;没有数据&#x27;</span><br>        &#125;<br>    &#125;<br>    ctx.<span class="hljs-property">body</span> = data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询商品--------服务-service</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">selectAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>.<span class="hljs-property">mysql</span>.<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;product&#x27;</span>);<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询指定id的商品</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">selectId</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>.<span class="hljs-property">mysql</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;product&#x27;</span>,&#123;id&#125;);<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="bu5hI"></a></p><h1 id="10-Axios-patch方式：-修改部分信息-了解"><a href="#10-Axios-patch方式：-修改部分信息-了解" class="headerlink" title="10.Axios patch方式： 修改部分信息(了解)"></a>10.Axios patch方式： 修改部分信息(了解)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">patch</span>(<span class="hljs-string">&quot;./product&quot;</span>, &#123;<br>    <span class="hljs-comment">// 只修改年龄</span><br>    <span class="hljs-attr">username</span>: $(<span class="hljs-string">&quot;.username&quot;</span>).<span class="hljs-title function_">val</span>(),<br>    <span class="hljs-attr">age</span>: $(<span class="hljs-string">&quot;.age&quot;</span>).<span class="hljs-title function_">val</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="jCzbR"></a></p><h1 id="11-Axios-错误处理"><a href="#11-Axios-错误处理" class="headerlink" title="11.Axios  错误处理"></a>11.Axios  错误处理</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/index/banner&quot;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><a name="Nn5U7"></a></p><h1 id="12-axios-执行多个并发请求"><a href="#12-axios-执行多个并发请求" class="headerlink" title="12.axios 执行多个并发请求"></a>12.axios 执行多个并发请求</h1><p>axios.all()、axios.spread()两个辅助函数用于处理同时发送多个请求，可以实现在多个请求都完成后再执行一些逻辑。(比如首页中要同时请求banner和热销商品的数据)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">getBanner</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/index/banner&quot;</span>)<br>    &#125;,<br>    <span class="hljs-title function_">getGoods</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/index/goods&quot;</span>)<br>    &#125;<br>&#125;,<br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发起请求&#x27;</span>)<br>    axios.<span class="hljs-title function_">all</span>([self.<span class="hljs-title function_">getBanner</span>(),self.<span class="hljs-title function_">getGoods</span>()])<br>    .<span class="hljs-title function_">then</span>(axios.<span class="hljs-title function_">spread</span>(<span class="hljs-function">(<span class="hljs-params">banner,goods</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;数据都得到了&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(banner)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(goods)<br>    &#125;))<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="HcM3O"></a></p><h1 id="13-axios-请求拦截器"><a href="#13-axios-请求拦截器" class="headerlink" title="13.axios 请求拦截器"></a>13.axios 请求拦截器</h1><p>在请求或响应被 then 或 catch 处理前拦截它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 添加请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>  config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = <span class="hljs-string">&quot;Bearer &quot;</span>+<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br>  <span class="hljs-comment">// 在发送请求之前做些什么</span><br>  <span class="hljs-keyword">return</span> config;<br>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-comment">// 对请求错误做些什么</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><p><a name="qhQKP"></a></p><h1 id="14-axios-响应拦截器"><a href="#14-axios-响应拦截器" class="headerlink" title="14.axios 响应拦截器"></a>14.axios 响应拦截器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 添加响应拦截器</span><br><span class="hljs-comment">// axios请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-comment">// 对响应数据做点什么</span><br>    <span class="hljs-keyword">if</span>(response.<span class="hljs-property">data</span>.<span class="hljs-property">state</span> == <span class="hljs-number">401</span>)&#123;<br>      localStroage.<span class="hljs-title function_">clear</span>();<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();<br>    &#125;<br>  <span class="hljs-keyword">return</span> response<br>  &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>,error.<span class="hljs-property">status</span>)<br>    <span class="hljs-comment">// 对响应错误做点什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p><a name="C5TNB"></a></p><h1 id="15-axios的实例化和默认设置"><a href="#15-axios的实例化和默认设置" class="headerlink" title="15.axios的实例化和默认设置"></a>15.axios的实例化和默认设置</h1><p>可以使用自定义配置新建一个 axios 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 语法： axios.create([config])</span><br><br><span class="hljs-comment">// 案例：</span><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>: <span class="hljs-string">&#x27;foobar&#x27;</span>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>配置默认值<br />你可以指定将被用在各个请求的配置默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全局的 axios 默认值</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;https://api.example.com&#x27;</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">post</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br><br><span class="hljs-comment">// 自定义实例默认值</span><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://api.example.com&#x27;</span><br>&#125;);<br>instance.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br><br></code></pre></td></tr></table></figure><p><a name="YYkqj"></a></p><h1 id="16-Vue项目中API封装"><a href="#16-Vue项目中API封装" class="headerlink" title="16.Vue项目中API封装"></a>16.Vue项目中API封装</h1><p>api&#x2F;config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> http = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://127.0.0.1:7001&#x27;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>: <span class="hljs-string">&#x27;foobar&#x27;</span>&#125;<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> http<br><br></code></pre></td></tr></table></figure><p>api&#x2F;product.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">productList</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/product&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">addProduct</span>(<span class="hljs-params">params</span>)&#123;<br>    <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product&#x27;</span>,params)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在express中接收数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在express中：接收数据：     </span><br>ctx.<span class="hljs-property">query</span>.<span class="hljs-property">id</span><br>ctx.<span class="hljs-property">params</span>.<span class="hljs-property">id</span><br>ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span><br></code></pre></td></tr></table></figure><p>api&#x2F;product.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;productList,addProduct&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/product.js&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">productList</span>()<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">let</span> params = &#123;<br>         <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-number">1</span>,<br>         <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">2</span><br>      &#125;<br>      <span class="hljs-title function_">addProduct</span>(params)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue.config.js的配置</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/20-Vue-config-js%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/20-Vue-config-js%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><a name="36259916"></a></p><h2 id="1-认识vue-config-js"><a href="#1-认识vue-config-js" class="headerlink" title="1. 认识vue.config.js"></a>1. 认识vue.config.js</h2><ul><li>vue-cli@5 会自动创建vue.config.js </li><li><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。<br />从vue-cli3开始的一些服务配置都迁移到CLI Service里面了，对于一些基础配置和一些扩展配置需要在根目录新建一个vue.config.js文件进行配置<br><a name="35ee62f3"></a></li></ul><h2 id="2-常用配置"><a href="#2-常用配置" class="headerlink" title="2. 常用配置"></a>2. 常用配置</h2><blockquote><p>特别特别需要注意的是只要vue.config.js进行了修改，就必须重启</p></blockquote><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-comment">// 工具函数，添加绝对路径</span><br><span class="hljs-comment">// dir: &quot;./src/components&quot;   ---- &quot;E:/share/myapp/src/components&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">dir</span>) &#123;<br>  <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">join</span>(__dirname, dir)<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">// 禁用eslint检查</span><br><br>  <span class="hljs-comment">//设置路径别名</span><br>  <span class="hljs-title function_">chainWebpack</span>(<span class="hljs-params">config</span>) &#123;<br>    config.<span class="hljs-property">resolve</span>.<span class="hljs-property">alias</span><br>      <span class="hljs-comment">//用com这个别名代表./src/components的完整路径</span><br>      .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;com&#x27;</span>, <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/components&#x27;</span>))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="15f374d6"></a></p><h2 id="3-在vue项目开发阶段实现跨域"><a href="#3-在vue项目开发阶段实现跨域" class="headerlink" title="3. 在vue项目开发阶段实现跨域"></a>3. 在vue项目开发阶段实现跨域</h2><p>如果后端没有设置cors,实现<strong>开发阶段</strong>跨域就需要在vue.config.js进行服务器代理的配置</p><ul><li><p>去掉后端跨域的代码 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//去掉以下代码</span><br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>())<br></code></pre></td></tr></table></figure></li><li><p>在config.js中修改baseURL </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>原设置<br>baseURL: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br><span class="hljs-regexp">//</span>修改为<br>baseURL: <span class="hljs-string">&#x27;/api&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>在vue.config.js的添加proxy代理 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 配置自动启动浏览器</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">`http://localhost:3000/`</span>, <span class="hljs-comment">//访问的服务器地址</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//启用websocket</span><br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">//替换规则</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;/admin&#x27;</span>: &#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">`http://xx.xxx.xxx.xxx/`</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,    <br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-string">&#x27;^/admin&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue+express实现图片上传+token</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/21-vue-express%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0+token/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/21-vue-express%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0+token/</url>
    
    <content type="html"><![CDATA[<p><a name="zmzte"></a></p><h1 id="1-前端部分"><a href="#1-前端部分" class="headerlink" title="1.前端部分"></a>1.前端部分</h1><p>upload.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classify&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;p&gt;&lt;input type=&quot;file&quot; @change=&quot;upload&quot; ref=&quot;file&quot; /&gt;&lt;/p&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span>上传图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图片回显：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">img</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">upload</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 新建表单数据对象，用来存储上传的文件及上传的其它数据</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">//获取图片信息</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> file = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">file</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file);</span><br><span class="language-javascript">        <span class="hljs-comment">//&quot;file&quot;为前后端约定好的属性名</span></span><br><span class="language-javascript">        param.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>, file);</span><br><span class="language-javascript">        axios</span><br><span class="language-javascript">          .<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;http://localhost:5000/upload&quot;</span>, param, &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">headers</span>: &#123; </span><br><span class="language-javascript">                  <span class="hljs-comment">// 默认提交的类型</span></span><br><span class="language-javascript">                  <span class="hljs-comment">// &quot;content-type&quot;: &quot;application/json&quot;</span></span><br><span class="language-javascript">                  <span class="hljs-comment">// 复杂的表单数据(只要上传文件，就必须是下面的类型)</span></span><br><span class="language-javascript">                  <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data&quot;</span>, <span class="hljs-comment">// Content-Type注意大小写</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">          .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> &#123; url &#125; = res.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span> = url;</span><br><span class="language-javascript">          &#125;);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="zwdYy"></a></p><h1 id="2-Express后端部分"><a href="#2-Express后端部分" class="headerlink" title="2.Express后端部分"></a>2.Express后端部分</h1><p><a name="R3hV1"></a></p><h2 id="使用multer实现图片上传"><a href="#使用multer实现图片上传" class="headerlink" title="使用multer实现图片上传"></a>使用multer实现图片上传</h2><ul><li><p>下载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm i multer  <span class="hljs-comment">// nodejs用于上传文件的模块 </span><br>npm i uuid <span class="hljs-comment">//uuid用来生成唯一标识符</span><br></code></pre></td></tr></table></figure></li><li><p>在项目根目录创建static文件夹，并创建uploadImg子文件夹</p></li><li><p>配置 utils&#x2F;upload.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;multer&quot;</span>)  <span class="hljs-comment">// nodejs用于上传文件的模块</span><br><span class="hljs-keyword">const</span> uuid = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;uuid&quot;</span>)  <span class="hljs-comment">//uuid用来生成唯一标识符</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  multer是node的中间件, 处理表单数据 主要用于上传文件  multipart/form-data</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 指定存储位置</span><br><span class="hljs-keyword">const</span> storage = multer.<span class="hljs-title function_">diskStorage</span>(&#123;<br>  <span class="hljs-comment">// 存储位置</span><br>  <span class="hljs-title function_">destination</span>(<span class="hljs-params">req, file, callback</span>) &#123;<br>    <span class="hljs-comment">// 参数一 错误信息   参数二  上传路径（此处指定upload文件夹）</span><br>    <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;static/uploadImg&quot;</span>)<br>  &#125;,<br>  <span class="hljs-comment">// 确定文件名</span><br>  <span class="hljs-title function_">filename</span>(<span class="hljs-params">req, file, cb</span>) &#123;<br>    <span class="hljs-comment">//文件扩展名</span><br>    <span class="hljs-keyword">let</span> extName = file.<span class="hljs-property">originalname</span>.<span class="hljs-title function_">slice</span>(file.<span class="hljs-property">originalname</span>.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-comment">//新文件名</span><br>    <span class="hljs-keyword">let</span> fileName = uuid.<span class="hljs-title function_">v1</span>()<br>    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, fileName + extName)<br>  &#125;<br>&#125;)<br><span class="hljs-comment">// 得到multer对象  传入storage对象</span><br><span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>(&#123; storage &#125;)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = upload;<br></code></pre></td></tr></table></figure></li><li><p>在路由中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//图片上传</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/upload&quot;</span>, upload.<span class="hljs-title function_">single</span>(<span class="hljs-string">&quot;file&quot;</span>), <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 需要返回图片的访问地址    域名+文件名</span><br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://localhost:5000/uploadImg/&quot;</span> + req.<span class="hljs-property">file</span>.<span class="hljs-property">filename</span><br>  <span class="hljs-comment">// console.log(req.file.filename);</span><br>  res.<span class="hljs-title function_">json</span>(&#123; url &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跨域的3种方式</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/17-%E8%B7%A8%E5%9F%9F%E7%9A%843%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/17-%E8%B7%A8%E5%9F%9F%E7%9A%843%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><a name="C1W4L"></a></p><h2 id="1-跨域的三种方式"><a href="#1-跨域的三种方式" class="headerlink" title="1. 跨域的三种方式"></a>1. 跨域的三种方式</h2><p><a name="F1YL8"></a></p><h3 id="1-1-jsonp"><a href="#1-1-jsonp" class="headerlink" title="1.1 jsonp"></a>1.1 jsonp</h3><p>以前的技术，通过<script>标签跨域请求，服务器端返回的是符合js语法的函数调用，函数的形参即数据<br><a name="23113b86"></a></p><h3 id="1-2-CORS"><a href="#1-2-CORS" class="headerlink" title="1.2 CORS"></a>1.2 CORS</h3><p>跨域资源共享，需要服务器端进行配置</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">//express中配置cors</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">cors</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&quot;cors&quot;</span>)</span><br><span class="hljs-variable">app.use</span>(<span class="hljs-function"><span class="hljs-title">cors</span>())</span><br></code></pre></td></tr></table></figure><p><a name="674aeac0"></a></p><h3 id="1-3-服务器代理"><a href="#1-3-服务器代理" class="headerlink" title="1.3  服务器代理"></a>1.3  服务器代理</h3><p>（1） 通过在vue.config.js中配置proxy实现跨域 （开发阶段）<br />（2） 通过Nginx服务器代理实现跨域 (生产阶段)<br />##　2. Nginx服务器代理<br />Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器<br />可以实现vue项目中的跨域请求<br />我们真实的服务器不应该直接暴露到公网上去，否则更加容易泄露服务器的信息，也更加容易受到攻击。一个比较“平民化”的方案是使用Nginx反向代理它。<br />一台具有公网的Nginx服务器可以代理和它能进行内网通信的真实的服务器。让我们的服务器不直接对外暴露，增加其抗风险能力。<br><a name="b4cbbc0a"></a></p><h3 id="２-1-下载"><a href="#２-1-下载" class="headerlink" title="２.1 下载"></a>２.1 下载</h3><p><a href="http://nginx.org/en/download.html%7C">http://nginx.org/en/download.html|</a>  <a href="http://nginx.org/download/nginx-1.10.3.zip">nginx/Windows-1.10.3</a> |<br><a name="4e259998"></a></p><h3 id="2-2-nginx在windows系统中如何启动、重启、停止"><a href="#2-2-nginx在windows系统中如何启动、重启、停止" class="headerlink" title="2.2 nginx在windows系统中如何启动、重启、停止"></a>2.2 nginx在windows系统中如何启动、重启、停止</h3><p>在nginx文件夹中打开cmd<br />（如果是powershell不能直接使用cmd命令：  输入cmd回车即可）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">基本命令操作：<br>查看nginx的版本号：nginx -v<br>启动nginx：start nginx<br>快速停止或关闭nginx：nginx -s <span class="hljs-keyword">stop</span><br>正常停止或关闭nginx：nginx -s <span class="hljs-keyword">quit</span><br>配置文件nginx.<span class="hljs-keyword">conf</span>修改重装载命令：nginx -s reload<br></code></pre></td></tr></table></figure><p><a name="759c0c5e"></a></p><h3 id="2-3-启动nginx"><a href="#2-3-启动nginx" class="headerlink" title="2.3 启动nginx"></a>2.3 启动nginx</h3><p>start nginx<br />在地址栏输入： localhost:80即可打开默认首页<br><a name="c0720ba8"></a></p><h3 id="2-4-修改前端vue项目中的url"><a href="#2-4-修改前端vue项目中的url" class="headerlink" title="2.4 修改前端vue项目中的url"></a>2.4 修改前端vue项目中的url</h3><p>在config.js中修改baseURL</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>原设置<br>baseURL: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span><br><span class="hljs-regexp">//</span>修改为<br>baseURL: <span class="hljs-string">&#x27;/api&#x27;</span><br></code></pre></td></tr></table></figure><p><a name="db767b39"></a></p><h3 id="2-5-打包vue项目"><a href="#2-5-打包vue项目" class="headerlink" title="2.5 打包vue项目"></a>2.5 打包vue项目</h3><p>npm run build<br />把dist文件夹放在nginx根目录<br><a name="10b53037"></a></p><h3 id="2-6-修改nginx的-conf-nginx-conf"><a href="#2-6-修改nginx的-conf-nginx-conf" class="headerlink" title="2.6 修改nginx的 conf/nginx.conf"></a>2.6 修改nginx的 conf/nginx.conf</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>      listen       <span class="hljs-number">80</span>;  <span class="hljs-comment">#nginx服务器端口</span><br>      server_name  localhost;  <span class="hljs-comment">#nginx域名</span><br><br>      location / &#123;<br>          root   dist; <span class="hljs-comment">#首页所在文件夹</span><br>          index  index.html index.htm;<br>      &#125;<br><br>      location <span class="hljs-regexp">/api/</span> &#123;<br>         proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3000</span>; <span class="hljs-comment"># 将/api/开头的url转向该域名</span><br>         rewrite <span class="hljs-string">&quot;^/api/(.*)$&quot;</span> <span class="hljs-regexp">/$1 break; /</span><span class="hljs-regexp">/最终url中去掉/</span>api前缀<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p><a name="04829109"></a></p><h3 id="2-7-重载nginx-浏览"><a href="#2-7-重载nginx-浏览" class="headerlink" title="2.7 重载nginx,浏览"></a>2.7 重载nginx,浏览</h3><p>nginx -s reload</p><blockquote><p>3000端口的服务器要打开</p></blockquote><p><a name="44f3bc0f"></a></p><h3 id="2-8-vue中history模式的服务器端配置"><a href="#2-8-vue中history模式的服务器端配置" class="headerlink" title="2.8 vue中history模式的服务器端配置"></a>2.8 vue中history模式的服务器端配置</h3><p>vue中设置history模式</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-keyword">base</span>: process.env.BASE_URL,<br>  routes,<br>  mode: <span class="hljs-string">&#x27;history&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>修改nginx的conf/nginx.conf</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html;<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>    listen       <span class="hljs-number">80</span>;  <span class="hljs-comment">#nginx服务器端口</span><br>    server_name  localhost;  <span class="hljs-comment">#nginx域名</span><br><br>    location / &#123;<br>        root   dist; <span class="hljs-comment">#首页所在文件夹</span><br>        index  index.html index.htm;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html;<br>    &#125;<br><br>    location <span class="hljs-regexp">/api/</span> &#123;<br>       proxy_pass   http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3000</span>; <span class="hljs-comment"># 将/api/开头的url转向该域名</span><br>       rewrite <span class="hljs-string">&quot;^/api/(.*)$&quot;</span> <span class="hljs-regexp">/$1 break; /</span><span class="hljs-regexp">/最终url中去掉/</span>api前缀<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>单页面开发应用的注意事项（2）</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/16-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%882%EF%BC%89/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/16-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a name="IhNWE"></a></p><h1 id="十八、-在vue-config-js中配置路径别名"><a href="#十八、-在vue-config-js中配置路径别名" class="headerlink" title="十八、 在vue.config.js中配置路径别名"></a>十八、 在vue.config.js中配置路径别名</h1><ol><li><p>引入path模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>配置路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">dir</span>) &#123;<br>    <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">join</span>(__dirname, dir)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在module.exports &#x3D; {}中添加配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//设置路径别名</span><br><span class="hljs-title function_">chainWebpack</span>(<span class="hljs-params">config</span>) &#123;<br>    config.<span class="hljs-property">resolve</span>.<span class="hljs-property">alias</span><br>    <span class="hljs-comment">//用com这个别名代表./src/components的完整路径</span><br>    .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;com&#x27;</span>, <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/components&#x27;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ePDfA"></a></p></li></ol><h1 id="十九-API接口的代理（服务器代理）"><a href="#十九-API接口的代理（服务器代理）" class="headerlink" title="十九.  API接口的代理（服务器代理）"></a>十九.  API接口的代理（服务器代理）</h1><ol><li><p>开启express,并连接数据库，请求数据库中的接口<br />2. 在vue.config.js，devServer这一项增加配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost/api&#x27;</span>,   <span class="hljs-comment">// express开启的服务器</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前端请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/show&quot;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> &#123; data &#125; = res;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">sellInfo</span> = data<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sellInfo</span>);<br>  &#125;)<br></code></pre></td></tr></table></figure></li><li><p>遍历图片的解决方案</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in sellInfo&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;item.goodsname&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;require(`../assets/imgs/$&#123;item.picurl&#125;`)&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="OhblZ"></a></p></li></ol><h1 id="二十、-用mock-js来模拟数据"><a href="#二十、-用mock-js来模拟数据" class="headerlink" title="二十、 用mock.js来模拟数据"></a>二十、 用mock.js来模拟数据</h1><ol><li>安装   npm i mockjs -S<br />2. 在根目录创建mock文件夹—&gt;mock.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><br><span class="hljs-comment">// Mock.setup(&#123; //表示 400 毫秒 后才会返回响应内容；</span><br><span class="hljs-comment">//     timeout: 400</span><br><span class="hljs-comment">// &#125;)</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">setup</span>(&#123;<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-string">&#x27;2000-6000&#x27;</span> <span class="hljs-comment">//表示响应时间介于 200 和 600 毫秒之间。默认值是&#x27;10-100&#x27;。</span><br>&#125;)<br><br><span class="hljs-comment">// 拦截请求： 用正则是要匹配不同的传参</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;/api/getFindList.php&#x27;</span>+<span class="hljs-string">&#x27;.*&#x27;</span>),<span class="hljs-string">&#x27;get&#x27;</span>,&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;请求成功&quot;</span>,<br>  <span class="hljs-string">&quot;data|20&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//cname 中文，name 英文</span><br>    <span class="hljs-string">&quot;userId|+1&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;lastDate&quot;</span>: <span class="hljs-string">&quot;@datetime&quot;</span>,<br>    <span class="hljs-string">&quot;other&quot;</span>:<span class="hljs-string">&quot;公众号：honeyBadger8,宝剑锋从磨砺出，梅花香自苦寒来，做有温度的攻城狮!&quot;</span><br>  &#125;]<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>在main.js中全局引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../mock/mock.js&#x27;</span><br></code></pre></td></tr></table></figure>然后就可以全局的拦截配置好的url的请求，并响应自定义的数据<br />在和真正的后端接口联调时，只需把import ‘..&#x2F;mock&#x2F;mock.js’ 注释掉即可<br><a name="hRJf7"></a></li></ol><h1 id="二十一、滚动插件：-better-scroll的使用"><a href="#二十一、滚动插件：-better-scroll的使用" class="headerlink" title="二十一、滚动插件： better-scroll的使用"></a>二十一、滚动插件： better-scroll的使用</h1><p>网址： <a href="https://github.com/ustbhuangyi/better-scroll">https://github.com/ustbhuangyi/better-scroll</a></p><ol><li>安装包</li></ol><p>npm i better-scroll –save </p><ol start="2"><li>引入包</li></ol><p>import BScroll from ‘better-scroll’ </p><ol start="3"><li><p>在mounted()中初始化滚动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BScroll</span>(dom元素)<br><span class="hljs-comment">// 例如：this.$refs.cityList即滚动元素的dom</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BScroll</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">cityList</span>) <br></code></pre></td></tr></table></figure></li><li><p>滚动到相应的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span>.<span class="hljs-title function_">scrollToElement</span>(dom元素)<br><span class="hljs-comment">// 例：this.cityScroll.scrollToElement(this.$refs.word[index])</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span>.<span class="hljs-title function_">scrollToElement</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">word</span>[index]，<span class="hljs-number">800</span>)<span class="hljs-comment">//平滑滚动</span><br></code></pre></td></tr></table></figure></li><li><p>滚动监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BScroll</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">cityList</span>, &#123;<br><span class="hljs-attr">probeType</span>: <span class="hljs-number">2</span><br>  <br>&#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-function"><span class="hljs-params">pos</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">posY</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(pos.<span class="hljs-property">y</span>)<br>&#125;); <br></code></pre></td></tr></table></figure><blockquote><p>probe 侦测<br>0,1   都是不侦测<br>2   在手指滚动的过程中侦测，手指离开后的惯性滚动过程中不侦测<br>3   只要是滚动，都侦测</p></blockquote></li><li><p>添加监听和移除监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-title function_">handlerScroll</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;<br>添加： <span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;scroll&quot;</span>,handlerScroll)<br>移除： <span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span>.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;scroll&quot;</span>,handlerScroll)<br></code></pre></td></tr></table></figure></li><li><p>滚动区域的元素无法监听到click事件的解决方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">cityScroll</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BScroll</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">cityList</span>, &#123;<br>  <span class="hljs-attr">probeType</span>: <span class="hljs-number">2</span>，<br>  <span class="hljs-attr">click</span>: <span class="hljs-literal">true</span><br>&#125;); <br></code></pre></td></tr></table></figure></li></ol><p>注意：better-scroll不滚动需要注意的事项</p><ol><li>绿色部分为 wrapper，也就是父容器，它会有固定的高度。 </li><li>黄色部分为 content，它是父容器的第一个子元素，它的高度会随着内容的大小而撑高。 </li><li>当 content 的高度不超过父容器的高度，是不能滚动的，<br />而它一旦超过了父容器的高度，我们就可以滚动内容区了，这就是 BetterScroll 的滚动原理。</li></ol><p><a name="ReiSB"></a></p><h1 id="二十三、Bus总线的使用"><a href="#二十三、Bus总线的使用" class="headerlink" title="二十三、Bus总线的使用"></a>二十三、Bus总线的使用</h1><p>注意事项：  必须首先初始化B.vue,在A.vue中的操作才有效，才能被B监听到send事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 在main.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Bus</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>();<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Bus</span> = <span class="hljs-title class_">Bus</span><br><br><span class="hljs-comment">// 2. A.vue  单击按钮，传递数据</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">send</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">Bus</span>.$emit(<span class="hljs-string">&quot;send&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 3. B.vue: 接收数据</span><br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">Bus</span>.$on(<span class="hljs-string">&quot;send&quot;</span>,<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mt53K"></a></p><h1 id="二十四、Vuex状态管理器使用"><a href="#二十四、Vuex状态管理器使用" class="headerlink" title="二十四、Vuex状态管理器使用"></a>二十四、Vuex状态管理器使用</h1><p>复杂组件关系中共享数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 创建 store/index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br><br>&#125;)<br><br><span class="hljs-comment">// 2. 在main.js中引入</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>  router,<br>  store<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-comment">// 3. VueX的属性</span><br>(<span class="hljs-number">1</span>)<span class="hljs-attr">state</span>: 存储数据<br>(<span class="hljs-number">2</span>) <span class="hljs-attr">actions</span>: 异步的http请求应该放在actions<br>(<span class="hljs-number">3</span>)<span class="hljs-attr">mutations</span>: <br>  a. actions可以调用mutation来改变state中的数据<br>  b. 如果数据的处理不需要调用后端接口,也可以通过组件直接调用mutation来改变state中的数据<br>(<span class="hljs-number">4</span>)<span class="hljs-attr">getters</span>: 类似于每个组件中计算属性<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/14-vue-cli/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/14-vue-cli/</url>
    
    <content type="html"><![CDATA[<p><a name="NzPtD"></a></p><h1 id="1-vue-cli脚手架"><a href="#1-vue-cli脚手架" class="headerlink" title="1.vue-cli脚手架"></a>1.vue-cli脚手架</h1><pre><code class="hljs"> vue.js有著名的全家桶系列，包含了vue-router，vuex， axios，再加上构建工具vue-cli（脚手架工具），就是一个完整的vue项目的核心构成。&lt;br /&gt;vue-cli这个构建工具大大降低了webpack的使用难度，支持热更新，有webpack-dev-server的支持，相当于启动了一个请求服务器，给你搭建了一个测试环境，只关注开发就OK。</code></pre><p><a name="NqKUA"></a></p><h3 id="1-1-安装vue-cli"><a href="#1-1-安装vue-cli" class="headerlink" title="1.1 安装vue-cli"></a>1.1 安装vue-cli</h3><p>官网  –&gt; 生态系统  –&gt; Vue CLI</p><ol><li>首先查看是否已安装过vue-cli<br />vue -V<br />&#x2F;&#x2F;如果有的话，且不是需要的版本，就用下面命令卸载<br />npm uninstall vue-cli -g </li><li>npm i  @vue&#x2F;cli -g<br />&#x2F;&#x2F;也可使用cnpm 来安装 ，比较快些 ( 安装cnpm的命令： npm i cnpm –g )<br />cnpm install @vue&#x2F;cli -g<br />安装成功后，可用vue -V查看版本  安装完成之后输入 vue -V（注意这里是大写的“V”），如果出现相应的版本号，则说明安装成功。</li><li>npm root -g 查看全局安装的位置<br><a name="uabM8"></a></li></ol><h1 id="2-用vue-cli来构建项目"><a href="#2-用vue-cli来构建项目" class="headerlink" title="2.用vue-cli来构建项目"></a>2.用vue-cli来构建项目</h1><p><a name="JVjlD"></a></p><h3 id="2-1-操作步骤"><a href="#2-1-操作步骤" class="headerlink" title="2.1 操作步骤"></a>2.1 操作步骤</h3><ol><li>vue create 项目名</li></ol><p>或者<br />vue ui 通过可视化，按步骤完成项目创建</p><ol start="2"><li>选择自定义配置  Manually select features </li><li>选择你需要的配置  <ul><li>Babel (必选)  </li><li>TypeScript（项目中使用ts开发的话，就勾选，暂时先不选中） </li><li>Progressive Web App (PWA) Support  (接口缓存，优化项目，不选)  </li><li>Router  （必选）</li><li>Vuex （必选）</li><li>CSS Pre-processors (css预处理器，必选)  </li><li>Linter &#x2F; Formatter (代码格式，不选)  </li><li>Unit Testing (代码测试，不选)  </li><li>E2E Testing（需求界面测试，不选）</li></ul></li><li>4.根据你选的配置进行Y&#x2F;N选择</li></ol><p><a name="BL1QW"></a></p><h3 id="2-2-对应图像效果"><a href="#2-2-对应图像效果" class="headerlink" title="2.2 对应图像效果"></a>2.2 对应图像效果</h3><p>上下箭头键切换<br />空格键选择或取消<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667743203988-61baee08-7835-4255-895c-070f7145d281.png#averageHue=%23080706&clientId=ufd526777-ffff-4&from=paste&height=491&id=u4e1e16df&name=image.png&originHeight=884&originWidth=974&originalType=binary&ratio=1&rotation=0&showTitle=false&size=288942&status=done&style=none&taskId=u7a6f2206-cc39-458f-8ed0-ef8b16cf6fb&title=&width=541.1111254456606" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667743215703-72f3344f-aee9-4078-ba12-0799f8586230.png#averageHue=%23060503&clientId=ufd526777-ffff-4&from=paste&height=462&id=u040fd1b8&name=image.png&originHeight=832&originWidth=974&originalType=binary&ratio=1&rotation=0&showTitle=false&size=229014&status=done&style=none&taskId=udef68f50-8ff1-4b39-b7d2-9567e67c80c&title=&width=541.1111254456606" alt="image.png"><br />安装完毕：<br />cd 项目名<br />npm run serve (运行项目)<br><a name="eiqHV"></a></p><h1 id="3-项目目录结构"><a href="#3-项目目录结构" class="headerlink" title="3.项目目录结构"></a>3.项目目录结构</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667743278530-e04315db-0cf1-437d-8606-db76bc663fa4.png#averageHue=%23677132&clientId=ufd526777-ffff-4&from=paste&height=550&id=ua00c7535&name=image.png&originHeight=990&originWidth=1274&originalType=binary&ratio=1&rotation=0&showTitle=false&size=257872&status=done&style=none&taskId=ud31395dc-c0a7-4dbe-a120-9926d01e461&title=&width=707.7777965274863" alt="image.png"><br><a name="nMddJ"></a></p><h1 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4.启动项目"></a>4.启动项目</h1><pre><code class="hljs">   服务启动成功后localhost:8080, 浏览器会默认打开一个“欢迎页面”&lt;br /&gt;![image.png](https://cdn.nlark.com/yuque/0/2022/png/22278242/1667743311467-6c8879c3-5df0-4258-bf68-4191896e9861.png#averageHue=%23fefefd&amp;clientId=ufd526777-ffff-4&amp;from=paste&amp;height=350&amp;id=ucb036873&amp;name=image.png&amp;originHeight=1508&amp;originWidth=1440&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6526682&amp;status=done&amp;style=none&amp;taskId=ufd7d996f-e9a4-4ef4-b5e0-5331ea786bb&amp;title=&amp;width=333.99481201171875)</code></pre><p><a name="Vqulq"></a></p><h1 id="5-打包上线"><a href="#5-打包上线" class="headerlink" title="5.打包上线"></a>5.打包上线</h1><p>注意，自己的项目文件都需要放到 src 文件夹下。<br />在项目开发完成之后，可以输入 npm run build 来进行打包工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br></code></pre></td></tr></table></figure><p>打包完成后，会生成 dist 文件夹</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>单页面卡法应用注意事项（1）</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/15-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%881%EF%BC%89/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/15-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a name="nwkhb"></a></p><h1 id="一-vue-是单文件组件"><a href="#一-vue-是单文件组件" class="headerlink" title="一. *.vue 是单文件组件"></a>一. *.vue 是单文件组件</h1><p>一个文件即为一个组件，同时也是一个ES的模块<br />文件中包含三部分： template script style<br />SPA（单页面应用）不利于搜索因此的SEO(搜索引擎优化)操作<br />特别是百度根本没办法抓取到SPA的内容页面</p><p><a name="DHp0T"></a></p><h1 id="二-页面级组件"><a href="#二-页面级组件" class="headerlink" title="二.页面级组件"></a>二.页面级组件</h1><p>创建在views文件夹中，而且，因为页面级组件都要实现跳转，所以是一级路由组件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">App</span>.vue中的&lt;router-<span class="hljs-keyword">view</span>&gt;就是一级路由组件展示的位置<br></code></pre></td></tr></table></figure><p><a name="XIk1h"></a></p><h1 id="三、注册路由"><a href="#三、注册路由" class="headerlink" title="三、注册路由"></a>三、注册路由</h1><p>大部分vue的第三方模块在引入后，需要用Vue.use进行注册</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">比如：Vue.<span class="hljs-keyword">use</span>(VueRouter)<br></code></pre></td></tr></table></figure><p><a name="ARVCR"></a></p><h1 id="四、路由配置"><a href="#四、路由配置" class="headerlink" title="四、路由配置"></a>四、路由配置</h1><p>是全局的，在整个单页面应用的跳转中都是要匹配路由配置的。</p><p><a name="JembI"></a></p><h1 id="五、路由配置中的模式（mode）"><a href="#五、路由配置中的模式（mode）" class="headerlink" title="五、路由配置中的模式（mode）"></a>五、路由配置中的模式（mode）</h1><p>路由配置中的模式（mode）有两种： hash(有#)   history (没#)<br />默认的mode为hash，如果想要使用history，就需要给mode添加history<br />在Router - index.js中修改配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123; <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    mode 默认为hash模式，路径前有#</span><br><span class="hljs-comment">    history历史记录模式，路径前面没有#</span><br><span class="hljs-comment">  */</span> <br>  <span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;history&#x27;</span>,<br>  <span class="hljs-attr">routes</span>:routes,<br>  <span class="hljs-attr">linkExactActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span> <br>&#125;) <br></code></pre></td></tr></table></figure><p>面试题：路由的hash和history模式的区别</p><ol><li>首先hash模式url带#号，history不带#号</li><li>hash模式前端路由修改的是hash值(#及以后)，对后端没影响，因此改变hash也不会重新加载页面，比如修改为了不存在的#123页面，页面不会跳转;<br />history模型刚好相反，没有对应的页面就会出现404<br><a name="QQ2R3"></a></li></ol><h1 id="六、路由的重定向"><a href="#六、路由的重定向" class="headerlink" title="六、路由的重定向"></a>六、路由的重定向</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-comment">// 重定向</span><br>  <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/index&#x27;</span><br>&#125;,<br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/index&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;index&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">Index</span><br>&#125;,<br></code></pre></td></tr></table></figure><p><a name="vIm4j"></a></p><h1 id="七、普通组件四步走"><a href="#七、普通组件四步走" class="headerlink" title="七、普通组件四步走"></a>七、普通组件四步走</h1><ol><li>定义<br />2. 在父组件中引入<br />3. 注册: components:{}<br />4. 在模板中使用</li></ol><p><a name="e4AIJ"></a></p><h1 id="八、路由组件四步走："><a href="#八、路由组件四步走：" class="headerlink" title="八、路由组件四步走："></a>八、路由组件四步走：</h1><ol><li>定义<br />2. 在router&#x2F;index.js中引入<br />3. 定义路由: {path:’’,component:’’}<br />4. 使用：  在任何一个需要的组件中：</li></ol><p><a name="ujIoa"></a></p><h1 id="九、路径别名："><a href="#九、路径别名：" class="headerlink" title="九、路径别名："></a>九、路径别名：</h1><p>路径别名：@&#x2F; 等价于 src&#x2F;<br />‘..&#x2F;..&#x2F;components&#x2F;FooterNav’</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme"><span class="hljs-symbol">&#x27;@/components/FooterNav</span>&#x27;<br></code></pre></td></tr></table></figure><p><a name="hjKZD"></a></p><h1 id="十、scoped的使用"><a href="#十、scoped的使用" class="headerlink" title="十、scoped的使用"></a>十、scoped的使用</h1><p>scoped 使当前组件的样式不会和其它组件冲突<br />使用 scoped 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件的 scoped CSS 和子组件的 scoped CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">*&#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>面试题：面试的时候也经常会被问到scoped<br />使当前组件的样式不会和其他组件冲突；<br />原理就是在css样式的后面添加了自定义属性<br><a name="yKPWA"></a></p><h1 id="十一、axios的使用"><a href="#十一、axios的使用" class="headerlink" title="十一、axios的使用"></a>十一、axios的使用</h1><ol><li>npm i axios –save<br />2. 在main.js中引入axios (不需要用Vue.use调用)</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">3</span>. Vue<span class="hljs-selector-class">.prototype</span>.<span class="hljs-variable">$axios</span> = axios  <br><br><span class="hljs-number">4</span>. 在任意vue文件中，可以直接用this.<span class="hljs-variable">$axios</span>来调用<br></code></pre></td></tr></table></figure><p><a name="xKamF"></a></p><h1 id="十二、后台接口"><a href="#十二、后台接口" class="headerlink" title="十二、后台接口"></a>十二、后台接口</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">1.</span> 在根目录创建vue.<span class="hljs-property">config</span>.<span class="hljs-property">js</span> (是webpack的配置文件，将会和webpack的默认配置合并在一起)<br><span class="hljs-number">2.</span> <br>   <br>    <span class="hljs-keyword">const</span> findList = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./mock/findList.json&quot;</span>);<br><br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>        <span class="hljs-title function_">before</span>(<span class="hljs-params">app</span>) &#123;<br>        <span class="hljs-comment">//   nodejs的后端路由</span><br>        app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/getFindList&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">//beauty</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">type</span> = req.<span class="hljs-property">query</span>.<span class="hljs-property">type</span><br>            res.<span class="hljs-title function_">json</span>(findList[<span class="hljs-keyword">type</span>])<br>        &#125;);<br>        &#125;<br>     &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure><p> 注意：vue.config.js代码有任何改动，都要重启服务器！！！</p><p><a name="wF3pU"></a></p><h1 id="十三、遍历数据"><a href="#十三、遍历数据" class="headerlink" title="十三、遍历数据"></a>十三、遍历数据</h1><p>遍历数据时，一定要添加key值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(item) in list&quot;</span> :key=<span class="hljs-string">&quot;item.id&quot;</span>&gt;&#123;&#123;item.<span class="hljs-property">title</span>&#125;&#125;&lt;/li&gt;<br></code></pre></td></tr></table></figure><p><a name="JGPLl"></a></p><h1 id="十四、图标字体的实现"><a href="#十四、图标字体的实现" class="headerlink" title="十四、图标字体的实现"></a>十四、图标字体的实现</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>. 在assets中创建fonts文件夹，放入字体文件<br><span class="hljs-number">2</span>. 在assets的css文件夹中，放入iconfont<span class="hljs-selector-class">.css</span><br><span class="hljs-number">3</span>. 在<span class="hljs-selector-tag">main</span>.js引入字体<br>    import <span class="hljs-string">&quot;@/assets/css/iconfont.css&quot;</span><br><span class="hljs-number">4</span>. 在任意组件中<br>    &lt;<span class="hljs-selector-tag">i</span> class=<span class="hljs-string">&quot;iconfont icon-xing&quot;</span>&gt;&lt;/i&gt;<br></code></pre></td></tr></table></figure><p><a name="NhDes"></a></p><h1 id="十五、swiper实现轮播图效果"><a href="#十五、swiper实现轮播图效果" class="headerlink" title="十五、swiper实现轮播图效果"></a>十五、swiper实现轮播图效果</h1><ol><li>npm i swiper –save<br />2. 在需要使用swiper的组件中引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Swiper</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;swiper&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;swiper/css/swiper.min.css&quot;</span>;<br></code></pre></td></tr></table></figure>3.在swiper的官网上粘贴基本结构<br />4.在mouted(){}中，new Swiper并进行配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123; <br>  <span class="hljs-keyword">let</span> mySwiper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swiper</span>(<span class="hljs-string">&quot;.swiper-container&quot;</span>, &#123;<br>    <span class="hljs-attr">autoplay</span>:&#123;<br>        <span class="hljs-attr">delay</span>:<span class="hljs-number">2000</span>,<br>        <span class="hljs-attr">stopOnLastSlide</span>:<span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">disableOnInteraction</span>:<span class="hljs-literal">true</span><br>    &#125;,<br>    loop : <span class="hljs-literal">true</span>, <span class="hljs-comment">// 首尾相连</span><br>    <span class="hljs-attr">pagination</span>:&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;.swiper-pagination&#x27;</span><br>    &#125;<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure>5.遍历图片显示轮播图<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in imgs&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;require(&#x27;../assets/imgs/&#x27;+item)&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- &lt;img :src=&quot;`../assets/imgs/$&#123;item&#125;`&quot;/&gt; 不能显示图片 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>6.引入图片之后轮播图不能进行切换<br />这是因为vue-cli在遍历数据之前先执行了new swiper的对象，所以，我们需要等异步的axios获取到的数据，渲染到页面上的时候再去执行new swiper的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-title function_">imgs</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">var</span> mySwiper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swiper</span> (<span class="hljs-string">&#x27;.swiper-container&#x27;</span>, &#123;<br>          <span class="hljs-attr">autoplay</span>:&#123;<br>            <span class="hljs-attr">delay</span>:<span class="hljs-number">2000</span>,<br>            <span class="hljs-attr">stopOnLastSlide</span>:<span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">disableOnInteraction</span>:<span class="hljs-literal">true</span><br>          &#125;,<br>          <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-comment">// 如果需要分页器</span><br>          <span class="hljs-comment">// 显示分页器必须是对象的格式</span><br>          <span class="hljs-attr">pagination</span>:&#123;<br>            <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;.swiper-pagination&#x27;</span><br>          &#125;<br>        &#125;)      <br>      &#125;)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ol><p><a name="QC9IS"></a></p><h1 id="十六、-vue-config-js-如果有变动，需要重启服务，才能应用新的功能"><a href="#十六、-vue-config-js-如果有变动，需要重启服务，才能应用新的功能" class="headerlink" title="十六、  vue.config.js 如果有变动，需要重启服务，才能应用新的功能"></a>十六、  vue.config.js 如果有变动，需要重启服务，才能应用新的功能</h1><p><a name="LaGVO"></a></p><h1 id="十七、-ES6的模块化-vue-cli"><a href="#十七、-ES6的模块化-vue-cli" class="headerlink" title="十七、 ES6的模块化(vue-cli)"></a>十七、 ES6的模块化(vue-cli)</h1><ol><li><p>模块 (单个的js， css, 第三方安装的模块)<br />2. 自定义模块  （js）<br />    (只能导出一个默认模块)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">...<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router (路由定义中导出路由对象)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> aa = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bb</span>(<span class="hljs-params"></span>)&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>引入模块<br />1）引入自定义的js，vue模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> 接口 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./路径&#x27;</span><br><span class="hljs-keyword">import</span> util <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./路径&#x27;</span><br><span class="hljs-keyword">import</span> &#123;aa&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./路径&#x27;</span><br></code></pre></td></tr></table></figure><p> 2）非模块化的js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@/assets/js/font-size.js&quot;</span><br></code></pre></td></tr></table></figure><p>3）css</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@/assets/css/iconfont.css&quot;</span><br></code></pre></td></tr></table></figure><p>4）第三方模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><p><a name="PEcCd"></a></p><h1 id="十八、解决方案"><a href="#十八、解决方案" class="headerlink" title="十八、解决方案"></a>十八、解决方案</h1><ol><li>sass 样式中带有红线</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668568704739-93b2da21-33b6-4a5b-8a1f-1c6586fc067e.png#averageHue=%23f7f6f5&clientId=u5bb62bb2-3d35-4&from=paste&height=157&id=u0b9974e7&name=image.png&originHeight=283&originWidth=450&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23416&status=done&style=none&taskId=ua7038560-b507-4c3e-92f2-6411f947ec2&title=&width=250.00000662273848" alt="image.png"><br />解决办法：<br />1.安装vetur插件<br />2.在settings.json中写入”files.associations”: { “*.vue”: “vue” }<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1668568767722-30c4525c-1167-40fa-a46d-aba668bdcb55.png#averageHue=%23f6f6f6&clientId=u5bb62bb2-3d35-4&from=paste&height=276&id=uf964da16&name=image.png&originHeight=496&originWidth=1600&originalType=binary&ratio=1&rotation=0&showTitle=false&size=89706&status=done&style=none&taskId=uea4ca499-436c-4e4f-9f9b-ae99989e479&title=&width=888.8889124364035" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>路由</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/13-%E8%B7%AF%E7%94%B1/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/13-%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<p><a name="eK7Rl"></a></p><h1 id="1-spa（单页面应用）"><a href="#1-spa（单页面应用）" class="headerlink" title="1.spa（单页面应用）"></a>1.spa（单页面应用）</h1><p>单页Web应用（single page web application，SPA），就是只有一张Web页面的应用。单页应用程序 (SPA) 是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。   浏览器一开始会加载必需的HTML、CSS和JavaScript，所有的操作都在这张页面上完成，都由JavaScript来控制。因此，对单页应用来说模块化的开发和设计显得相当重要。 <br />特点<br />1.速度：更好的用户体验，让用户在web app感受native app的速度和流畅。<br />2.MVVM：经典MVVM开发模式，前后端各负其责。<br />3.ajax：重前端，业务逻辑全部在本地操作，数据都需要通过AJAX同步、提交。<br />4.路由：在URL中采用#号来作为当前视图的地址,改变#号后的参数，页面并不会重载。 <br />例如：<br />输入：<a href="http://www.todolist.cn/getuser">http://www.todolist.cn/getuser</a>后，再输入<a href="http://www.todolist.cn/getgoods,">http://www.todolist.cn/getgoods,</a> 页面刷新              <br />而输入：<a href="http://www.todolist.cn/#/getuser">http://www.todolist.cn/#/getuser</a>后，再输入<a href="http://www.todolist.cn/#/getgoods,">http://www.todolist.cn/#/getgoods,</a> 页面不刷新，且可通过location对象分析路由的不同</p><p>单页Web应用（single page web application，SPA）是当今网站开发技术的弄潮儿，很多传统网站都在或者已经转型为单页Web应用，新的单页Web应用网站（包括移动平台上的）也如雨后春笋般涌现在人们的面前，如Gmail、Evernote、Trello等。如果你是一名Web开发人员，却还没开发过或者甚至是没有听说过单页应用，那你已经Out很久了。<br />单页Web应用和前端工程师们息息相关，因为主要的变革发生在浏览器端，用到的技术其实还是HTML+CSS+JavaScript，所有的浏览器都原生支持，当然有的浏览器因为具备一些高级特性，从而使得单页Web应用的用户体验更上一层楼。关于单页应用的优点和缺点，网上讲解的文章有很多，这里就不展开论述了。 单页Web应用，顾名思义，就是只有一张Web页面的应用。浏览器一开始会加载必需的HTML、CSS和JavaScript，之后所有的操作都在这张页面上完成，这一切都由JavaScript来控制。因此，单页Web应用会包含大量的JavaScript代码，复杂度可想而知，模块化开发和设计的重要性不言而喻。<br><a name="HPJ9j"></a></p><h1 id="2-路由"><a href="#2-路由" class="headerlink" title="2.路由"></a>2.路由</h1><ol><li>单页面应用中，视图的切换需要通过路由实现。</li><li>路由的特点： 在URL中采用#号来作为当前视图的地址,改变#号后的参数，页面并不会重载。</li></ol><p></p><p>如：<br />获取商品信息： <a href="http://www.baidu.com/#/getGoods">http://www.baidu.com/#/getGoods</a><br />获取用户信息: <a href="http://www.baidu.com/#/getUser3">http://www.baidu.com/#/getUser3</a></p><ol start="3"><li>前端路由根据#后内容的改变，而去请求不同的内容，但是实际访问的还是那个页面，因为#后不管如何改变，页面地址是不变的<br><a name="DrrPb"></a></li></ol><h1 id="3-路由的实现-美团路由"><a href="#3-路由的实现-美团路由" class="headerlink" title="3.路由的实现-美团路由"></a>3.路由的实现-美团路由</h1><p><a name="V5jZ5"></a></p><h3 id="第一步：-创建组件"><a href="#第一步：-创建组件" class="headerlink" title="第一步： 创建组件"></a>第一步： 创建组件</h3><p>创建组件 ：  首页、发现、订单、我的<br />引入路由插件<br /><script src="vue.js"></script><br /><script src="vue-router.js"></script></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Index</span> = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;首页&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br><span class="hljs-keyword">const</span>  <span class="hljs-title class_">Find</span> = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;发现&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br><br><span class="hljs-keyword">const</span>  <span class="hljs-title class_">Order</span> = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;订单&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br><span class="hljs-keyword">const</span>  <span class="hljs-title class_">My</span> = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;我的&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="csZUz"></a></p><h3 id="第二步：-配置路由"><a href="#第二步：-配置路由" class="headerlink" title="第二步： 配置路由"></a>第二步： 配置路由</h3><ol><li>每个路由都是一个对象，很多对象集合组成数组</li><li>当我们访问路由地址时，<router-view>这个内置组件就会被渲染为路由对应的组件内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Index</span> <br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/find&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Find</span> <br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/order&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Order</span> <br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/my&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">My</span> <br>  &#125;,<br><br>]<br></code></pre></td></tr></table></figure><a name="Q9X3m"></a></li></ol><h3 id="第三步：-创建路由对象"><a href="#第三步：-创建路由对象" class="headerlink" title="第三步： 创建路由对象"></a>第三步： 创建路由对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>: routes,<br>    <span class="hljs-attr">linkExactActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><p><a name="G67P7"></a></p><h3 id="第四步：-将router放入new-Vue中"><a href="#第四步：-将router放入new-Vue中" class="headerlink" title="第四步： 将router放入new Vue中"></a>第四步： 将router放入new Vue中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>      <span class="hljs-comment">// router: router</span><br>      router<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="OubFJ"></a></p><h3 id="第五步：-模板"><a href="#第五步：-模板" class="headerlink" title="第五步： 模板"></a>第五步： 模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>美团外卖<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/find&quot;</span>&gt;</span>发现<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/order&quot;</span>&gt;</span>订单<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/my&quot;</span>&gt;</span>我的<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="jNlS2"></a></p><h1 id="4-动态路由"><a href="#4-动态路由" class="headerlink" title="4.动态路由"></a>4.动态路由</h1><p>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。能够提供参数的路由即为动态路由<br />需求：<br />推荐列表：&#x2F;list?type&#x3D;recommend<br />丽人列表：&#x2F;list?type&#x3D;beauty<br />旅游列表：&#x2F;list?type&#x3D;travel<br />路由地址相同，都是要请求同一个组件，但携带参数不同，请求数据不同<br><a name="V04Ud"></a></p><h3 id="4-1-动态路由实现过程"><a href="#4-1-动态路由实现过程" class="headerlink" title="4.1 动态路由实现过程"></a>4.1 动态路由实现过程</h3><p><a name="NBr6T"></a></p><h4 id="第一步：-定义组件-List"><a href="#第一步：-定义组件-List" class="headerlink" title="第一步： 定义组件 List"></a>第一步： 定义组件 List</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">List</span> = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;&#123;&#123;this.$route.params&#125;&#125;商品&lt;/div&gt;</span><br><span class="hljs-string">      `</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="njybl"></a></p><h4 id="第二步：配置路由"><a href="#第二步：配置路由" class="headerlink" title="第二步：配置路由"></a>第二步：配置路由</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/list/:type&#x27;</span>, <br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">List</span><br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><a name="QRZ1c"></a></p><h4 id="第三步：-模板"><a href="#第三步：-模板" class="headerlink" title="第三步： 模板"></a>第三步： 模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/list/recommend&quot;</span>&gt;</span>推荐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/list/beauty&quot;</span>&gt;</span>丽人<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/list/travel&quot;</span>&gt;</span>旅行<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：</p><ol><li>当单击“推荐” 时，切换到&#x2F;list路由 ， 同时将参数值recommend传给路由中的type参数  （即type&#x3D;recommend）</li><li>在router-view中显示List组件, 同时，在组件内部可通过this.$route.params得到参数</li><li>不管怎么修改&#x2F;后面的内容，组件都不会再重新触发created钩子函数了。所以想要在js中获取到新的params值 需要监听$route的改变<br><a name="tUP27"></a></li></ol><h3 id="4-2-动态路由-（监听路由变化的两种写法）"><a href="#4-2-动态路由-（监听路由变化的两种写法）" class="headerlink" title="4.2 动态路由 （监听路由变化的两种写法）"></a>4.2 动态路由 （监听路由变化的两种写法）</h3><p>方法一：使用created获取<br />不推荐！created默认只会被触发一次，所以每次获取的都是相同的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">List</span> = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;&#123;&#123;this.$route.params&#125;&#125;商品&lt;/div&gt;</span><br><span class="hljs-string">    `</span>,<br>    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：使用updated<br />不可以！update也可以监听到其他数据的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">List</span> = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;&#123;&#123;this.$route.params&#125;&#125;商品&lt;/div&gt;</span><br><span class="hljs-string">    `</span>,<br>    <span class="hljs-title function_">updated</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>);<br>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>方案三：使用watch监听<br />不可以！每次点击都会重复请求，服务器压力过大</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">List</span> = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;&#123;&#123;this.$route.params&#125;&#125;商品&lt;/div&gt;</span><br><span class="hljs-string">    `</span>,<br>    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>);<br>    &#125;,<br>    <span class="hljs-attr">watch</span>:&#123;<br>      $route()&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>);<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">List</span> = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;&#123;&#123;this.$route.params&#125;&#125;商品&lt;/div&gt;</span><br><span class="hljs-string">      `</span>,<br>  <span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-string">&#x27;$route&#x27;</span>: &#123;<br>      <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>);<br>      &#125;,<br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">//（立刻）</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：使用immediate: true；这个属性，默认为false。其值代表是否以当前的初始值执行handler的函数。</p><p>方案四：最优解 keep-alive + created + key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;keep-alive&gt;<br>&lt;router-view :key=&quot;$route.fullPath&quot;&gt;&lt;/router-view&gt;<br>&lt;/keep-alive&gt;<br>&lt;script&gt;<br>  const List = &#123;<br>  template: `<br>        &lt;div&gt;&#123;&#123;this.$route.params&#125;&#125;商品&lt;/div&gt;<br>      `,<br>  created() &#123;<br>console.log(this.$route.params.type);<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><a name="RVIwj"></a></p><h1 id="5-获取路由参数的其他实现（-route-query）"><a href="#5-获取路由参数的其他实现（-route-query）" class="headerlink" title="5.获取路由参数的其他实现（$route.query）"></a>5.获取路由参数的其他实现（$route.query）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo?id=2&quot;</span>&gt;</span>去往id为2的链接<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;path: &#x27;/demo&#x27;, query:&#123;id: 3&#125;&#125;&quot;</span>&gt;</span>去往id为3的链接<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name: &#x27;demo&#x27;, query:&#123;id: 4&#125;&#125;&quot;</span>&gt;</span>去往id为3的链接<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> routes = [</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;demo&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/demo&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Demo</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  ]</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span><br><span class="language-javascript">    routes</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    router</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Demo</span> = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;div&gt;&#123;&#123;$route.query&#125;&#125;&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      `</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        fn (to, <span class="hljs-keyword">from</span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// to表示新的路由信息对象 from表示旧的路由信息对象</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(to.<span class="hljs-property">query</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;$route&#x27;</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">handler</span>: <span class="hljs-string">&#x27;fn&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="fG3ka"></a></p><h1 id="6-嵌套路由"><a href="#6-嵌套路由" class="headerlink" title="6.嵌套路由"></a>6.嵌套路由</h1><p>需求：<br />首页：   &#x2F;index<br />订单：   &#x2F;order<br />电影&#x2F;演出：   &#x2F;movie<br />电影&#x2F;演出中有：<br />电影：   &#x2F;movie&#x2F;movieMovie<br />商城：   &#x2F;food&#x2F;movieShop<br />演出：   &#x2F;food&#x2F;movieShow而<br />电影、商城、演出三个模块版式不同，所以并不适合用动态路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义所需组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Index</span> = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;首页&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Order</span> = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;订单&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Movie</span> = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;</span><br><span class="hljs-string">          &lt;div&gt;Movie版块&lt;/div&gt;</span><br><span class="hljs-string">          &lt;div&gt;</span><br><span class="hljs-string">              &lt;router-link to=&quot;/movie/movieMovie&quot;&gt;电影&lt;/router-link&gt;</span><br><span class="hljs-string">              &lt;router-link to=&quot;/movie/movieShop&quot;&gt;商城&lt;/router-link&gt;</span><br><span class="hljs-string">              &lt;router-link to=&quot;/movie/movieShow&quot;&gt;演出&lt;/router-link&gt;</span><br><span class="hljs-string">              &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">      &lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Cake</span> = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;电影&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Rice</span> = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;商城&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Egg</span> = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;演出&lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义路由</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/index&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/order&quot;</span>&gt;</span>订单<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/movie&quot;</span>&gt;</span>电影/演出<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>const routes = [<br>    &#123;<br>      path: &#x27;/&#x27;, <br>      component: Index<br>    &#125;,<br>    &#123;<br>      path: &#x27;/order&#x27;, <br>      component: Order<br>    &#125;,<br>    &#123;<br>      path: &#x27;/movie, <br>      component: Movie,<br>      children: [<br>          &#123;<br>            path: ‘movieMovie&#x27;, <br>            component:MovieMovie<br>          &#125;,<br>          &#123;<br>            path: ‘movieShop&#x27;, <br>            component:MovieShop<br>          &#125;,<br>          &#123;<br>            path: ‘movieShow&#x27;, <br>            component:MovieShow<br>          &#125;,<br>      ]<br>    &#125;<br>]<br>const router = new VueRouter(&#123;<br>  routes<br>&#125;)<br><br>const app = new Vue(&#123;<br>    el: &#x27;#app&#x27;,<br>    router<br>&#125;)<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="jtnqr"></a></p><h1 id="7-没有底部导航的路由跳转"><a href="#7-没有底部导航的路由跳转" class="headerlink" title="7.没有底部导航的路由跳转"></a>7.没有底部导航的路由跳转</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">// 定义路由所需的组件</span></span><br><span class="language-xml"><span class="language-handlebars">const Index = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    template: `</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span>&gt;</span>首页的页面<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/nearby&#x27;</span>&gt;</span>附近<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/find&#x27;</span>&gt;</span>发现<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    `</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">const  Find = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    template: `</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/index&#x27;</span>&gt;</span>回到首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>发现的页面<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            </span></span><br><span class="language-xml"><span class="language-handlebars">            </span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    `</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">const  Nearby = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    template: `</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/index&#x27;</span>&gt;</span>回到首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>附近的页面<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    `</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667742939866-828ae0c1-59aa-4579-87ee-f08cee1b1173.png#averageHue=%232b2c25&clientId=u2e53a63d-39d0-4&from=paste&height=500&id=u11aecfa2&name=image.png&originHeight=2560&originWidth=1351&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10395108&status=done&style=none&taskId=u16f33e84-e695-497e-881b-be684ba95c5&title=&width=263.9965515136719" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue的过渡和动画</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/12-vue%E7%9A%84%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/12-vue%E7%9A%84%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p><a name="lUjZR"></a></p><h1 id="1-单元素和组件的过渡"><a href="#1-单元素和组件的过渡" class="headerlink" title="1.单元素和组件的过渡"></a>1.单元素和组件的过渡</h1><p>Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入&#x2F;离开过渡</p><ul><li>条件渲染 (使用 v-if)</li><li>条件展示 (使用 v-show)</li><li>动态组件</li><li>组件根节点</li></ul><p>过渡案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.fade-enter-active</span>, <span class="hljs-selector-class">.fade-leave-active</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">5s</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><br><span class="language-css">  <span class="hljs-comment">/*.fade-enter, .fade-leave-to &#123;</span></span><br><span class="hljs-comment"><span class="language-css">    opacity: 0;</span></span><br><span class="hljs-comment"><span class="language-css">  &#125;*/</span></span><br><span class="language-css">  </span><br><span class="language-css">  <span class="hljs-selector-class">.fade-enter</span>&#123;</span><br><span class="language-css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">100px</span>,<span class="hljs-number">0</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><br><span class="language-css">  <span class="hljs-selector-class">.fade-leave-to</span> <span class="hljs-comment">/* .fade-leave-active below version 2.1.8 */</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">500px</span>,<span class="hljs-number">0</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>动画内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">toggle</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="AOij9"></a></p><h1 id="2-动画和过渡"><a href="#2-动画和过渡" class="headerlink" title="2.动画和过渡"></a>2.动画和过渡</h1><p><a name="hDmL0"></a></p><h3 id="2-1-过渡原理"><a href="#2-1-过渡原理" class="headerlink" title="2.1 过渡原理"></a>2.1 过渡原理</h3><p>当插入或删除包含在 transition 组件中的元素时，Vue 将会做以下处理：<br />自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加&#x2F;删除 CSS 类名。<br><a name="bQ6vc"></a></p><h3 id="2-2-过渡类名"><a href="#2-2-过渡类名" class="headerlink" title="2.2 过渡类名"></a>2.2 过渡类名</h3><p>在进入&#x2F;离开的过渡中，会有 6 个 class 切换。<br />v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。<br />v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。<br />v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡&#x2F;动画完成之后移除。<br />v-leave: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。<br />v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。<br />v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡&#x2F;动画完成之后移除。<br><a name="P1zjy"></a></p><h3 id="2-3-过渡类名"><a href="#2-3-过渡类名" class="headerlink" title="2.3 过渡类名"></a>2.3 过渡类名</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667741360214-4a10e73f-ee49-496e-9fe1-7aa10fdd00cc.png#averageHue=%23fbeeed&clientId=u4d4c7bd9-8471-4&from=paste&height=711&id=ue8f5e7b2&name=image.png&originHeight=1280&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9847664&status=done&style=none&taskId=u1ed958cd-4405-4aa5-aefd-53fab606fa1&title=&width=1422.2222598982455" alt="image.png"><br><a name="sb1Ma"></a></p><h1 id="3-css动画"><a href="#3-css动画" class="headerlink" title="3.css动画"></a>3.css动画</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 不需设置 v-enter和v-leave-to样式 */</span></span><br><span class="language-css">  <span class="hljs-selector-class">.bounce-enter-active</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">animation</span>: bounce-in .<span class="hljs-number">5s</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.bounce-leave-active</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">animation</span>: bounce-in .<span class="hljs-number">5s</span> reverse;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-keyword">@keyframes</span> bounce-in &#123;</span><br><span class="language-css">      <span class="hljs-number">0%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-number">50%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-number">100%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span>Toggle show<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bounce&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>Loremetus.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#example-2&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="XoAdj"></a></p><h1 id="4-多个元素的过渡"><a href="#4-多个元素的过渡" class="headerlink" title="4.多个元素的过渡"></a>4.多个元素的过渡</h1><p>当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，给在 <transition> 组件中的多个元素设置 key 是一个更好的实践。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.fade-enter-active</span>, <span class="hljs-selector-class">.fade-leave-active</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">5s</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">          </span><br><span class="language-css">    <span class="hljs-comment">/*.fade-enter, .fade-leave-to &#123;</span></span><br><span class="hljs-comment"><span class="language-css">      opacity: 0;</span></span><br><span class="hljs-comment"><span class="language-css">    &#125;*/</span></span><br><span class="language-css">  </span><br><span class="language-css">   <span class="hljs-selector-class">.fade-enter</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">100px</span>,<span class="hljs-number">0</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><br><span class="language-css">   <span class="hljs-selector-class">.fade-leave-to</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">500px</span>,<span class="hljs-number">0</span>);</span><br><span class="language-css">   &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>第一个动画内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>第二个动画内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667741532701-ff565401-f164-49c2-baab-9461f7302aae.png#averageHue=%232a2a23&clientId=u4d4c7bd9-8471-4&from=paste&height=224&id=u97f58483&name=image.png&originHeight=404&originWidth=686&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63372&status=done&style=none&taskId=u7e95194d-23a6-4ba2-8540-52cec9a88a2&title=&width=381.111121207108" alt="image.png"></p><p>多个组件的过渡简单很多 - 我们不需要使用 key 特性。相反，我们只需要使用动态组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.component-fade-enter-active</span>, <span class="hljs-selector-class">.component-fade-leave-active</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">transition</span>: opacity .<span class="hljs-number">3s</span> ease;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.component-fade-enter</span>, <span class="hljs-selector-class">.component-fade-leave-to</span>&#123;</span><br><span class="language-css">       <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;component-fade&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">view</span>: <span class="hljs-string">&#x27;v-a&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;v-a&#x27;</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;Component A&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;v-b&#x27;</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;Component B&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">toggle</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">view</span> == <span class="hljs-string">&#x27;v-a&#x27;</span>)&#123;</span><br><span class="language-javascript">                  <span class="hljs-variable language_">this</span>.<span class="hljs-property">view</span> = <span class="hljs-string">&#x27;v-b&#x27;</span></span><br><span class="language-javascript">              &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                  <span class="hljs-variable language_">this</span>.<span class="hljs-property">view</span> =  <span class="hljs-string">&#x27;v-a&#x27;</span></span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：如果在transition中添加appear, 则页面初始渲染时即出现过渡<transition name=”fade” appear></transition><br><a name="mHkfw"></a></p><h1 id="5-过渡模式"><a href="#5-过渡模式" class="headerlink" title="5.过渡模式"></a>5.过渡模式</h1><p>同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了 过渡模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span>  <br>  <span class="hljs-comment">&lt;!-- ... the buttons ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><p>in-out：新元素先进行过渡，完成之后当前元素过渡离开。<br />out-in：当前元素先进行过渡，完成之后新元素过渡进入。<br />应用场景 ：  v-if和v-else切换，或动态组件切换</p><p><a name="DA4oO"></a></p><h1 id="6-过渡和动画的区别"><a href="#6-过渡和动画的区别" class="headerlink" title="6.过渡和动画的区别"></a>6.过渡和动画的区别</h1><p>transition：<br />只能实现两种状态的过渡；<br />不能实现页面初始化时候的过渡；<br />需要有事件触发；<br />animation：<br />可以实现多种状态过渡；<br />可以实现页面初始化时候的过渡；<br />控制的比较多，可以无限循环；<br />还可以控制开始和结束的状态<br />最重要的区别：transition实现两种状态切换；animation 实现多种状态之间的过渡</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue的插槽-slot</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/11-vue%E7%9A%84%E6%8F%92%E6%A7%BD-slot/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/11-vue%E7%9A%84%E6%8F%92%E6%A7%BD-slot/</url>
    
    <content type="html"><![CDATA[<p><a name="k33cC"></a></p><h1 id="1-插槽"><a href="#1-插槽" class="headerlink" title="1.插槽"></a>1.插槽</h1><p>我们在构建页面过程中一般会把用的比较多的公共的部分抽取出来作为一个单独的组件，但是在实际使用这个组件的时候却又不能完全的满足需求，我希望在这个组件中添加一点东西，这时候我们就需要用到插槽来分发内容。<br />插槽的作用：让用户可以拓展组件，去更好地复用组件和对其做定制化处理<br />插槽分三种：  匿名插槽 、具名插槽、作用域插槽<br><a name="EGSYS"></a></p><h1 id="2-匿名插槽"><a href="#2-匿名插槽" class="headerlink" title="2.匿名插槽"></a>2.匿名插槽</h1><p>作用： 只有一个插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>斜体<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  const com = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的底部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    `</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="yW9y7"></a></p><h1 id="3-插槽的默认内容"><a href="#3-插槽的默认内容" class="headerlink" title="3.插槽的默认内容"></a>3.插槽的默认内容</h1><p>当子组件没有定制插槽内容时，显示默认值 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>斜体<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  const com = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的底部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    `</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="Ky6yT"></a></p><h1 id="4-具名插槽"><a href="#4-具名插槽" class="headerlink" title="4. 具名插槽"></a>4. 具名插槽</h1><p>当需要为子组件定义多个插槽时，要使用具名插槽 。 就是给这个插槽起个名字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span> <span class="hljs-attr">:</span> <span class="hljs-attr">header</span>&gt;</span><br>            漂亮<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>：<span class="hljs-attr">footer</span>&gt;</span><br>            帅气<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            默认的插槽<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  const com = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>子组件的标题<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的内容不变<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">             <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    `</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：一个不带 name 的 <slot> 出口会带有隐含的名字“default”<br><a name="UoFaj"></a></p><h1 id="5-作用域插槽"><a href="#5-作用域插槽" class="headerlink" title="5.作用域插槽"></a>5.作用域插槽</h1><p><strong>注</strong>：必须使用vue2.7以上的版本<br />如果让插槽内容能够访问子组件中才有的数据，需要使用作用域插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><br>            header<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 注：父组件模板中的data,为子组件slot作用域传递的对象 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>            footer: &#123;&#123;data.msg&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  const Com = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                msg: &#x27;子组件数据&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        template: `</span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>子组件的标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                // 注：slot用自定义属性将子组件的值传给父组件插槽</span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用组件的细节</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/10-%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/10-%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<p><a name="f03PR"></a></p><h1 id="1-特殊标签中组件的使用"><a href="#1-特殊标签中组件的使用" class="headerlink" title="1.特殊标签中组件的使用"></a>1.特殊标签中组件的使用</h1><p><a name="WHw11"></a></p><h3 id="组件应用中的注意事项"><a href="#组件应用中的注意事项" class="headerlink" title="组件应用中的注意事项"></a>组件应用中的注意事项</h3><ul><li>组件名首字母大写，在模板中应用时要转为小写，如果是两个单词，中间用”-“连接</li><li>template模板中只能有一个根元素</li><li>子组件中的data必须是一个有返回值的函数</li><li>特殊标签中组件的使用</li></ul><p>有些 HTML 元素，诸如<table> 和 <select>，对于哪些元素可以出现在其内部是有严格限制的。而有些元素，诸如 <tr> 和 <option>，只能出现在其它某些特定的元素内部。<br />html结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">row</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">row</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">row</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">row</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">row</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">row</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> row = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;&lt;tr&gt;行数据&lt;/tr&gt;&quot;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br><br>    &#125;,<br>    <span class="hljs-attr">components</span>:&#123;<br>        row<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>显示效果<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667736303480-959c15d5-79c7-48ec-ac2f-d1e1f684d10e.png#averageHue=%23f9f9f8&clientId=ud0258134-61e8-4&from=paste&height=256&id=ue2e9095d&name=image.png&originHeight=1440&originWidth=1561&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6755950&status=done&style=none&taskId=u878227a9-b230-4fbc-997e-07d42e3017e&title=&width=277.998291015625" alt="image.png"></p><p>解决方案：  只需修改模板 （用匹配的标签，添加is属性，指向相应的组件）<br />html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667736346831-610fdf1e-ac37-4410-bedf-ca5dd6533150.png#averageHue=%23f9f8f8&clientId=ud0258134-61e8-4&from=paste&height=285&id=u325babae&name=image.png&originHeight=1616&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6994109&status=done&style=none&taskId=uc0fb2f1d-070e-4ad2-83b2-f0a40c76cac&title=&width=253.99655151367188" alt="image.png"><br><a name="FONV8"></a></p><h1 id="2-ref"><a href="#2-ref" class="headerlink" title="2.ref"></a>2.ref</h1><p>ref可以获取模板中的原生DOM对象<br />有时候，我们的有些需求不是vue能够完成的，我们需要借助原生DOM<br />比如：滚动加载的时机 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在模板中添加ref属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module m2&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;goods&quot;</span>&gt;</span><br>    模块2<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 用$refs来获取对应的DOM --&gt;</span><br>var m2 = this.$refs.goods;<br></code></pre></td></tr></table></figure><p>使用方法：</p><ol><li>ref 加在普通的元素上，用this.$refs.（ref值） 获取到的是dom元素。</li><li>ref 加在子组件上，用this.$refs.（ref值） 获取到的是组件实例，可以使用组件的所有方法。</li></ol><p>在使用方法的时候直接this.$refs.（ref值）.方法（） 就可以使用了。</p><ol start="3"><li>如何利用 v-for 和 ref 获取一组数组或者dom 节点。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span>这是p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in food&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;index%2==0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;goods&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">food</span>:[<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;橘子&#x27;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><a name="SguN8"></a></li></ol><h1 id="3-nextTick"><a href="#3-nextTick" class="headerlink" title="3.nextTick"></a>3.nextTick</h1><p>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。<br />简单来说，Vue在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新<br />因为当我们进行改变数据的时候，此时会进行执行三个过程</p><ol><li>执行watch函数</li><li>更新dom元素</li><li>执行相关的生命周期函数</li></ol><p>nextTick案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;msgDiv&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;msg1&quot;</span>&gt;</span>Message got outside $nextTick: &#123;&#123;msg1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;msg2&quot;</span>&gt;</span>Message got inside $nextTick: &#123;&#123;msg2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;msg3&quot;</span>&gt;</span>Message got outside $nextTick: &#123;&#123;msg3&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeMsg&quot;</span>&gt;</span><br>        Change the Message<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;.app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Hello Vue.&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">msg1</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">msg2</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">msg3</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeMsg</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&quot;Hello world.&quot;</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg1</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">msgDiv</span>.<span class="hljs-property">innerHTML</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg2</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">msgDiv</span>.<span class="hljs-property">innerHTML</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg3</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">msgDiv</span>.<span class="hljs-property">innerHTML</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考文档：<a href="https://blog.csdn.net/weixin_47450807/article/details/123111284">https://blog.csdn.net/weixin_47450807&#x2F;article&#x2F;details&#x2F;123111284</a><br />插入知识点：宏任务和微任务<br><a name="ojlon"></a></p><h1 id="4-props"><a href="#4-props" class="headerlink" title="4.props"></a>4.props</h1><p><a name="ez2Lg"></a></p><h3 id="4-1-数据类型"><a href="#4-1-数据类型" class="headerlink" title="4.1 数据类型"></a>4.1 数据类型</h3><p>props可以是数组类型，也可以是对象类型。<br />语法格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 数组类型：</span><br><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;likes&#x27;</span>, <span class="hljs-string">&#x27;isPublished&#x27;</span>, <span class="hljs-string">&#x27;commentIds&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>]<br><span class="hljs-comment">// 对象类型：</span><br><span class="hljs-attr">props</span>: &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">likes</span>: <span class="hljs-title class_">Number</span>,<br>  <span class="hljs-attr">isPublished</span>: <span class="hljs-title class_">Boolean</span>,<br>  <span class="hljs-attr">commentIds</span>: <span class="hljs-title class_">Array</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-title class_">Object</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通常你希望每个 prop 都有指定的值类型。<br />这时，你可以以对象形式列出 prop，这些属性的名称和值分别是 prop 各自的名称和类型。<br />这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。<br><a name="Ke08B"></a></p><h3 id="4-2-props单向数据流"><a href="#4-2-props单向数据流" class="headerlink" title="4.2 props单向数据流"></a>4.2 props单向数据流</h3><p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。<br />额外的，每次父级组件发生更新时，子组件中所有的 prop 都将刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。<br />如果需要改变props接收的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;initialCounter&#x27;</span>],<br><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">initialCounter</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="T9jq8"></a></p><h3 id="4-3-props验证"><a href="#4-3-props验证" class="headerlink" title="4.3 props验证"></a>4.3 props验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">// 基础的类型检查 (`null` 匹配任何类型)</span><br>    <span class="hljs-attr">propA</span>: <span class="hljs-title class_">Number</span>,<br>    <span class="hljs-comment">// 多个可能的类型</span><br>    <span class="hljs-attr">propB</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>    <span class="hljs-comment">// 必填的字符串</span><br>    <span class="hljs-attr">propC</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的数字</span><br>    <span class="hljs-attr">propD</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>        <span class="hljs-attr">default</span>: <span class="hljs-number">100</span><br>    &#125;,<br><span class="hljs-comment">// 带有默认值的对象</span><br>    <span class="hljs-attr">propE</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>        <span class="hljs-comment">// 对象或数组默认值必须从一个工厂函数获取</span><br>        <span class="hljs-attr">default</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span> &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 自定义验证函数</span><br>    <span class="hljs-attr">propF</span>: &#123;<br>        <span class="hljs-attr">validator</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>          <span class="hljs-comment">// 这个值必须匹配下列字符串中的一个</span><br>          <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>].<span class="hljs-title function_">indexOf</span>(value) !== -<span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>  &#125;<br>&#125;)    <br></code></pre></td></tr></table></figure><p><a name="cKStp"></a></p><h1 id="5-动态组件"><a href="#5-动态组件" class="headerlink" title="5.动态组件"></a>5.动态组件</h1><p>component 不是html的原生标签，他是vue的自定义组件；<br />这个自定义组件是vue提前写好的，预制的组件，vue的内置组件，不需要我们自己定义<br />他有一个属性is，这个is指向谁，这个组件就会渲染谁<br />案例：如果像下面需求，需要在点击不同标签时，动态切换下方组件，可以用动态组件解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> comA = &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;p&gt;comA组件的内容&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">    `</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> comB = &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;p&gt;comB组件的内容&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">    `</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">com</span>: <span class="hljs-string">&#x27;com-a&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">        comA,</span><br><span class="language-javascript">        comB</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">       <span class="hljs-title function_">toggle</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">com</span> == <span class="hljs-string">&#x27;com-a&#x27;</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">com</span> = <span class="hljs-string">&#x27;com-b&#x27;</span></span><br><span class="language-javascript">          &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">com</span> = <span class="hljs-string">&#x27;com-a&#x27;</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">       &#125; </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="peWjE"></a></p><h1 id="6-keep-alive组件"><a href="#6-keep-alive组件" class="headerlink" title="6.keep-alive组件"></a>6.keep-alive组件</h1><p><a name="FpB21"></a></p><h3 id="6-1-什么是keep-alive"><a href="#6-1-什么是keep-alive" class="headerlink" title="6.1 什么是keep-alive"></a>6.1 什么是keep-alive</h3><p>重新创建动态组件的行为通常是非常有用的，但是在这个案例中，我们更希望那些标签的组件实例能够被在它们第一次被创建的时候缓存下来。为了解决这个问题，我们可以用一个 <keep-alive> 元素将其动态组件包裹起来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 失活的组件将会被缓存！--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667740620209-e6d0afd4-c409-46d0-933d-410d54672b30.png#averageHue=%23fbfafa&clientId=ud0258134-61e8-4&from=paste&height=143&id=u882e223d&name=image.png&originHeight=699&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5377778&status=done&style=none&taskId=udbed5270-ef5c-4157-8043-e706cc84394&title=&width=521.998291015625" alt="image.png"><br /><strong>注意</strong>：这个 <keep-alive> 要求被切换到的组件都有自己的名字，不论是通过组件的 name 选项还是局部&#x2F;全局注册。<br><a name="K5Nws"></a></p><h3 id="6-2-keep-alive的生命周期钩子"><a href="#6-2-keep-alive的生命周期钩子" class="headerlink" title="6.2 keep-alive的生命周期钩子"></a>6.2 keep-alive的生命周期钩子</h3><p>activated:   keep-alive 组件激活时调用<br />deactivated:  keep-alive 组件停用时调用<br />include和exclude属性： 可定义哪些组件被缓存,   参数为组件定义中的name属性</p><ul><li>include 字符串，数组或正则表达式。只有名称匹配的组件会被缓存。</li><li>exclude 字符串，数组或正则表达式。任何名称匹配的组件都不会缓存。</li><li>max 数字。最多可以缓存多少组件实例。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> comA = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-comment">// 必须添加name只，因为include中写的就是name只</span></span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;p&gt;comA组件的内容&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span>,</span><br><span class="language-javascript">        <span class="hljs-comment">// created 和 destroyed是用来判断组件是否被销毁</span></span><br><span class="language-javascript">        <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;created-coma&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;destroyed-coma&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// activated 和 deactivated 是用来判断组件被激活停用的状态</span></span><br><span class="language-javascript">        <span class="hljs-title function_">activated</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;coma ---- activated&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">deactivated</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;coma ---- deactivated&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> comB = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;two&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;p&gt;comB组件的内容&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">com</span>: <span class="hljs-string">&#x27;com-a&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            comA,</span><br><span class="language-javascript">            comB</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">toggle</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">com</span> == <span class="hljs-string">&#x27;com-a&#x27;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">com</span> = <span class="hljs-string">&#x27;com-b&#x27;</span></span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">com</span> = <span class="hljs-string">&#x27;com-a&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>父子组件传值案例</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/9-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E6%A1%88%E4%BE%8B/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/9-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p><a name="xKhJE"></a></p><h1 id="案例1-使用组件化实现Todolist效果"><a href="#案例1-使用组件化实现Todolist效果" class="headerlink" title="案例1:使用组件化实现Todolist效果"></a>案例1:使用组件化实现Todolist效果</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>TodoList案例<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入内容 --&gt;</span><br><span class="hljs-comment">&lt;!-- 1. 回车添加数据  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span> @<span class="hljs-attr">keydown.enter</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 待办列表 --&gt;</span><br>    <span class="hljs-comment">&lt;!--  5. 使用组件</span><br><span class="hljs-comment">      父传子isok：判断是否完成</span><br><span class="hljs-comment">      父传子num：完成/未完成的数量</span><br><span class="hljs-comment">      @toggle：接收子组件传递的数据</span><br><span class="hljs-comment">      @del：接收子组件传递的数据</span><br><span class="hljs-comment">  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">:isok</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">:num</span>=<span class="hljs-string">&quot;happening&quot;</span> @<span class="hljs-attr">toggle</span>=<span class="hljs-string">&quot;addFinish&quot;</span> @<span class="hljs-attr">del</span>=<span class="hljs-string">&quot;del&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot; &#x27;正在进行&#x27; &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 已完成列表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com</span> <span class="hljs-attr">:list</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">:isok</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:num</span>=<span class="hljs-string">&quot;finish&quot;</span>  @<span class="hljs-attr">toggle</span>=<span class="hljs-string">&quot;addFinish&quot;</span> @<span class="hljs-attr">del</span>=<span class="hljs-string">&quot;del&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot; &#x27;已完成&#x27; &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3. 创建组件配置项</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Com</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;isok&#x27;</span>, <span class="hljs-string">&#x27;num&#x27;</span>,<span class="hljs-string">&#x27;title&#x27;</span>],</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;h2&gt;&#123;&#123;title&#125;&#125; ---&#123;&#123;num&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;li v-for=&quot;(item,index) in list&quot; v-if=&quot;item.isok == isok&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                        &lt;input type=&quot;checkbox&quot; @click=&quot;toggle(index)&quot;  :checked=&quot;item.isok?true:false&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                        &lt;span&gt;&#123;&#123;item.text&#125;&#125;&lt;/span&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                        &lt;button @click=&quot;del(index)&quot;&gt;删除&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;/li&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;/ul&gt; </span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">toggle</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;toggle&#x27;</span>, index);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">del</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;del&#x27;</span>, index);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">list</span>: []</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 6. 改变完成/未完成状态</span></span><br><span class="language-javascript">            <span class="hljs-title function_">addFinish</span>(<span class="hljs-params">index</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[index].<span class="hljs-property">isok</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[index].<span class="hljs-property">isok</span>;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">del</span>(<span class="hljs-params">index</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 使用splic删除数据</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">splice</span>(index,<span class="hljs-number">1</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 2. 默认添加数据的isok状态为false</span></span><br><span class="language-javascript">            <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">text</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">isok</span>:<span class="hljs-literal">false</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 计算正在进行，</span></span><br><span class="language-javascript">            <span class="hljs-title function_">happening</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123; <span class="hljs-keyword">return</span> item.<span class="hljs-property">isok</span> == <span class="hljs-literal">false</span> &#125;).<span class="hljs-property">length</span>;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">finish</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123; <span class="hljs-keyword">return</span> item.<span class="hljs-property">isok</span> &#125;).<span class="hljs-property">length</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 4. 注册组件</span></span><br><span class="language-javascript">            <span class="hljs-title class_">Com</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="CZc4d"></a></p><h1 id="案例2-城市选择组件化"><a href="#案例2-城市选择组件化" class="headerlink" title="案例2:城市选择组件化"></a>案例2:城市选择组件化</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 4.添加组件样式  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    *&#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span>,<span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.city-list</span> <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:<span class="hljs-number">#000</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.city-list</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">5</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 侧边字母样式 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.letter</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: auto;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.letter</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- loadding效果 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>loading<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  3. 使用组件  --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 城市列表组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">city-list</span> <span class="hljs-attr">:city-list</span>=<span class="hljs-string">&quot;cityList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">city-list</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 字母列表组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">letter</span> <span class="hljs-attr">:letter-list</span>=<span class="hljs-string">&quot;letterList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">letter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/city.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 5. 获取数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">CityList</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;cityList&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>],</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;div class=&quot;city-list&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;li v-for=&quot;(val,key,index) in cityList&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;p&gt;&#123;&#123;key&#125;&#125;&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;ul v-for=&quot;item in val&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                        &lt;li&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;/ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;/li&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">listHeight</span>:[] <span class="hljs-comment">// 保存每个li的高度</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 这里可以获取到div，但是只有ul标签，ul下面没有任何内容</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(this.$refs);</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">updated</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 现获取第一个元素的高度</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(this.$refs);</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">listHeight</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">classItem</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> item.<span class="hljs-property">offsetTop</span>;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 使用watch监听index的变化，只要数据发生变化，就让页面滑动</span></span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// document.documentElement.scrollTop = this.listHeight[this.index];</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 带有滚动效果</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">top</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">listHeight</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>],</span><br><span class="language-javascript">                    <span class="hljs-attr">behavior</span>:<span class="hljs-string">&quot;smooth&quot;</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Letter</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;letterList&#x27;</span>],</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">activeIndex</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;div class=&quot;letter&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;li v-for=&quot;(item,index) in letterList&quot; @click=&quot;toggle(index)&quot; :class=&quot;activeIndex == index ? &#x27;active&#x27;:&#x27;&#x27;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">toggle</span>(<span class="hljs-params">index</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;toggle&quot;</span>,index);</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span> = index; <span class="hljs-comment">// 右侧按钮添加聚焦效果</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">cityList</span>:[],</span><br><span class="language-javascript">            <span class="hljs-attr">isShow</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">index</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 6. 模拟延迟获取数据</span></span><br><span class="language-javascript">            <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 8. 是否显示loadding效果</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 修改loadding的状态</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">cityList</span> = cityDate</span><br><span class="language-javascript">            &#125;,<span class="hljs-number">200</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取letter子组件传參</span></span><br><span class="language-javascript">          <span class="hljs-title function_">toggle</span>(<span class="hljs-params">index</span>)&#123;</span><br><span class="language-javascript">              <span class="hljs-comment">// 保存点击的是哪个字母</span></span><br><span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span> = index;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 2. 注册组件 </span></span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title class_">CityList</span>,</span><br><span class="language-javascript">            <span class="hljs-title class_">Letter</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 7. 获取所有字母</span></span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">letterList</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cityList</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：父组件数据更新时：<br />如果数据和组件无关，则父组件会触发updated，子组件不会触发<br />如果数据和组件无关，则子组件先出发updated，接着父组件才会触发updated<br />这个版本中还有一些不完善的地方，后期还需要修改</p><p><a name="O4uo3"></a></p><h1 id="城市选择案例-页面滚动字母变化效果"><a href="#城市选择案例-页面滚动字母变化效果" class="headerlink" title="城市选择案例-页面滚动字母变化效果"></a>城市选择案例-页面滚动字母变化效果</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span>,</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.city-list</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.city-list</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">5</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 侧边字母样式 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.letter</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: auto;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.letter</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.letter</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- loadding效果 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>loading<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 城市列表组件 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 父组件将letter子组件传递的index值，传递给city-list --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">city-list</span> <span class="hljs-attr">:city-list</span>=<span class="hljs-string">&quot;cityList&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">scrollindex</span>=<span class="hljs-string">&quot;getIndex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">city-list</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 字母列表组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">letter</span> <span class="hljs-attr">:letter-list</span>=<span class="hljs-string">&quot;letterList&quot;</span> @<span class="hljs-attr">toggle</span>=<span class="hljs-string">&quot;toggle&quot;</span> <span class="hljs-attr">:cur-index</span>=<span class="hljs-string">&quot;curIndex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">letter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/city.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../lib/vue2.7.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">CityList</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;cityList&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>],</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;div class=&quot;city-list&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;li v-for=&quot;(val,key,index) in cityList&quot; ref=&quot;classItem&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;p&gt;&#123;&#123;key&#125;&#125;&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;ul v-for=&quot;item in val&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                        &lt;li&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;/ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;/li&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">listHeight</span>: [] <span class="hljs-comment">// 保存每个li的高度</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 这里可以获取到div，但是只有ul标签，ul下面没有任何内容</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(this.$refs);</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">onscroll</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollHandler</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">updated</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 现获取第一个元素的高度</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(this.$refs);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(this.$refs.classItem[2].offsetTop);</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">listHeight</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">classItem</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> item.<span class="hljs-property">offsetTop</span>;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">scrollHandler</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> scrollTop = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> curIndex;</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">listHeight</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (scrollTop &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">listHeight</span>[i] &amp;&amp; scrollTop &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">listHeight</span>[i + <span class="hljs-number">1</span>]) &#123;</span><br><span class="language-javascript">                        curIndex = i;</span><br><span class="language-javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;scrollindex&#x27;</span>,curIndex);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 使用watch监听index的变化，只要数据发生变化，就让页面滑动</span></span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// document.documentElement.scrollTop = this.listHeight[this.index];</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 带有滚动效果</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">top</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">listHeight</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>],</span><br><span class="language-javascript">                    <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Letter</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;letterList&#x27;</span>,<span class="hljs-string">&#x27;curIndex&#x27;</span>],</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">activeIndex</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;div class=&quot;letter&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;li v-for=&quot;(item,index) in letterList&quot; @click=&quot;toggle(index)&quot; :class=&quot;activeIndex == index ? &#x27;active&#x27;:&#x27;&#x27;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/ul&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">toggle</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;toggle&quot;</span>, index);</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span> = index; <span class="hljs-comment">// 右侧按钮添加聚焦效果</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">curIndex</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">curIndex</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">cityList</span>: [],</span><br><span class="language-javascript">            <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">index</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">curIndex</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 修改loadding的状态</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">cityList</span> = cityDate</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">200</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 获取子组件传參</span></span><br><span class="language-javascript">            <span class="hljs-title function_">toggle</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 保存点击的是哪个字母</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span> = index;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">getIndex</span>(<span class="hljs-params">index</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">curIndex</span> = index;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title class_">CityList</span>,</span><br><span class="language-javascript">            <span class="hljs-title class_">Letter</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">letterList</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cityList</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="j6gqG"></a></p><h1 id="分析cnode项目父子组件传值的思路"><a href="#分析cnode项目父子组件传值的思路" class="headerlink" title="分析cnode项目父子组件传值的思路"></a>分析cnode项目父子组件传值的思路</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue组件/组件通讯</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/8-Vue%E7%BB%84%E4%BB%B6-%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/8-Vue%E7%BB%84%E4%BB%B6-%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>课程目标</p><ol><li>了解组件的应用场景</li><li>理解组件的运行机制</li><li>掌握组件的定义和使用</li></ol></blockquote><p><a name="gTCFN"></a></p><h1 id="1-认识组件"><a href="#1-认识组件" class="headerlink" title="1. 认识组件"></a>1. 认识组件</h1><p>通常一个应用会以一棵嵌套的组件树的形式来组织<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666859055520-f45cee03-ca62-4118-9caf-c4f5cc35fc52.png#averageHue=%23ededed&clientId=u2af311d7-d134-4&from=paste&height=303&id=ufcef4e9d&name=image.png&originHeight=546&originWidth=1496&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57718&status=done&style=none&taskId=u230e0fa8-bbf6-41d8-aa3e-69828be01c8&title=&width=831.1111331280373" alt="image.png"></p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。<br />组件特点</p><ol><li>组件（Component）是 Vue.js 最强大的功能之一；</li><li>组件可以扩展 HTML 元素，封装可重用的代码</li><li>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树</li></ol><p>这里有两种组件的注册类型：</p><ul><li>全局注册</li><li>局部注册<br><a name="vXkvE"></a></li></ul><h1 id="2-注册组件"><a href="#2-注册组件" class="headerlink" title="2. 注册组件"></a>2. 注册组件</h1><p><a name="qRna9"></a></p><h3 id="2-1-全局组件"><a href="#2-1-全局组件" class="headerlink" title="2.1 全局组件"></a>2.1 全局组件</h3><p>所有vue实例都能用全局组件<br><a name="hBM4X"></a></p><h4 id="2-1-1-注册全局组件的语法"><a href="#2-1-1-注册全局组件的语法" class="headerlink" title="2.1.1 注册全局组件的语法"></a>2.1.1 注册全局组件的语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(tagName, options)<br></code></pre></td></tr></table></figure><p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tag-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tag-name</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="UxYwh"></a></p><h4 id="2-1-2-创建全局组件"><a href="#2-1-2-创建全局组件" class="headerlink" title="2.1.2 创建全局组件"></a>2.1.2 创建全局组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 &lt;button-counter&gt;。我们可以在一个通过 new Vue 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>非组件内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 组件名称：button-count，ButtonCount，buttonCount，buttoncount都可以</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 但是只要有大写，必须转为小写，添加-</span></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;ButtonCounter&#x27;</span>, &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 组件中的data数据不是对象，是一个函数，而且是一个有返回值的函数</span></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; </span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;&#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><p><a name="tg5yw"></a></p><h4 id="2-1-3-组件的复用"><a href="#2-1-3-组件的复用" class="headerlink" title="2.1.3 组件的复用"></a>2.1.3 组件的复用</h4><p>你可以将组件进行任意次数的复用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：当点击按钮时，每个组件都会各自独立维护它的 count。因为你每用一次组件，就会有一个它的新实例被创建。<br />注意事项：</p><ol><li>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝</li><li>组件的模板中只能有一个根元素</li></ol><p>全局注册的组件可以用在其被注册之后的任何 (通过 new Vue) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。<br><a name="Fb4O4"></a></p><h4 id="2-1-4-总结"><a href="#2-1-4-总结" class="headerlink" title="2.1.4 总结"></a>2.1.4 总结</h4><p>全局组件，在任意一个vue的挂载点中都能直接使用<br />注意事项：<br />1. 定义全局组件，组件的名称首字母要大写（在模板中引用时要转为小写，且多个单词中间加‘-’）<br />2. 组件的配置：组件的配置和vue实力话的配置基本一致，同样都有data，methods，computed，生命周期函数；不同之处，没有el，一定有template<br />3. 组件中不能访问根实例中的数据<br />4. 组件中的data不是对象，而是一个有返回值的函数<br />5. 组件的模板中只能有一个根元素【否则报错】<br><a name="MgAEE"></a></p><h3 id="2-2-局部组件"><a href="#2-2-局部组件" class="headerlink" title="2.2 局部组件"></a>2.2 局部组件</h3><p>在实例选项中注册局部组件，这样组件只能在这个实例中使用<br><a name="Ne0S1"></a></p><h4 id="2-2-1-局部组件实例"><a href="#2-2-1-局部组件实例" class="headerlink" title="2.2.1 局部组件实例"></a>2.2.1 局部组件实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>非组件内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ButtonCounter</span> = &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 注册组件</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ButtonCounter</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="fLY7W"></a></p><h4 id="2-2-2-组件中的data为什么是函数"><a href="#2-2-2-组件中的data为什么是函数" class="headerlink" title="2.2.2 组件中的data为什么是函数"></a>2.2.2 组件中的data为什么是函数</h4><p>案例：创建data；创建两个变量，赋值为对象，作为组件<br />给每个组件都添加一个data的数据，数据值就是之前创建的data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当data为对象是，多次被引用，数据之间会被干扰</span><br><span class="hljs-keyword">let</span> data = &#123;<br>  <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">let</span> com1 = &#123;&#125;;<br><span class="hljs-keyword">let</span> com2 = &#123;&#125;;<br><br>com1.<span class="hljs-property">data</span> = data;<br>com2.<span class="hljs-property">data</span> = data;<br><br>com1.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> = <span class="hljs-string">&#x27;改变&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(com2.<span class="hljs-property">data</span>.<span class="hljs-property">count</span>);<br><br><br><span class="hljs-comment">// 当data为函数时，多次调用，数据不会干扰</span><br><span class="hljs-keyword">let</span> data = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> com1 = &#123;&#125;;<br><span class="hljs-keyword">let</span> com2 = &#123;&#125;;<br><br>com1.<span class="hljs-property">data</span> = <span class="hljs-title function_">data</span>();<br>com2.<span class="hljs-property">data</span> = <span class="hljs-title function_">data</span>();<br><br>com1.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> = <span class="hljs-string">&#x27;改变&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(com2.<span class="hljs-property">data</span>.<span class="hljs-property">count</span>);<br></code></pre></td></tr></table></figure><p>总结：<br />如果两个实例同时引用一个对象，那么当你修改其中一个属性的时候，另外一个实例也会跟着改；<br />使用函数反对对象，这样每一个实例的data属性都是独立的，不会相互影响了<br><a name="JQCsC"></a></p><h1 id="3-组件的应用"><a href="#3-组件的应用" class="headerlink" title="3. 组件的应用"></a>3. 组件的应用</h1><p><a name="WHw11"></a></p><h3 id="3-1-组件应用中的注意事项"><a href="#3-1-组件应用中的注意事项" class="headerlink" title="3.1  组件应用中的注意事项"></a>3.1  组件应用中的注意事项</h3><ul><li>组件名首字母大写，在模板中应用时要转为小写，如果是两个单词，中间用”-“连接</li><li>template模板中只能有一个根元素</li><li>子组件中的data必须是一个有返回值的函数<br><a name="odOXL"></a></li></ul><h3 id="3-2-组件应用实例"><a href="#3-2-组件应用实例" class="headerlink" title="3.2 组件应用实例"></a>3.2 组件应用实例</h3><p>复用计数器组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>非组件内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;ButtonCounter&#x27;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;&#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="esVzm"></a></p><h1 id="4-组件之间的数据通讯"><a href="#4-组件之间的数据通讯" class="headerlink" title="4.组件之间的数据通讯"></a>4.组件之间的数据通讯</h1><p>组件是 vue.js最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666858732502-32b69d1f-ce37-498b-9cc1-839829993075.png#averageHue=%23fcfcfa&clientId=u2af311d7-d134-4&from=paste&id=ud8fe0853&originHeight=282&originWidth=353&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u36dc8b10-970d-432b-85e8-ea61a79bb0b&title="><br />如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）<br />针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。本文总结了vue组件间通信的几种方式，如props、$emit&#x2F;$on（bus总线）、vuex<br />我们在这里重点说的就是，父子组件之前的传值<br><a name="khyJu"></a></p><h3 id="4-1父传子【props】"><a href="#4-1父传子【props】" class="headerlink" title="4.1父传子【props】"></a>4.1父传子【props】</h3><p>父组件通过 Prop 向子组件传递数据</p><ol><li>父组件通过自定义属性将msg的值传给子组件</li><li>子组件通过 props接收父组件的值</li></ol><p>父组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 模板： </span><br>  &lt;com :type=<span class="hljs-string">&#x27;msg&#x27;</span>&gt;&lt;/com&gt;<br><span class="hljs-comment">// 数据：</span><br>    msg = <span class="hljs-string">&#x27;book&#x27;</span><br><span class="hljs-comment">// 注册： </span><br><span class="hljs-attr">components</span>: &#123;<br>  <span class="hljs-attr">com</span>: com<br>&#125;<br></code></pre></td></tr></table></figure><p>子组件（com）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span>  com = &#123;<br>  <span class="hljs-attr">props</span>: [ <span class="hljs-string">&#x27;type&#x27;</span> ],<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：在父向子组件传值时，如果父组件的值发生变化，子组件也会变化，但是子组件改变，不会引入父组件改变，我们称之为时“单向数据流”</p><p>总结：</p><ol><li>父组件通过自定义属性，向子组件传递数据</li><li>子组件通过props接收传递的数据</li><li>当父组件的值发生变化时，子组件也会改变</li><li>尽量避免通过子组件更改父组件传递来的数据</li><li>子组件可以改变父组件传递来的引用数据类型，数据改变，父组件也会改变</li><li>属性名不能有大写字母</li></ol><p>案例：实现cnode官网新闻效果</p><ol><li>遍历标题数据</li><li>把所有的新闻内容作为一个组件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    *&#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.tab</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.tab</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>:cadetblue;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- tab标题 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in tabs&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 新闻内容 --&gt;</span><br><span class="hljs-comment">&lt;!-- 3. 使用组件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 添加组件配置信息</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title class_">List</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;div class=&quot;list&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;div class=&quot;info&quot; v-for=&quot;item in listdata&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;img :src=&quot;item.imgurl&quot; alt=&quot;&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;span class=&quot;title&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                        &#123;&#123;item.title&#125;&#125;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;/span&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                    &lt;button&gt;按钮&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;/div&gt;    </span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">listdata</span>:[&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">imgurl</span>:<span class="hljs-string">&#x27;../img/one.jpg&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;这是标题1&#x27;</span></span><br><span class="language-javascript">                &#125;,&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">imgurl</span>:<span class="hljs-string">&#x27;../img/two.jpg&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;这是标题2&#x27;</span></span><br><span class="language-javascript">                &#125;,&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">imgurl</span>:<span class="hljs-string">&#x27;../img/thr.jpg&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;这是标题3&#x27;</span></span><br><span class="language-javascript">                &#125;]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">tabs</span>:[<span class="hljs-string">&#x27;全部&#x27;</span>,<span class="hljs-string">&#x27;精华&#x27;</span>,<span class="hljs-string">&#x27;分享&#x27;</span>,<span class="hljs-string">&#x27;回答&#x27;</span>,<span class="hljs-string">&#x27;招聘&#x27;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 2. 挂载组件</span></span><br><span class="language-javascript">            <span class="hljs-title class_">List</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><a name="sc3aM"></a></li></ol><h3 id="4-2子传父【自定义事件】"><a href="#4-2子传父【自定义事件】" class="headerlink" title="4.2子传父【自定义事件】"></a>4.2子传父【自定义事件】</h3><p>子组件通过自定义事件 向父组件传递数据<br />子组件（com）<br />子组件标签中添加事件，通过事件调用this.$emit() 方法，添加自定义事件，发送数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">模板：&lt;button @click=”send”&gt;&lt;/button&gt;<br>方法： <br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">send</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;del&#x27;</span>,数据);  <span class="hljs-comment">//del是自定义事件</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>父组件<br />通过自定义事件，调用指定方法，接收传递参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">模板： &lt;com @del=<span class="hljs-string">&quot;delUser&quot;</span>&gt;&lt;/com&gt;<br>方法： <br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">delUser</span>(<span class="hljs-params">数据</span>)&#123;&#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>子传父总结流程</p><ol><li>触发事件</li><li>调用事件处理函数</li><li>使用$emit发送数据(自定义事件名称,传递的数据)</li><li>创建对应的事件，触发自定义函数</li><li>在函数中接收数据<br><a name="A24WK"></a></li></ol><h3 id="4-3-非父子组件传值【中央事件总线】"><a href="#4-3-非父子组件传值【中央事件总线】" class="headerlink" title="4.3 非父子组件传值【中央事件总线】"></a>4.3 非父子组件传值【中央事件总线】</h3><p>有时候两个组件也需要通信（非父子关系）。当然Vue2.0提供了Vuex，但在简单的场景下，可以使用一个空的Vue实例作为中央事件总线。<br />全局创建中央事件总线</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 定义一个全局的空实例做为中央事件总线</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Bus</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>();<br></code></pre></td></tr></table></figure><p>组件A</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 在需要向组件B传送数据的逻辑中，使用下面的代码：</span><br><span class="hljs-comment">// change：触发自定义事件；this.num：携带数据</span><br><span class="hljs-title class_">Bus</span>.$emit(<span class="hljs-string">&#x27;change&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>);<br></code></pre></td></tr></table></figure><p>组件B</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title class_">Bus</span>.$on(<span class="hljs-string">&#x27;change&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">num</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">curStyle</span>.<span class="hljs-property">width</span> = num + <span class="hljs-string">&#x27;px&#x27;</span><br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue的生命周期</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/7-vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/7-vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p><a name="TSr9L"></a></p><h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><blockquote><ol><li>了解生命周期执行流程</li><li>在哪个生命周期中可以最早获取到数据</li><li>在哪个生命周期后页面中才渲染数据</li><li>熟练记忆各个生命周期的作业</li></ol></blockquote><p><a name="k0BE6"></a></p><h1 id="0-补充知识点"><a href="#0-补充知识点" class="headerlink" title="0.补充知识点"></a>0.补充知识点</h1><ol><li>template</li></ol><p>当没有temple的时候，在挂载点app中显示数据；但是一旦添加了template，那么会把template中的内容作为模版来渲染，template本身就是模版的意思；<br />当有template会先渲染template中的内容；<br />如果没有template，才会选择挂载点作为渲染的部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-comment">// template:`</span></span><br><span class="language-javascript">  <span class="hljs-comment">// &lt;div&gt;---&#123;&#123;msg&#125;&#125;---&lt;/div&gt;</span></span><br><span class="language-javascript">  <span class="hljs-comment">// `,</span></span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello&#x27;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>挂载点</li></ol><p>没有指定挂载点，怎么办？<br />在vue返回的实例身上有一个$mount，也可以进行挂载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-comment">// el: &#x27;#app&#x27;,</span><br><span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">&lt;div&gt;---&#123;&#123;msg&#125;&#125;---&lt;/div&gt;</span><br><span class="hljs-string">`</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;<br>&#125;);<br><span class="hljs-comment">// console.log(vm);</span><br>vm.$mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><p><a name="12e0b1f2"></a></p><h1 id="1-生命周期钩子函数"><a href="#1-生命周期钩子函数" class="headerlink" title="1. 生命周期钩子函数"></a>1. 生命周期钩子函数</h1><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。<br />生命周期函数就是vue实例在某一个时间点会自动执行的函数<br><a name="BBKfD"></a></p><h1 id="2-生命周期示意图"><a href="#2-生命周期示意图" class="headerlink" title="2. 生命周期示意图"></a>2. 生命周期示意图</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667394510222-b706a368-9777-4ed9-aa59-95a806e68528.png#averageHue=%23fdfcfb&clientId=u5cc5fc7f-1650-4&from=paste&height=1687&id=u7a3d0592&name=image.png&originHeight=3036&originWidth=3648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2878821&status=done&style=none&taskId=u6ea4f6c7-f624-49b7-ac61-fe32f0b370b&title=&width=2026.666720355" alt="image.png"></p><ol><li>vm.$destroy() ： 完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器和双向绑定。<br />&#x2F;&#x2F; 触发 beforeDestroy 和 destroyed 的钩子。<br />&#x2F;&#x2F; 在大多数场景中你不应该调用这个方法。最好使用 v-if 和 v-for 指令以数据驱动的方式控制子组件的生命周期。 </li><li>如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。 </li><li>在实例挂载之后，元素可以用 vm.$el 访问。</li></ol><p><a name="hW9ko"></a></p><h1 id="3-生命周期函数"><a href="#3-生命周期函数" class="headerlink" title="3. 生命周期函数"></a>3. 生命周期函数</h1><p>beforeCreate ：在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用。<br />created：  在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data  observer)，属性和方法的运算，watch&#x2F;event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。<br />beforeMount： 在挂载开始之前被调用：相关的 render 函数首次被调用。<br />mounted： el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。<br />beforeUpdate：  数据更新时调用，发生在虚拟 DOM 打补丁之前。<br />updated： 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子<br />beforeDestroy： 实例销毁之前调用。在这一步，实例仍然完全可用。<br />destroyed： Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的双向绑定会失效，事件监听器会被移除，所有的子实例也会被销毁。<br><a name="a27f48ee"></a></p><h1 id="4-案例"><a href="#4-案例" class="headerlink" title="4. 案例"></a>4. 案例</h1><p><a name="vA32V"></a></p><h3 id="4-1-轮播图效果"><a href="#4-1-轮播图效果" class="headerlink" title="4.1 轮播图效果"></a>4.1 轮播图效果</h3><p>主要思考：什么时候请求数据，什么时候添加定时器等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/轮播图.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;banner&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- transitionend事件在 CSS 完成过渡后触发 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bannerImg&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;pox&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;tran&quot;</span> @<span class="hljs-attr">transitionend</span>=<span class="hljs-string">&quot;handleTran&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in imgList&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot; &#x27;images/&#x27; + item &quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bannerBtn&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">  轮播图：</span></span><br><span class="hljs-comment"><span class="language-javascript">  首尾相连的滑动的轮播图</span></span><br><span class="hljs-comment"><span class="language-javascript">      页面中显示图片，发送ajax请求图片名称数据</span></span><br><span class="hljs-comment"><span class="language-javascript">  */</span> </span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">curIndex</span>:<span class="hljs-number">0</span>,<span class="hljs-comment">// 第几张图片</span></span><br><span class="language-javascript">          <span class="hljs-attr">imgList</span>:[],</span><br><span class="language-javascript">          <span class="hljs-attr">tran</span>:<span class="hljs-string">&#x27;tran&#x27;</span> <span class="hljs-comment">// 过度效果tran</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">pox</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">return</span> <span class="hljs-string">`transform:translate(<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.curIndex * -<span class="hljs-number">500</span>&#125;</span>px,0)`</span>;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">handleTran</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">              <span class="hljs-comment">// 判断：当移动到最后一张图片的时候，需要切换到第一张图片</span></span><br><span class="language-javascript">              <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">curIndex</span> == <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgList</span>.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">                  <span class="hljs-comment">// 过度效果去掉</span></span><br><span class="language-javascript">                  <span class="hljs-variable language_">this</span>.<span class="hljs-property">tran</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">                  <span class="hljs-variable language_">this</span>.<span class="hljs-property">curIndex</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 发送axios请求，axios.get/post</span></span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> imgs = [<span class="hljs-string">&#x27;pic1.jpg&#x27;</span>,<span class="hljs-string">&#x27;pic2.jpg&#x27;</span>,<span class="hljs-string">&#x27;pic3.jpg&#x27;</span>,<span class="hljs-string">&#x27;pic4.jpg&#x27;</span>];</span><br><span class="language-javascript">          imgs.<span class="hljs-title function_">push</span>(imgs[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgList</span> = imgs;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 添加定时器 mounted</span></span><br><span class="language-javascript">      <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">curIndex</span>++;</span><br><span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">tran</span> = <span class="hljs-string">&#x27;tran&#x27;</span>; <span class="hljs-comment">// 添加</span></span><br><span class="language-javascript">          &#125;,<span class="hljs-number">2000</span>);</span><br><span class="language-javascript">          <span class="hljs-comment">// 注意时间间隔，过渡的时间是1s，定时器的时间必须&gt;1s</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="WQICS"></a></p><h3 id="4-2-请求cnode项目中的数据"><a href="#4-2-请求cnode项目中的数据" class="headerlink" title="4.2 请求cnode项目中的数据"></a>4.2 请求cnode项目中的数据</h3><p>思考：</p><ol><li>什么时候请求数据</li><li>如何显示数据</li><li>如何对时间进行格式化<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in arr&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.author.avatar_url&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>时间：&#123;&#123;item.last_reply_at | format&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>访问量:&#123;&#123;item.visit_count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">arr</span>:[]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 生命周期</span></span><br><span class="language-javascript">        <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://cnodejs.org/api/v1/topics&#x27;</span>)</span><br><span class="language-javascript">            .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 过滤器</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 对时间进行格式化</span></span><br><span class="language-javascript">      <span class="hljs-attr">filters</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 格式化时间</span></span><br><span class="language-javascript">            <span class="hljs-attr">format</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()</span><br><span class="language-javascript">                <span class="hljs-comment">//   utc时间转格林尼治时间得到的毫秒数</span></span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> utcDate = val</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> dateNow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(utcDate).<span class="hljs-title function_">getTime</span>()</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> t = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(date / <span class="hljs-number">1000</span> - dateNow / <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> unit = [<span class="hljs-string">&quot;年&quot;</span>, <span class="hljs-string">&quot;月&quot;</span>, <span class="hljs-string">&quot;天&quot;</span>, <span class="hljs-string">&quot;小时&quot;</span>, <span class="hljs-string">&quot;分钟&quot;</span>, <span class="hljs-string">&quot;秒&quot;</span>];</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> arr = [</span><br><span class="language-javascript">                    <span class="hljs-number">365</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>, <span class="hljs-comment">//年</span></span><br><span class="language-javascript">                    <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>,</span><br><span class="language-javascript">                    <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>,</span><br><span class="language-javascript">                    <span class="hljs-number">60</span> * <span class="hljs-number">60</span>,</span><br><span class="language-javascript">                    <span class="hljs-number">60</span>,</span><br><span class="language-javascript">                    <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                ];</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> d = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(t / arr[i]);</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (d &gt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> d + unit[i] + <span class="hljs-string">&quot;前&quot;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><a name="VOymz"></a></li></ol><h3 id="4-3-使用swiper实现轮播图"><a href="#4-3-使用swiper实现轮播图" class="headerlink" title="4.3 使用swiper实现轮播图"></a>4.3 使用swiper实现轮播图</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./dist/css/swiper.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    *&#123;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.header</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.swiper-container</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    &#125;  </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>头部<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-container&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 轮播图的内容 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in imgs&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot; &#x27;./images/&#x27; + item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果需要分页器 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 如果需要导航按钮 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 列表显示 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 底部内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.1.3/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/js/swiper.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">imgs</span>:[]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 请求图片数据</span></span><br><span class="language-javascript">            axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://www.fastmock.site/mock/6d9ade54efdc8fd98021d43c401f938e/wws/imglist&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">data</span>:&#123;imgArr&#125;&#125; = res;</span><br><span class="language-javascript">                imgArr.<span class="hljs-title function_">push</span>(imgArr[<span class="hljs-number">0</span>]) <span class="hljs-comment">// 如果想要收尾相连，还需要添加第一张图</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgs</span> = imgArr;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// dom节点添加完毕之后才能【mounted】，实例化当前的swiper对象</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> mySwiper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swiper</span> (<span class="hljs-string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 分页器方向：</span></span><br><span class="language-javascript">                <span class="hljs-attr">direction</span>: <span class="hljs-string">&#x27;horizontal&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// loop: true, 首尾相连</span></span><br><span class="language-javascript">                <span class="hljs-attr">autoplay</span>:<span class="hljs-number">1000</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">observer</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//修改swiper自己或子元素时，自动初始化swiper</span></span><br><span class="language-javascript">                <span class="hljs-attr">observeParents</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//修改swiper的父元素时，自动初始化swiper</span></span><br><span class="language-javascript">                </span><br><span class="language-javascript">                <span class="hljs-comment">// 如果需要分页器</span></span><br><span class="language-javascript">                <span class="hljs-attr">pagination</span>: <span class="hljs-string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="language-javascript">                </span><br><span class="language-javascript">                <span class="hljs-comment">// 如果需要前进后退按钮</span></span><br><span class="language-javascript">                <span class="hljs-attr">nextButton</span>: <span class="hljs-string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">prevButton</span>: <span class="hljs-string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="language-javascript">            &#125;)        </span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;); </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="KVy4X"></a></p><h1 id="6-安装插件"><a href="#6-安装插件" class="headerlink" title="6.安装插件"></a>6.安装插件</h1><p>自动联想生命周期钩子函数<br />安装：Vetur 和 Vue 3 Snippets<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667397075772-8bbda6ed-ca6f-4c57-ad81-d564fbce9329.png#averageHue=%23faf9f9&clientId=u5cc5fc7f-1650-4&from=paste&height=154&id=uce0c6b53&name=image.png&originHeight=278&originWidth=870&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35601&status=done&style=none&taskId=u1b79f482-be75-4996-9c63-7ea8bc2ad71&title=&width=483.3333461372944" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667397057954-b8ce004e-3fbc-448e-8966-7fedc091ab18.png#averageHue=%23f5f0eb&clientId=u5cc5fc7f-1650-4&from=paste&height=141&id=u4ab6e0f7&name=image.png&originHeight=254&originWidth=936&originalType=binary&ratio=1&rotation=0&showTitle=false&size=83839&status=done&style=none&taskId=u92a50172-abb7-4562-aa16-12fb0219741&title=&width=520.000013775296" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>动态绑定class</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/6-%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9Aclass/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/6-%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9Aclass/</url>
    
    <content type="html"><![CDATA[<p><a name="15f23761"></a></p><h1 id="1-class绑定内部样式"><a href="#1-class绑定内部样式" class="headerlink" title="1. class绑定内部样式"></a>1. class绑定内部样式</h1><p><a name="2fe7850b"></a></p><h3 id="1-1-数组语法"><a href="#1-1-数组语法" class="headerlink" title="1.1 数组语法"></a>1.1 数组语法</h3><p>我们可以把一个数组传给 v-bind:class，以应用一个 class 列表：<br />Demo1:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">activeClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">errorClass</span>: <span class="hljs-string">&#x27;text-danger&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>渲染为：<br><span class="hljs-comment">&lt;!-- &lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt; --&gt;</span><br></code></pre></td></tr></table></figure><p>demo2:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这样写将始终添加 errorClass，但是只有在 isActive 是 true 时才添加 activeClass。--&gt;</span><br></code></pre></td></tr></table></figure><p>不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="24fd6034"></a></p><h3 id="1-2-对象语法"><a href="#1-2-对象语法" class="headerlink" title="1.2 对象语法"></a>1.2 对象语法</h3><p>我们可以传给 v-bind:class 一个对象，以动态地切换 class：<br />demo1:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 上面的语法表示 active 这个 class 存在与否将取决于数据属性 isActive 的真假  --&gt;</span><br></code></pre></td></tr></table></figure><p>demo2:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 结果渲染为：&lt;div class=&quot;static active&quot;&gt;&lt;/div&gt; --&gt;</span><br></code></pre></td></tr></table></figure><p>demo3:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">classObject</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>demo4:也可以在这里绑定一个返回对象的计算属性。这是一个常用且强大的模式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">error</span>: <span class="hljs-literal">null</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">classObject</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">active</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">isActive</span> &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-property">error</span>,</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">error</span>     &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="933eb999"></a></p><h1 id="2-style绑定行内样式"><a href="#2-style绑定行内样式" class="headerlink" title="2. style绑定行内样式"></a>2. style绑定行内样式</h1><p><a name="11d51c05"></a></p><h3 id="2-1-对象语法"><a href="#2-1-对象语法" class="headerlink" title="2.1 对象语法"></a>2.1 对象语法</h3><p>Demo1:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">activeColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">fontSize</span>: <span class="hljs-number">30</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>demo2:直接绑定到一个样式对象通常更好，这会让模板更清晰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">styleObject</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;13px&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 同样的，对象语法常常结合返回对象的计算属性使用 --&gt;</span><br></code></pre></td></tr></table></figure><p><a name="25f988a7"></a></p><h3 id="2-2-数组语法"><a href="#2-2-数组语法" class="headerlink" title="2.2 数组语法"></a>2.2 数组语法</h3><p>Demo1:v-bind:style 的数组语法可以将多个样式对象应用到同一个元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自动添加前缀当 v-bind:style 使用需要添加浏览器引擎前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义指令和过滤器</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/5-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/5-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><a name="T9j0g"></a></p><h1 id="1-自定义指令"><a href="#1-自定义指令" class="headerlink" title="1.自定义指令"></a>1.自定义指令</h1><p><a name="aagyo"></a></p><h3 id="1-1-自定义指令介绍"><a href="#1-1-自定义指令介绍" class="headerlink" title="1.1 自定义指令介绍"></a>1.1 自定义指令介绍</h3><p>除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。<br />例如： 聚焦输入框      <br />当页面加载时，该元素将获得焦点 (注意：autofocus 在移动版 Safari 上不工作)。事实上，只要你在打开这个页面后还没点击过任何内容，这个输入框就应当还是处于聚焦状态。现在让我们用指令来实现这个功能：</p><p><a name="KWurY"></a></p><h3 id="1-2-自定义指令步骤"><a href="#1-2-自定义指令步骤" class="headerlink" title="1.2 自定义指令步骤"></a>1.2 自定义指令步骤</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 3. 使用自定义指令</span><br><span class="hljs-comment">  然后你可以在模板中任何元素上使用新的 v-focus 属性，如下： --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-focus</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 1. 注册 - 一个全局自定义指令 `v-focus`</span></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="language-javascript">    <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;</span><br><span class="language-javascript">     <span class="hljs-comment">// 聚焦元素</span></span><br><span class="language-javascript">      el.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 2. 注册 - 局部自定义指令</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 如果想注册局部指令，组件中也接受一个 directives 的选项：</span></span><br><span class="language-javascript">  <span class="hljs-attr">directives</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">focus</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 指令的定义</span></span><br><span class="language-javascript">      <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;</span><br><span class="language-javascript">        el.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="vhB9V"></a></p><h1 id="2-vue过滤器"><a href="#2-vue过滤器" class="headerlink" title="2.vue过滤器"></a>2.vue过滤器</h1><p><a name="LCHKd"></a></p><h3 id="2-1-过滤器介绍"><a href="#2-1-过滤器介绍" class="headerlink" title="2.1 过滤器介绍"></a>2.1 过滤器介绍</h3><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：<br />过滤器（filter）是输送介质管道上不可缺少的一种装置,大白话，就是把一些不必要的东西过滤掉,过滤器实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理，我们也可以理解其为一个纯函数。<br><a name="gYyZ1"></a></p><h3 id="2-2-过滤器格式"><a href="#2-2-过滤器格式" class="headerlink" title="2.2 过滤器格式"></a>2.2 过滤器格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 2. 在双花括号中使用过滤器 --&gt;</span><br>&#123;&#123; message | capitalize &#125;&#125;  //abc  --&gt; Abc<br><br><span class="hljs-comment">&lt;!-- 3. 在 `v-bind` 中使用过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 1. 局部-过滤器： --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-attr">filters</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">capitalize</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">      value = value.<span class="hljs-title function_">toString</span>()</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><a name="JZCgf"></a></p><h3 id="2-3-在全局注册过滤器"><a href="#2-3-在全局注册过滤器" class="headerlink" title="2.3 在全局注册过滤器"></a>2.3 在全局注册过滤器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 2. 过滤器可以串联： --&gt;</span><br>&#123;&#123; message | filterA | filterB &#125;&#125;<br><br><span class="hljs-comment">&lt;!-- 1. 或者在创建 Vue 实例之前全局定义过滤器： --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;capitalize&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    value = value.<span class="hljs-title function_">toString</span>()</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// ...</span></span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="jdXde"></a></p><h3 id="2-4-在局部注册过滤器"><a href="#2-4-在局部注册过滤器" class="headerlink" title="2.4 在局部注册过滤器"></a>2.4 在局部注册过滤器</h3><p>对cnode返回的日期时间进行格式化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;times|format&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">times</span>:<span class="hljs-string">&#x27;2022-10-31T07:43:18.322Z&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">filters</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">format</span>(<span class="hljs-params">val</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(val).<span class="hljs-title function_">toLocaleString</span>();</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：当全局过滤器和局部过滤器重名时，会采用局部过滤器<br><a name="Kxgqb"></a></p><h1 id="3-Vue中的过滤器应用场景"><a href="#3-Vue中的过滤器应用场景" class="headerlink" title="3.Vue中的过滤器应用场景"></a>3.Vue中的过滤器应用场景</h1><p>平时开发中，需要用到过滤器的地方有很多，比如单位转换、数字打点、文本格式化、时间格式化之类的等<br />比如我们要实现将30000 &#x3D;&gt; 30,000，这时候我们就需要使用过滤器<br />案例：将所有的商品进行打折（打 8 折，5 折…）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in goods&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- discount折扣  --&gt;</span><br>        &#123;&#123;item.goodsname&#125;&#125; -- &#123;&#123;item.price|discount(5)&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">goods</span>:[&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">goodsname</span>:<span class="hljs-string">&#x27;鞋子&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">price</span>:<span class="hljs-number">300</span></span><br><span class="language-javascript">            &#125;,&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">goodsname</span>:<span class="hljs-string">&#x27;裤子&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">price</span>:<span class="hljs-number">200</span></span><br><span class="language-javascript">            &#125;,&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">goodsname</span>:<span class="hljs-string">&#x27;毛衣&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">price</span>:<span class="hljs-number">100</span></span><br><span class="language-javascript">            &#125;],</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">filters</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">discount</span>(<span class="hljs-params">data,val</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> data*val/<span class="hljs-number">10</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：vue3要精简代码，并且filter功能重复，filter能实现的功能，methods和计算属性基本上也可以实现。把filter这方面的vue源码给删掉，这样更加方便维护。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>属性/方法/侦听器</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/4-%E5%B1%9E%E6%80%A7-%E6%96%B9%E6%B3%95-%E4%BE%A6%E5%90%AC%E5%99%A8/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/4-%E5%B1%9E%E6%80%A7-%E6%96%B9%E6%B3%95-%E4%BE%A6%E5%90%AC%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>需求： 根据数量和单价得到总价<br><a name="UHsMm"></a></p><h1 id="1-method方法"><a href="#1-method方法" class="headerlink" title="1. method方法"></a>1. method方法</h1><p><a name="ypTf1"></a></p><h3 id="1-1-添加方法"><a href="#1-1-添加方法" class="headerlink" title="1.1 添加方法"></a>1.1 添加方法</h3><p>在methods中添加方法<br />跟js中的方法一样，可以添加方法名称，形參，return返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fun1&#x27;</span>);<br>  &#125;,<br>  <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;fun2&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="dq4wo"></a></p><h3 id="1-2-调用方法"><a href="#1-2-调用方法" class="headerlink" title="1.2 调用方法"></a>1.2 调用方法</h3><ol><li>直接调用-没有事件触发<blockquote><p>格式：<br><code>&#123;&#123;show&#125;&#125;</code> 方法名；返回的是函数体<br><code>&#123;&#123;show()&#125;&#125;</code> 函数调用，输出的是函数的return返回值</p></blockquote></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// html</span><br>&#123;&#123;<span class="hljs-title function_">show</span>()&#125;&#125; <span class="hljs-comment">// 函数调用</span><br>&#123;&#123;show&#125;&#125; <span class="hljs-comment">// 函数体</span><br><br><span class="hljs-comment">// js</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;show方法&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&#x27;m show&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>在事件中调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>点击触发事件-不传參<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show(&#x27;传參&#x27;)&quot;</span>&gt;</span>点击触发事件-传參<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>函数内部调用另一个函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">// html<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>点击触发事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>// js<br>methods: &#123;<br>    show()&#123;<br>        console.log(&#x27;show方法&#x27;);<br>        return &quot;I&#x27;m show&quot;<br>    &#125;,<br>    a()&#123;<br>        console.log(&#x27;a方法&#x27;);<br>        // this.b();<br>        this.$options.methods.b();<br>    &#125;,<br>    b()&#123;<br>    console.log(&#x27;b方法&#x27;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="j3den"></a></p></li></ol><h3 id="1-3-简单使用"><a href="#1-3-简单使用" class="headerlink" title="1.3 简单使用"></a>1.3 简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示总价<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>：&#123;&#123;total&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;total&quot;</span>&gt;</span>查看消息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">num</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">price</span>: <span class="hljs-number">8</span>,</span><br><span class="language-javascript">      msg : <span class="hljs-number">1</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">total</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;计算一次&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>当改变msg的值时，观察方法执行了很多次</li><li>即使依赖的值没有改变。模板重新渲染时也会再次执行方法<br><a name="xk9vA"></a></li></ol><h1 id="2-computed计算属性"><a href="#2-computed计算属性" class="headerlink" title="2. computed计算属性"></a>2. computed计算属性</h1><p>computed又被称作计算属性，用于动态的根据某个值或某些值的变化，来产生对应的变化，computed具有缓存性，当无关值变化时，不会引起computed声明值的变化<br />注意：计算属性的函数内部一定有return，在模板中使用时跟data中的数据的使用方法一致</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示总价<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>：&#123;&#123;total&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;total&quot;</span>&gt;</span>查看消息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">num</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">price</span>: <span class="hljs-number">8</span>,</span><br><span class="language-javascript">      msg : <span class="hljs-number">1</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      total ()&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;计算一次&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>当改变msg的值时，观察计算属性只执行一次</li><li>只有total依赖的变量发生改变时，计算属性才会再次计算。否则总是从缓存中取出上一次的值</li></ol><p>案例：输入学生的成绩，动态的得出总分和平均得分<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661521407478-e957721d-8804-41bd-ad06-bb56fc7c86ce.png#averageHue=%23f4f3f3&from=url&id=GTDLs&originHeight=222&originWidth=953&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>班级<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>总分<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>平均分<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>八年级<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;chinese&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">typeof</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;english&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;math&quot;</span> &gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;sum&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> &#123;&#123;avg&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> xm  =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">chinese</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">math</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">english</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">//计算属性，语法用的是ES6</span></span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 计算过后，会缓存数据，下次调用时，直接获取缓存的结果</span></span><br><span class="language-javascript">      <span class="hljs-comment">// </span></span><br><span class="language-javascript">      <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">chinese</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">math</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">english</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">avg</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span>/<span class="hljs-number">3</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>computed 和 method的区别?</p><ol><li>computed具有响应式（双向数据绑定），以属性方式调用，如：this.reversedMessage</li><li>methods需以函数方式调用，如：this.reversedMessage()</li><li>computed具有缓存功能，只要里面的数据不发生改变，就不会重新计算；methods每次调用都重新计算一次，也就是说使用了computed只有它们计算依赖的值发生变化的时候才会进行重新计算，这样大大提高了性能。相比之下，每当触发重新渲染时，method将总会再次执行函数。</li></ol></blockquote><p><a name="qPL9u"></a><br>3. watch监听器</p><ol><li><p>基础案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示总价<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>：&#123;&#123;total&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;total&quot;</span>&gt;</span>查看消息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">num</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">price</span>: <span class="hljs-number">8</span>,</span><br><span class="language-javascript">      msg : <span class="hljs-number">1</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">total</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// watch中被监听的名称，必须在data中提前定义</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">num</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;计算一次&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">total</span> =  <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">price</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;计算一次&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">total</span> =  <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意</p><ol><li>当改变msg的值时，侦听器没有执行</li><li>当侦听的变量有改变时，会执行侦听器代码</li></ol></blockquote></li><li><p>页面初始化的时候被调用watch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>:&#123;<br>  <span class="hljs-attr">num</span>:&#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newName, oldName</span>)&#123; <span class="hljs-comment">// newName, oldName 平时用不上</span><br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;计算一次&#x27;</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">total</span> =  <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span><br>      &#125;,<br>      <span class="hljs-comment">//在页面初始化立即执行侦听器</span><br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>监听数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>改变num的值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;arr&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">// 数据</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">arr</span>:[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 更新方法，使用Vue.set</span></span><br><span class="language-javascript">            <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// this.arr[0]=100; // 无效写法，没办法触发视图的更新</span></span><br><span class="language-javascript">                <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>,<span class="hljs-number">0</span>,++<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 可以触发更新</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 监听数组arr</span></span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">arr</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>监听引用对象【添加深度监听】</p></li></ol><p>默认情况下引用数据类型不能被监控<br />想要被监控，可以添加deep:true</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>改变num的值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;arr&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">arr</span>:&#123;</span><br><span class="language-javascript">              <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">age</span>:<span class="hljs-number">18</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">              <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>,<span class="hljs-string">&#x27;age&#x27;</span>,++<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-property">age</span>);</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">arr</span>:&#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watch被触发了&#x27;</span>)</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">              <span class="hljs-comment">// 深度监听</span></span><br><span class="language-javascript">              <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span> </span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>如果不想在对象中使用深度监听，可以使用下面方式</li></ol><p>直接监听arr.age，这种方法只针对对象生效，不能数组中嵌套对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-string">&#x27;arr.age&#x27;</span>:&#123;<br>        <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watch被触发了&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：属性&#x2F;方法&#x2F;侦听器的区别<br>1、计算属性(通过其他的值算出新值)：避免数据冗余<br>（1）内置缓存，当计算属性依赖的变量没有发生改变时，这个计算属性就不会再执行，就会一直用上一次计算的结果，这样就能提高性能。<br>（2）一定要用return返回新值<br>2、方法：没有缓存机制，页面只要重新渲染，方法就会重新执行一次。<br>3、侦听器 : <br>（1）依赖的变量发生变化时会再次执行，性能还可以，就是复杂了。<br>（2）可以监听变量的变化而做出处理，不一定要有返回值。<br>总结：watch语法复杂了很多，如果一个功能既可以通过watch实现也可以通过computed实现，又可以通过methods方法实现的时候，优先使用computed</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue指令应用</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/3-vue%E6%8C%87%E4%BB%A4%E5%BA%94%E7%94%A8/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/3-vue%E6%8C%87%E4%BB%A4%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>课程目标</p><ol><li>通过案例深入理解指令的应用场景</li><li>掌握指令使用的语法</li></ol></blockquote><p><a name="nhQeL"></a></p><h1 id="1-数组更新检测"><a href="#1-数组更新检测" class="headerlink" title="1.数组更新检测"></a>1.数组更新检测</h1><p>官方资料<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666854818698-244de594-9d13-4b39-a6d7-612e3f9b6368.png#averageHue=%23f9f4ef&clientId=u5da3f141-988a-4&from=paste&height=243&id=u393b09b3&name=image.png&originHeight=438&originWidth=582&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99552&status=done&style=none&taskId=u6b027ce8-a8df-40c9-8fcd-b77c8d784fd&title=&width=323.33334189874176" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666854836543-b14968d8-6f13-49f8-bd89-0243568cff29.png#averageHue=%23f8f6f2&clientId=u5da3f141-988a-4&from=paste&height=253&id=ua765e390&name=image.png&originHeight=456&originWidth=688&originalType=binary&ratio=1&rotation=0&showTitle=false&size=131436&status=done&style=none&taskId=ub8f3a008-477c-4369-8e5f-a19db8574ab&title=&width=382.2222323476535" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666854856956-8433df06-9374-4c6b-88e2-7a6d90444301.png#averageHue=%23f9f8f8&clientId=u5da3f141-988a-4&from=paste&height=257&id=udd08cee3&name=image.png&originHeight=462&originWidth=590&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95860&status=done&style=none&taskId=u5c88e46e-6009-45d8-b59f-8ba2c4d8345&title=&width=327.7777864609238" alt="image.png"><br />Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><p>当然：有些方法不会触发试图更新，下面方法不会触发v-for更新 slice()，filter()，concat()，map()，可以采用下面方法对数组进行更新检测</p><ul><li>Vue.set(数组,索引,新值)</li><li>vm.$set(数组,索引,新值)<br><a name="xmn4B"></a></li></ul><h3 id="1-1-需求：给数组添加数据"><a href="#1-1-需求：给数组添加数据" class="headerlink" title="1.1 需求：给数组添加数据"></a>1.1 需求：给数组添加数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>更新数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">list</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">person</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;郑州&#x27;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">100</span>; <span class="hljs-comment">// 添加无效，没有触发视图更新</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">9</span>);  <span class="hljs-comment">// 添加有效，可以触发视图更新</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：<br />1. 有些方法是可以触发视图更新的，有些方法不可以<br />2. 通过下标修改值是没有触发视图更新，可以通过控制台查看到数据更新了，但是不能渲染到视图中<br><a name="WGnu9"></a></p><h3 id="1-2-删除中以下方法，可以触发视图更新"><a href="#1-2-删除中以下方法，可以触发视图更新" class="headerlink" title="1.2 删除中以下方法，可以触发视图更新"></a>1.2 删除中以下方法，可以触发视图更新</h3><blockquote><p>this.list.pop(); &#x2F;&#x2F; 能触发视图更新<br>this.list.shift(); &#x2F;&#x2F; 能触发视图更新<br>this.list.splice(1,1); &#x2F;&#x2F; 能触发视图更新</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666855081958-08dda0b2-120d-4841-99ef-e91b929d9527.png#averageHue=%23fdfdfc&clientId=u5da3f141-988a-4&from=paste&height=800&id=u769eb822&name=image.png&originHeight=1440&originWidth=1882&originalType=binary&ratio=1&rotation=0&showTitle=false&size=732073&status=done&style=none&taskId=u3d8c7923-e9c8-4e45-a71f-d3d44fdcd95&title=&width=1045.5555832533196" alt="image.png"><br><a name="AZIUU"></a></p><h1 id="2-对象更新检测"><a href="#2-对象更新检测" class="headerlink" title="2. 对象更新检测"></a>2. 对象更新检测</h1><p><a name="hQfBx"></a></p><h3 id="2-1-需求：给对象添加数据"><a href="#2-1-需求：给对象添加数据" class="headerlink" title="2.1 需求：给对象添加数据"></a>2.1 需求：给对象添加数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item of person&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>更新数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">list</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">person</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;郑州&#x27;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">sex</span>=<span class="hljs-string">&#x27;男&#x27;</span>; <span class="hljs-comment">// 添加无效，没有触发视图更新</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="ZHsaA"></a></p><h1 id="3-数组和对象更新解决方案"><a href="#3-数组和对象更新解决方案" class="headerlink" title="3. 数组和对象更新解决方案"></a>3. 数组和对象更新解决方案</h1><p>解决方案：使用Vue.set或者vm.$set更新数据</p><ul><li>Vue.set(对象,属性名,新值)</li><li>vm.$set(对象,属性名,新值)<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 对象操作</span><br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-comment">// this.person.sex=&#x27;男&#x27;; // 无效添加，不可以触发视图得更新</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>,<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><br>    <span class="hljs-comment">// 数组操作</span><br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-comment">// this.list[4] = 100 // 下标添加值得时候，可以添加，但是不能渲染</span><br>    <span class="hljs-comment">// this.list.push(100); // 有效添加，可以触发视图得更新</span><br>    <span class="hljs-comment">// Vue.set(数组,下标位置，内容);</span><br>    <span class="hljs-comment">// Vue.set(this.list,4,100);</span><br>    <span class="hljs-comment">// vm.$set(this.list,4,100); // vm实例本身，添加$</span><br>    <span class="hljs-comment">// this.list.splice(1,0,100);</span><br><br>    <span class="hljs-comment">// 替换</span><br>    <span class="hljs-comment">// this.list[1] = 100; // 更改无效，没有触发试图更新</span><br>    <span class="hljs-comment">// this.list.splice(1,1,100); // 有效添加，可以触发视图得更新</span><br>    <span class="hljs-comment">// Vue.set(this.list,1,100)</span><br>    <span class="hljs-comment">// vm.$set(this.list,2,100);</span><br><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-comment">// this.list.pop();</span><br>    <span class="hljs-comment">// this.list.shift();</span><br>    <span class="hljs-comment">// this.list.splice(1,1);</span><br><br>    <span class="hljs-comment">// 总结：vue中得数组和对象得更新检测得时候有些方法不能让试图更新，那么就可以采用Vue.set() 或者 vm.$set() 来解决</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>注意：原先有的数据使用这种方法是可以修改值的，但是原来不存在的值，是不能添加的对象中是没有删除操作的<br />总结：vue中得数组和对象得更新检测得时候有些方法不能让试图更新，那么就可以采用Vue.set() 或者 vm.$set() 来解决<br><a name="bOqJl"></a></li></ul><h1 id="4-案例：-TodoList-效果"><a href="#4-案例：-TodoList-效果" class="headerlink" title="4. 案例： TodoList 效果"></a>4. 案例： TodoList 效果</h1><p><a name="KSAr5"></a></p><h3 id="4-1-线上案例演示"><a href="#4-1-线上案例演示" class="headerlink" title="4.1 线上案例演示"></a>4.1 线上案例演示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661524382119-0228ba7f-5d75-48df-aa4c-fdf3b5344210.png#averageHue=%23f8f5f5&clientId=u55242fa6-2338-4&from=paste&height=402&id=ubdc81664&name=image.png&originHeight=724&originWidth=1362&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92251&status=done&style=none&taskId=u746fb087-d452-4e1e-a82f-a0f847ef8df&title=&width=756.6666867114885" alt="image.png"><br /><a href="http://www.todolist.cn/">http://www.todolist.cn/</a><br /><a href="http://www.todolist.com.cn/">http://www.todolist.com.cn/</a><br><a name="tNtdW"></a></p><h3 id="4-2-案例需求分析"><a href="#4-2-案例需求分析" class="headerlink" title="4.2 案例需求分析"></a>4.2 案例需求分析</h3><ul><li>用户输入待办事项，回车后添加进”正在进行“，并清空文本框</li><li>在”正在进行”列表项单击，添加进“已经完成”列表</li><li>在”已经完成”列表项单击，添加进“正在进行”列表</li><li>在相应列表项中单击“删除”，删除该项目<br><a name="o6lr7"></a></li></ul><h3 id="4-3-TodoList代码实现"><a href="#4-3-TodoList代码实现" class="headerlink" title="4.3 TodoList代码实现"></a>4.3 TodoList代码实现</h3><p>html模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入框 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>ToDoList <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;thing&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;addNew&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 待办列表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>正在完成 ---&#123;&#123;pending.length&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in pending&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addResolve(index)&quot;</span>&gt;</span>添加到已完成<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delPendding(index)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 已完成列表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>已经完成---&#123;&#123;resolve.length&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in resolve&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addPending(index)&quot;</span>&gt;</span>添加到未完成<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delResolve(index)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">//挂载点</span></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">thing</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">pending</span>: [],</span><br><span class="language-javascript">      <span class="hljs-attr">resolve</span>: []</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 添加待办事项</span></span><br><span class="language-javascript">      <span class="hljs-title function_">addNew</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pending</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">thing</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">thing</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 单击正在完成项目，切换到已经完成</span></span><br><span class="language-javascript">      <span class="hljs-title function_">addResolve</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolve</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pending</span>[index]);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pending</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 单击已经完成项目，切换到正在完成</span></span><br><span class="language-javascript">      <span class="hljs-title function_">addPending</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pending</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">resolve</span>[index]);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolve</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">//删除正在完成项目</span></span><br><span class="language-javascript">      <span class="hljs-title function_">delPending</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pending</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 删除已经完成项目 </span></span><br><span class="language-javascript">      <span class="hljs-title function_">delResolve</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolve</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="UOYOQ"></a></p><h1 id="5-vue代码结构生成的快捷键"><a href="#5-vue代码结构生成的快捷键" class="headerlink" title="5.  vue代码结构生成的快捷键"></a>5.  vue代码结构生成的快捷键</h1><p>操作步骤</p><ol><li>点击左下角设置图标，点击用户代码片段，</li><li>在弹出的输入框输入vue.json &#x2F;&#x2F;作用：新建全局片段</li><li>在{}输入你自定义的代码片段如<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br><span class="hljs-string">&quot;Print to Vue&amp;html base code&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;vh&quot;</span>,<br>        <span class="hljs-string">&quot;body&quot;</span>: [<br>            <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;html lang=\&quot;en\&quot;&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;head&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;meta charset=\&quot;UTF-8\&quot;&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0\&quot;&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;ie=edge\&quot;&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;title&gt;Document&lt;/title&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;/head&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;body&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;div id=\&quot;app\&quot;&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;/div&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;script src=\&quot;./lib/vue.js\&quot;&gt;&lt;/script&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;script&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;        var vm = new Vue(&#123;&quot;</span>,<br>            <span class="hljs-string">&quot;            el: &#x27;#app&#x27;,&quot;</span>,<br>            <span class="hljs-string">&quot;            data: &#123;&quot;</span>,<br>            <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;            &#125;,&quot;</span>,<br>            <span class="hljs-string">&quot;            methods: &#123;&quot;</span>,<br>            <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;            &#125;&quot;</span>,<br>            <span class="hljs-string">&quot;        &#125;);&quot;</span>,<br>            <span class="hljs-string">&quot;    &lt;/script&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>,<br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Vue&amp;html base code&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><a name="jlE8j"></a></li></ol><h1 id="6-各种表单元素应用v-model"><a href="#6-各种表单元素应用v-model" class="headerlink" title="6. 各种表单元素应用v-model"></a>6. 各种表单元素应用v-model</h1><p><a name="Ds5VG"></a></p><h3 id="6-1-文本框输入绑定"><a href="#6-1-文本框输入绑定" class="headerlink" title="6.1 文本框输入绑定"></a>6.1 文本框输入绑定</h3><p>单行文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;edit me&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多行文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">“msg”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>&#123;&#123;msg&#125;&#125;<br></code></pre></td></tr></table></figure><p>注意：在文本区域插值 () 并不会生效，应用 v-model 来代替。<br><a name="qgOUy"></a></p><h3 id="6-2-复选框"><a href="#6-2-复选框" class="headerlink" title="6.2 复选框"></a>6.2 复选框</h3><p>单个复选框，绑定到布尔值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">checked</span>:<span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多个复选框，绑定到同一个数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;example-3&#x27;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jack&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;jack&quot;</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;john&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;john&quot;</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mike&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mike&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;mike&quot;</span>&gt;</span>Mike<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>  data:&#123;<br>    checkedNames:[]<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="sZKv6"></a></p><h3 id="6-3-单选按钮"><a href="#6-3-单选按钮" class="headerlink" title="6.3 单选按钮"></a>6.3 单选按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;One&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Two&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">picked</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="nFfFI"></a></p><h3 id="6-4-选择框（下拉菜单）"><a href="#6-4-选择框（下拉菜单）" class="headerlink" title="6.4 选择框（下拉菜单）"></a>6.4 选择框（下拉菜单）</h3><p>单选时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-5&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">selected</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果 v-model 表达式的初始值未能匹配任何选项， 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p><p>多选时 (绑定到一个数组)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-6&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>  data:&#123;<br>    selected:[]<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="zeCSE"></a></p><h3 id="6-5-选择框（下拉菜单）"><a href="#6-5-选择框（下拉菜单）" class="headerlink" title="6.5 选择框（下拉菜单）"></a>6.5 选择框（下拉菜单）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html">用 v-for 渲染的动态选项：<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;option in options&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;option.value&quot;</span>&gt;</span><br>    &#123;&#123; option.text &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">selected</span>:<span class="hljs-string">&#x27;A&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">optuons</span>:[</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;One&#x27;</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;A&#x27;</span>&#125;,</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;Two&#x27;</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;B&#x27;</span>&#125;,</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;Three&#x27;</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;C&#x27;</span>&#125;</span><br><span class="language-javascript">      ]</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue常用指令</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/2-vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/2-vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>课程目标</p><ol><li>了解vue基础语法结构</li><li>掌握vue常用指令</li><li>掌握更新数组和对象的方法</li><li>了解自定义指令和过滤器</li></ol></blockquote><p><a name="bJtgw"></a></p><h1 id="1-vue的基础语法结构"><a href="#1-vue的基础语法结构" class="headerlink" title="1. vue的基础语法结构"></a>1. vue的基础语法结构</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- vue显示数据，需要使用模板 &#123;&#123;js的表达式&#125;&#125;  --&gt;</span><br>        我的名字叫：&#123;&#123;username&#125;&#125;,我的年龄是：&#123;&#123;age+1&#125;&#125;,我喜欢很多运动，比如：&#123;&#123;hobby[0]&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>点击试一试<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;username&#125;&#125;的性别是&#123;&#123;sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 0. 创建vue实例</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 挂载点</span></span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;.app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 数据【格式是对象格式】</span></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">hobby</span>:[<span class="hljs-string">&#x27;篮球&#x27;</span>,<span class="hljs-string">&#x27;足球&#x27;</span>,<span class="hljs-string">&#x27;羽毛球&#x27;</span>]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 3. 方法:我们要干的事情，都放在methods中</span></span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">uppercase</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// uppercase = 函数名</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要变成大写&#x27;</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">lowercase</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 简写形式</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要变成小写&#x27;</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 事件中的this，指向的是vue本身</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>++;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 4. 用于计算的属性</span></span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">totlePrice</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;计算&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="Wdyz9"></a></p><h1 id="2-插值语法"><a href="#2-插值语法" class="headerlink" title="2. 插值语法"></a>2. 插值语法</h1><p>数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br>    msg： <span class="hljs-string">&quot;hello&quot;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 显示数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>   <br><span class="hljs-comment">&lt;!-- 计算数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;msg - 8&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：写插值语句的时候，只有的id&#x3D;app的元素下面才可以使用插值语句，所以，尽可能创建一个标签，将所要渲染的数据，都写入当前标签中<br><a name="Nx84f"></a></p><h1 id="3-vue常用指令"><a href="#3-vue常用指令" class="headerlink" title="3. vue常用指令"></a>3. vue常用指令</h1><p>指令的属性值为js表达式<br><a name="9iOkB"></a></p><h3 id="3-1-v-html语法结构"><a href="#3-1-v-html语法结构" class="headerlink" title="3.1 v-html语法结构"></a>3.1 v-html语法结构</h3><blockquote><p>v-html：类似于原生中的innerHTML，能够解析标签<br>&lt;标签 v-html&#x3D;”text”&gt;&lt;&#x2F;标签&gt; 给标签添加html结构text<br>v-text：类似于原生中的innerText，不能解析标签，只能原样输出文本<br>     跟插值语句的用法是一样的<br>&lt;标签 v-text&#x3D;”text”&gt;&lt;&#x2F;标签&gt; 给标签添加文本text<br>&lt;标签 v-html&#x3D;”text”&gt;&lt;&#x2F;标签&gt; 给标签添加标签和文本</p></blockquote><p>可以解析html标签<br />可以将html代码显示插值表达式中，并把内容当作html处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;msg2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;msg2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;hello&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">msg2</span>:<span class="hljs-string">&#x27;&lt;h1&gt;我是一个h1标签，我本身自带的有样式，可以进行文字变大加粗&lt;/h1&gt;&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：v-html也会覆盖标签中间的所有内容，所有通过属性获取内容的方式都会将原来标签中的数据进行覆盖<br><a name="EPwPY"></a></p><h3 id="3-2-v-text"><a href="#3-2-v-text" class="headerlink" title="3.2 v-text"></a>3.2 v-text</h3><p>不能解析html标签<br />v-text&#x3D;”msg” 和  用法是一样的，显示的效果是一样的<br />区别在于：<br />v-tex t会覆盖元素中原本的内容，但是，插值表达式，只会替换自己的这个占位符，不会把整个元素的内容清空</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="1s3Zz"></a></p><h3 id="3-3-v-bind-绑定动态属性"><a href="#3-3-v-bind-绑定动态属性" class="headerlink" title="3.3 v-bind 绑定动态属性"></a>3.3 v-bind 绑定动态属性</h3><blockquote><p>语法结构：v-bind&#x3D;”type”<br>简写形式： :&#x3D;”type”</p></blockquote><p>绑定动态属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span>1111<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span>2222<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span>2222<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>鼠标悬浮的时候显示图片说明</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;imgs&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./demo.jpg&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#imgs&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;这是一张图片&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-attr">src</span>:<span class="hljs-string">&#x27;./demo.jpg&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">attribute</span>: <span class="hljs-string">&#x27;id&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>给title添加更多信息【想要在变量后面拼接数据可以使用+拼接后面就是一个表达式了】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;imgs&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./demo.jpg&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;title+src&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>v-bind的简写方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 正常写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&#x27;src&#x27;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;title&quot;</span>/&gt;</span> <br><span class="hljs-comment">&lt;!-- 简写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&#x27;src&#x27;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;mytitle&quot;</span>/&gt;</span> <br></code></pre></td></tr></table></figure></li><li><p>动态属性名【vue2.6+的版本生效】</p></li></ol><p>给div标签添加一个id，id名称为div1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">k</span>]=<span class="hljs-string">divname</span>&gt;</span>现在都有了!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：只要是给标签的属性数据绑定，也是使用v-bind<br><a name="6au7r"></a></p><h3 id="3-4-v-on-添加事件"><a href="#3-4-v-on-添加事件" class="headerlink" title="3.4 v-on 添加事件"></a>3.4 v-on 添加事件</h3><p><a name="oPw5v"></a></p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">语法格式：<br>标准结构：<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:事件名称</span>=<span class="hljs-string">&quot;methods中的方式&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>简写形式：<span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">事件名称</span>=<span class="hljs-string">&quot;methods中的方式&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>扩展</strong>：@符号，称为是语法糖；<br>什么是语法糖？<br>指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。<br>在不改变其功能的情况下，通过改变代码的写法，让代码更具有可读性，更容易理解，就相当于汉语里的成语。<br>用更简练的言语表达较复杂的含义。在得到广泛接受的情况之下，可以提升交流的效率。</p></blockquote><p>vue中常见的语法糖：<br />v-bind   :<br />v-on     @<br />v-on 后面的修饰符也是语法糖<br><a name="s6Wk0"></a></p><h4 id="3-4-1事件绑定"><a href="#3-4-1事件绑定" class="headerlink" title="3.4.1事件绑定"></a>3.4.1事件绑定</h4><p>js数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;1111&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-comment">//没有参数的绑定</span><br>        <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = <span class="hljs-literal">true</span>;<br>        &#125;,<br>        <span class="hljs-comment">//有参数的绑定</span><br>        <span class="hljs-title function_">change</span>(<span class="hljs-params">newVal</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = newVal;<br>        &#125;,<br><br>        <span class="hljs-comment">//获取事件对象</span><br>        <span class="hljs-title function_">get</span>(<span class="hljs-params">e</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>        &#125;,<br>        <span class="hljs-comment">//获取事件对象</span><br>        <span class="hljs-title function_">get</span>(<span class="hljs-params">newVal,e</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = newVal.<span class="hljs-property">isShow</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>传统添加事件的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>).<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>模板</p><ol><li><p>使用v-on调用事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>鼠标点击显示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-on:mouseover</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>鼠标悬浮显示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> @<span class="hljs-attr">touchmove</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span>改变msg<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>v-on的简写形式【@事件名】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 缩写形式 @ 冒号也可以省略 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change(&#x27;hello&#x27;)&quot;</span>&gt;</span>改变msg<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="G4zEE"></a></p></li></ol><h4 id="3-4-2-获取event对象"><a href="#3-4-2-获取event对象" class="headerlink" title="3.4.2 获取event对象"></a>3.4.2 获取event对象</h4><ol><li>在事件中，直接在事件中使用event关键词</li><li>在标签中，需要传递$event，创建变量接收$event<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在事件中获取 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>获取event<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 在标签中获取 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;getEve(&quot;ok&quot;,$event)&#x27;</span>&gt;</span>从标签中传递event<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">event</span>:<span class="hljs-string">&#x27;click&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">show</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123; <span class="hljs-comment">// 标准格式</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">show</span>(<span class="hljs-params">event</span>) &#123; <span class="hljs-comment">// 简写格式</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">getEve</span>(<span class="hljs-params">msg,ev</span>) &#123; <span class="hljs-comment">// 带参数的事件</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg,ev);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;) </span><br><span class="language-javascript">  <span class="hljs-comment">// 注意：如果出现名字相同的事件，不会报错，会执行后面的事件</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><a name="Wq6K7"></a></p><h4 id="3-4-3-动态事件缩写"><a href="#3-4-3-动态事件缩写" class="headerlink" title="3.4.3 动态事件缩写"></a>3.4.3 动态事件缩写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @[<span class="hljs-attr">ev</span>]=<span class="hljs-string">&quot;get&quot;</span>&gt;</span>动态事件编写<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;) </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：点击按钮，让元素+1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>显示数量：&#123;&#123; counter &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> example1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#example-1&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>总结知识点：</p><ol><li>如何定义一个基本的vue结构</li><li>插值表达式和 v-text</li><li>v-bind vue 提供的属性绑定机制， 缩写是 ：</li><li>v-on vue   提供的事件绑定机制   缩写是 @</li></ol></blockquote><p><a name="u5FHW"></a></p><h4 id="3-4-5-事件绑定的修饰符"><a href="#3-4-5-事件绑定的修饰符" class="headerlink" title="3.4.5 事件绑定的修饰符"></a>3.4.5 事件绑定的修饰符</h4><blockquote><p>@click.stop&#x3D; “” 阻止事件冒泡<br>@click.prevent&#x3D;”” 阻止默认事件<br>@click.capture&#x3D;”inner” 添加事件捕获<br>@click.self&#x3D;”” 只给某个元素添加事件<br>@click.once&#x3D;””  事件只触发一次<br>@keyup.13&#x3D;”” 键盘修饰符<br>@keyup.enter.13 &#x3D; “”   按键修饰符</p></blockquote><ol><li><p>stop 阻止冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warp&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;warp&quot;</span>&gt;</span>外层div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span>内层div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;.app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">inner</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inner&#x27;</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">warp</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;warp&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>prevent 阻止默认行为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- a标签默认行为 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span>baidu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 表单默认行为 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;a.html&quot;</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;.app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">gotaobao</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;gotaobao&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：默认事件有，a标签，表单事件等；<br />但是如果是表单可以使用当前方式，也可以使用 @submit.prevent</p></li><li><p>capture 实现捕获触发事件的机制【默认为事件冒泡，从内向外返回数据】</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661436525701-da8fef54-cc59-46b9-ad11-c68960466356.png#averageHue=%23fefefc&clientId=ue16017ea-5d94-4&errorMessage=unknown%20error&from=paste&height=270&id=u6e810b42&name=image.png&originHeight=486&originWidth=540&originalType=binary&ratio=1&rotation=0&showTitle=false&size=62254&status=error&style=none&taskId=ua75e3c21-6a3f-42ba-a32e-c0fa93bb077&title=&width=300.0000079472862" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;app&quot;&gt;<br>  &lt;div class=&quot;warp&quot; @click.capture=&quot;warp&quot;&gt;外层div<br>       &lt;div class=&quot;inner&quot; @click.stop=&quot;inner&quot;&gt;内层div&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>  let app = new Vue(&#123;<br>    el:&#x27;.app&#x27;,<br>    data:&#123;<br>      count:0,<br>    &#125;,<br>    methods:&#123;<br>      inner()&#123;<br>        console.log(&#x27;inner&#x27;);<br>      &#125;,<br>      warp()&#123;<br>        console.log(&#x27;warp&#x27;);<br>      &#125;<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>串联事件修饰符，其实就是阻止默认事件(prevent)+阻止冒泡(stop)</li></ol><p>案例：在div中添加a标签，给a标签添加事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warp&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;warp&quot;</span>&gt;</span>外层div<br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> @<span class="hljs-attr">click.prevent.stop</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span>baidu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;.app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">inner</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inner&#x27;</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">warp</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;warp&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>键修饰符，键代码，键别名</li></ol><p>vue运行为v-on在监听键盘事件时，添加了特殊的键盘修饰符<br />vue还非常贴心地给出了常用按键的别名，这样就不必去记keyCode<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661436882788-9a236cac-8453-472b-a8df-cad30ee4d3c7.png#averageHue=%23e7e4e4&clientId=ue16017ea-5d94-4&errorMessage=unknown%20error&from=paste&height=187&id=u711d3027&name=image.png&originHeight=336&originWidth=1023&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40722&status=error&style=none&taskId=u5ba6d559-5374-4012-8c57-8b1c9f93f15&title=&width=568.3333483890254" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 数字：当按下13回车键，触发事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">keydown.13</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 单词：当按下回车键，触发事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">keydown.enter</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">v-on:keyup.left</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：模拟实现input的number效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">keydown.down</span>=<span class="hljs-string">&quot;count -= 1&quot;</span> @<span class="hljs-attr">keydown.up</span>=<span class="hljs-string">&quot;count += 1&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- @keydown.38.prevent=&quot;num+=1&quot; 阻止箭头向前移动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;.app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>常用的键别名：enter，tab，delete，esc，space，up，down，left，right</p></blockquote><ol start="6"><li>self 当事件在该元素本身触发时，触发事件被调用</li></ol><p>点击谁才会触发谁，冒泡和捕获都不存在</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;.app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">gotaobao</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1111</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="7"><li><p>once 只触发一次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 给按钮添加点击事件，组织默认事件，并且只能执行一次 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> @<span class="hljs-attr">click.prevent.once</span>=<span class="hljs-string">&quot;gotaobao&quot;</span>&gt;</span>baidu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br></code></pre></td></tr></table></figure><blockquote><p>总结：.self和.stop都有阻止冒泡的功能，那他们两个之间有什么区别呢？<br>stop阻止所有的冒泡；<br>self只阻止当前元素身上的冒泡行为；跟其他元素的冒泡没关系</p></blockquote></li><li><p>案例1：当按下回车和向上箭头会触发事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;app&quot;&gt;<br>    &lt;input type=&quot;text&quot; @keyup.13.38=&quot;change&quot; v-model=&quot;msg&quot;&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>methods: &#123;<br>  change()&#123;<br>  this.msg = &#x27;绿色&#x27;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666852770319-ba7e55b1-aad6-4c99-9906-72930f21f426.png#averageHue=%23fefdfd&clientId=ue8f0f45d-c226-4&from=paste&height=248&id=zjISf&name=image.png&originHeight=446&originWidth=810&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50332&status=done&style=none&taskId=u5bf25434-a07d-45d5-8e42-ec06d9cc5a8&title=&width=450.0000119209293" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666852793890-34ade670-7a6f-4681-875a-64d0f8a70647.png#averageHue=%23f9eee3&clientId=ue8f0f45d-c226-4&from=paste&height=67&id=NTiO0&name=image.png&originHeight=120&originWidth=1366&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60054&status=done&style=none&taskId=u9858578c-d1ce-47ce-a03f-62abccb1927&title=&width=758.8889089925794" alt="image.png"></p></li></ol><p>案例3：指令练习-改变购买商品数量，总价会变化<br />需要知识点：键盘事件+点击事件+双向数据绑定<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666853376691-370faf11-6c0c-4ab4-b04f-abd67f0cc338.png#averageHue=%23e9e9e8&clientId=ue8f0f45d-c226-4&from=paste&height=96&id=vegLn&name=image.png&originHeight=172&originWidth=1044&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54318&status=done&style=none&taskId=u9f7eb5ae-dc1b-4b9d-94c1-180b352e94e&title=&width=580.0000153647533" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>数量<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>总价<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>短袖<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;jian&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;input type=&quot;text&quot;  size=&quot;1&quot; name=&quot;&quot; id=&quot;&quot; v-bind:value=&quot;num&quot;&gt; --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.38.prevent</span>=<span class="hljs-string">&quot;add&quot;</span> @<span class="hljs-attr">keyup.40.prevent</span> =<span class="hljs-string">&#x27;jian&#x27;</span>  <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;input type=&quot;number&quot;  size=&quot;1&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;num&quot;&gt; --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; num * price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#table&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">num</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">price</span>:<span class="hljs-number">53</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">totlePrice</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>++;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">totlePrice</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span>*<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">jian</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> &lt; <span class="hljs-number">1</span> )&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> = <span class="hljs-number">0</span></span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>--;</span><br><span class="language-javascript">                &#125; </span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">totlePrice</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span>*<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="VFY49"></a></p><h3 id="3-5-v-if-v-else-if-v-else"><a href="#3-5-v-if-v-else-if-v-else" class="headerlink" title="3.5 v-if v-else-if v-else"></a>3.5 v-if v-else-if v-else</h3><p>目标: 控制标签的隐藏或出现</p><ul><li>语法:<ul><li>v-show&#x3D;”vue变量”</li><li>v-if&#x3D;”vue变量”</li></ul></li><li>原理<ul><li>v-show 用的display:none隐藏 (频繁切换使用)</li><li>v-if 直接从DOM树上移除</li></ul></li><li>高级<ul><li>v-else使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--原理： display：none --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isok&quot;</span>&gt;</span>v-show的盒子<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 从dom树删除该元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;istrue&quot;</span>&gt;</span>v-if的盒子<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-comment">&lt;!-- v-if   v-else  v-else-if --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;age &lt; 18&quot;</span>&gt;</span>未成年<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;age &gt; 18 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>成年<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>老年<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">isok</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">istrue</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">age</span>: <span class="hljs-number">15</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>条件渲染指令<br />v-if:如果表达式为真，则渲染该元素，如果为假，则不渲染（dom不存在）<br />v-if和v-else之间不能有其它内容<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;count &gt; 80&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;count &gt; 60&quot;</span>&gt;</span>蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>绿色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>:<span class="hljs-number">70</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>注意：这里v-if,v-else要紧贴着使用，不然会报错，v-if显示，v-else就会隐藏。v-if隐藏，v-else就会显示<br />案例1：点击按钮切换登录&#x2F;注册框<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;show&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登陆<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        手机号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        邮箱地址：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;dianji&#x27;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">dianji</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">show</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">show</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>注意：当我们输入完内容之后，进行切换，会发现文字变化了，但是input没有变化<br />这是因为vuejs有一种尝试复用dom的机制，如果已经在的dom，会复用之前的dom，但是这并不是我们想要的效果，这个时候就可以给他加一个key值，告诉vuejs，这是唯一的，是不能复用的input<blockquote><p>解决方案：只需要给所有的input添加一个key值就可以了</p></blockquote></li></ul></li></ul><p>案例2：事件案例-切换登陆注册框<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666853339835-c8bb5a76-5474-4009-8449-449ec64e51c8.png#averageHue=%23fcfcfb&clientId=ue8f0f45d-c226-4&from=paste&height=387&id=C280n&name=image.png&originHeight=696&originWidth=652&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85027&status=done&style=none&taskId=u8bd186a6-2a66-40bd-bb53-dc4e4624ccf&title=&width=362.2222318178344" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-id">#app</span> <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#f00</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;loginShow&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登陆<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;two&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;registerShow&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    手机号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;thr&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    邮箱地址：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;for&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;change&#x27;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">loginShow</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">registerShow</span>:<span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">loginShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">loginShow</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">registerShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">registerShow</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="g3FQL"></a></p><h3 id="5-6-v-show"><a href="#5-6-v-show" class="headerlink" title="5.6 v-show"></a>5.6 v-show</h3><p>条件渲染指令<br />v-show的效果跟v-if很相似，都有判断的效果，但是v-if是可以和v-else联合使用，但是v-show不可以，但是v-show，也可以判断<br />如果表达式为真，则显示该元素，如果为假，则隐藏该元素（dom存在）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag1&quot;</span>&gt;</span><br>    flag1的内容<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag2&quot;</span>&gt;</span><br>    flag2的内容<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">flag1</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">flag2</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：当v-if判断的时候不满足条件不现实，但是v-show不满足条件的时候添加了一个display：none的效果来隐藏</p><p>总结：v-show和v-if的区别</p><blockquote><p>v-if 的特点：每次都会重新删除或创建元素<br>v-show的特点：每次不会重新进行dom的删除和创建操作，只是切换了元素的display：none样式<br>v-if 有较高的切换性能消耗<br>v-show 有较高的初始值渲染消耗<br>如果元素设计到频繁的切换，最好不要使用v-if，而是推荐使用v-show<br>如果元素kennel永远也不会被显示出来被用户看到，则推荐使用 v-if</p></blockquote><blockquote><p>自己总结：<br>v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。<br>v-show：调整css dispaly属性，可以使客户端操作更加流畅。</p></blockquote><p><a name="Y4eN3"></a></p><h3 id="5-7-v-for"><a href="#5-7-v-for" class="headerlink" title="5.7 v-for"></a>5.7 v-for</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666854025292-7e850f4c-43a7-45da-b4a9-1a3937a47a22.png#averageHue=%232f2f26&clientId=ue8f0f45d-c226-4&from=paste&height=244&id=u4e33b56e&name=image.png&originHeight=440&originWidth=334&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107379&status=done&style=none&taskId=u6437975e-5d2a-46df-8208-a1648ed6a26&title=&width=185.55556047109923" alt="image.png"><br />列表渲染指令</p><ul><li>根据数据生成列表结构</li><li>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</li><li>语法：v-for&#x3D;”(item, index) in xxx” :key&#x3D;”yyy”</li><li>item，index可以结合其他指令一起使用</li><li>数组长度的更新会同步到页面上（响应式开发）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 遍历数组：  color: [&#x27;red&#x27;,&#x27;blue&#x27;,&#x27;green&#x27;] --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- item为数组中的每项元素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in arr&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 等价于上面的效果 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item of arr&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- item为元素值，index为索引; 括号中的顺序不能反 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in arr&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-comment">&lt;!--   对象遍历   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(val,key,i) in person&quot;</span>&gt;</span>&#123;&#123;val&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;i&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in person&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> --&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,key) in person&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;-----&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,key,index) in person&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;----&#123;&#123;key&#125;&#125;-----&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--   数字遍历   --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in 10&quot;</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">arr</span>: [<span class="hljs-string">&#x27;Amy&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>, <span class="hljs-string">&#x27;Black&#x27;</span>],</span><br><span class="language-javascript">      <span class="hljs-attr">person</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Rose&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">34</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;H5&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><a name="eNlQf"></a></p><h4 id="5-7-1-案例：定义一个数字数组，循环输出数字列表，将列表内容进行排序"><a href="#5-7-1-案例：定义一个数字数组，循环输出数字列表，将列表内容进行排序" class="headerlink" title="5.7.1 案例：定义一个数字数组，循环输出数字列表，将列表内容进行排序"></a>5.7.1 案例：定义一个数字数组，循环输出数字列表，将列表内容进行排序</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in arr&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">arr</span>: [<span class="hljs-number">23</span>,<span class="hljs-number">14</span>,<span class="hljs-number">56</span>,<span class="hljs-number">34</span>,<span class="hljs-number">78</span>],</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">items</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> a - b</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="P08fP"></a></p><h4 id="5-7-2-案例：对学生信息进行排序，按照年龄排序"><a href="#5-7-2-案例：对学生信息进行排序，按照年龄排序" class="headerlink" title="5.7.2 案例：对学生信息进行排序，按照年龄排序"></a>5.7.2 案例：对学生信息进行排序，按照年龄排序</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(stu,index) in student&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;---&#123;&#123;stu.name&#125;&#125;----&#123;&#123;stu.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">student</span>:[</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack1&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">13</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack2&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">48</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack3&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">38</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack4&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack5&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">158</span>&#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">sortStu</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> a.<span class="hljs-property">age</span> - b.<span class="hljs-property">age</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="o5lMj"></a></p><h4 id="5-7-3案例：使用for循环添加学生信息【-v-for遍历中的key关键词】"><a href="#5-7-3案例：使用for循环添加学生信息【-v-for遍历中的key关键词】" class="headerlink" title="5.7.3案例：使用for循环添加学生信息【 v-for遍历中的key关键词】"></a>5.7.3案例：使用for循环添加学生信息【 v-for遍历中的key关键词】</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1666854212889-be314bbd-4676-44ee-a025-b0af57db41ae.png#averageHue=%23ededec&clientId=ue8f0f45d-c226-4&from=paste&height=177&id=iEusR&name=image.png&originHeight=318&originWidth=950&originalType=binary&ratio=1&rotation=0&showTitle=false&size=80980&status=done&style=none&taskId=u99f5a992-5e21-4629-8569-5b1b30132a8&title=&width=527.7777917591146" alt="image.png"><br />v-for 的默认行为会尝试原地修改元素而不是移动它们。要强制其重新排序元素，你需要用特殊 attribute key 来提供一个排序提示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span><br>  年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 点击添加学生信息 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 遍历学生信息 </span><br><span class="hljs-comment">必须添加key值，否则顺序会乱</span><br><span class="hljs-comment">    注意：key值不能使用index，推荐使用数据中的id值</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(per,index) in student&quot;</span> <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;per.name&quot;</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;per.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;per.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">student</span>:[</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;rose&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;,</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">21</span>&#125;</span><br><span class="language-javascript">      ]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-title function_">unshift</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span>,<span class="hljs-attr">age</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>&#125;);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="ZjkM2"></a></p><h4 id="5-7-4-注意事项"><a href="#5-7-4-注意事项" class="headerlink" title="5.7.4 注意事项"></a>5.7.4 注意事项</h4><p>当和 v-if 一起使用时，v-for 的优先级比 v-if 更高<br />这意味着 v-if 将分别重复运行于每个 v-for 循环中；但是这种优先机制，有时候也是非常有用的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;val in arr&#x27;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;val%2==0&#x27;</span>&gt;</span><br>    &#123;&#123;val&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;js/vue.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">arr</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="tbO8d"></a></p><h3 id="5-8-v-model"><a href="#5-8-v-model" class="headerlink" title="5.8 v-model"></a>5.8 v-model</h3><p>只有 v-model这唯一一个指令可以实现双向数据绑定<br />双向数据绑定<br />数据变化 -&gt; 视图自动同步<br />视图变化 -&gt; 数据自动同步<br />js数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">tel</span>: <span class="hljs-string">&#x27;123&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请输入手机号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;tel&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：使用v-model指令，可以实现表单元素和model中数据的双向绑定<br />注意：v-model只能运用在表单元素中input（text，address，email。。。），select，checked，textarea<br><a name="YHD2q"></a></p><h4 id="5-8-1-使用双向数据绑定，实现数据添加"><a href="#5-8-1-使用双向数据绑定，实现数据添加" class="headerlink" title="5.8.1 使用双向数据绑定，实现数据添加"></a>5.8.1 使用双向数据绑定，实现数据添加</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&#x27;formsub&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;oneform.username&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;oneform.password&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提价&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; </span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123; </span><br><span class="language-javascript">      <span class="hljs-attr">oneform</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      &#125;, </span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">formsub</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">oneform</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="JcvVc"></a></p><h4 id="5-8-2-获取下拉菜单数据"><a href="#5-8-2-获取下拉菜单数据" class="headerlink" title="5.8.2 获取下拉菜单数据"></a>5.8.2 获取下拉菜单数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&#x27;selSubmit&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;sel&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>--请输入用户名--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;&#123; city: &#x27;beijing&#x27; &#125;&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;&#123; city: &#x27;shanghai&#x27; &#125;&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;&#123; city: &#x27;shenzhen&#x27; &#125;&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; </span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123; </span><br><span class="language-javascript">      <span class="hljs-attr">sel</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">selSubmit</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sel</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sel</span>.<span class="hljs-property">city</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：下拉菜单进行双休数据绑定的时候，需要让data和option中的value值保持一致<br><a name="O0MMh"></a></p><h4 id="5-8-3-v-model的修饰符"><a href="#5-8-3-v-model的修饰符" class="headerlink" title="5.8.3 v-model的修饰符"></a>5.8.3 v-model的修饰符</h4><blockquote><p>v-model.lazy 只有在input输入框发生一个blur时才触发<br />v-model.trim 将用户输入的前后的空格去掉<br />v-model.number 将用户输入的字符串转换成number</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入内容转为字符串 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&#x27;msg&#x27;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入内容去除左右两边空格 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model:trim</span>=<span class="hljs-string">&#x27;msg&#x27;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入内容的时候lazy不会改变，当失去焦点的时候才改变 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&#x27;msg&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>输出msg: &#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="lSkzC"></a></p><h4 id="5-8-4-计算器案例"><a href="#5-8-4-计算器案例" class="headerlink" title="5.8.4 计算器案例"></a>5.8.4 计算器案例</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661496334559-5823ad27-1785-44df-803e-7a92eed7fd91.png#averageHue=%23f6f6f5&clientId=ue16017ea-5d94-4&errorMessage=unknown%20error&from=paste&height=56&id=TWDva&name=image.png&originHeight=100&originWidth=1160&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9416&status=error&style=none&taskId=u765a270d-6bcf-4fe4-81a6-43a1a9cc0c9&title=&width=644.4444615163925" alt="image.png"></p><blockquote><p>eval() 解析执行某个字符串，并执行其中的的 JavaScript 代码。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;num1&#x27;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;opt&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;+&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;num2&#x27;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;=&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;cale&#x27;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;result&#x27;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">num1</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">num2</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">result</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">opt</span>:<span class="hljs-string">&#x27;-&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">cale</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">switch</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">op</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num1</span>)+<span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num2</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num1</span>)-<span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num2</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num1</span>)*<span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num2</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num1</span>)/<span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num2</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">            简单写法：不用转换数据类型</span></span><br><span class="hljs-comment"><span class="language-javascript">            var codeStr=this.num1 + this.opt + this.num2;</span></span><br><span class="hljs-comment"><span class="language-javascript">            this.result=eval(codeStr)</span></span><br><span class="hljs-comment"><span class="language-javascript">            */</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="7RDeK"></a></p><h3 id="5-9-v-once"><a href="#5-9-v-once" class="headerlink" title="5.9 v-once"></a>5.9 v-once</h3><p>v-once指令所在节点在初次动态渲染后，就视为静态内容了<br />以后数据改变不会引起v-once所在结构的更新，可以优化性能<br />只渲染一次</p><ol><li><p>语法结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 单个元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有子元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-once</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>comment<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只渲染一次，数据更新，重新渲染页面时不会重新渲染该数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>修改msg的值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;改变&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><a name="FXrhB"></a></p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><blockquote><ol><li>变量名和方法名不能重复，否则会报错；</li></ol></blockquote><p><a name="BpDMA"></a></p><h2 id="6-本章小结"><a href="#6-本章小结" class="headerlink" title="6. 本章小结"></a>6. 本章小结</h2><p><a name="0883797d"></a></p><h2 id="7-本章作业"><a href="#7-本章作业" class="headerlink" title="7.  本章作业"></a>7.  本章作业</h2><blockquote><ol><li>练习每一个指令的使用</li><li>实现简单计算器效果</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661496334559-5823ad27-1785-44df-803e-7a92eed7fd91.png#averageHue=%23f6f6f5&clientId=ue16017ea-5d94-4&errorMessage=unknown%20error&from=paste&height=56&id=U5524&name=image.png&originHeight=100&originWidth=1160&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9416&status=error&style=none&taskId=u765a270d-6bcf-4fe4-81a6-43a1a9cc0c9&title=&width=644.4444615163925" alt="image.png"></p><blockquote><ol start="3"><li>实现购物车效果</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667289149104-360c1f08-6475-4cb7-8dae-4671e7fd0c94.png#averageHue=%23e9e9e9&clientId=u88ee98ec-a29a-4&from=paste&height=96&id=u0092f578&name=image.png&originHeight=172&originWidth=1044&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36988&status=done&style=none&taskId=u47a33ab8-ed67-4903-a53c-45327eaf7d0&title=&width=580.0000153647533" alt="image.png"></p><blockquote><ol start="4"><li>使用vue实现轮播图效果，点击下一页切换到下一张，点击上一页切换到上一张图片</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661522535590-8720a0cb-8741-48d0-8540-5e3ef13c1cd5.png#averageHue=%23f2f4fd&clientId=uf88525b4-bfa9-4&errorMessage=unknown%20error&from=paste&height=532&id=u25ecbb76&name=image.png&originHeight=958&originWidth=1682&originalType=binary&ratio=1&rotation=0&showTitle=false&size=509582&status=error&style=none&taskId=ubde3699e-a1ae-4632-9139-7a3f6d85ed1&title=&width=934.4444691987692" alt="image.png"></p><blockquote><ol start="5"><li>学生成绩录入、筛选、删除、监听</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661522874535-31fef54e-bd83-4fd7-94b4-6c1fb6e9ea27.png#averageHue=%23fefefd&clientId=uf88525b4-bfa9-4&errorMessage=unknown%20error&from=paste&height=258&id=ua2744947&name=image.png&originHeight=465&originWidth=1681&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36774&status=error&style=none&taskId=u94756196-1239-4da4-b929-fc39f223e05&title=&width=933.8889136284964" alt="image.png"></p><blockquote><ol start="6"><li>实现tab切换效果</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667289187240-6ccddc88-8a48-4531-ac0e-ed2d3ccafdc1.png#averageHue=%23f9ebeb&clientId=u88ee98ec-a29a-4&from=paste&height=247&id=u07fb6491&name=image.png&originHeight=444&originWidth=742&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17444&status=done&style=none&taskId=u488fe485-8bd4-41ef-a60f-938f09582f1&title=&width=412.2222331423821" alt="image.png"></p><p><a name="VRF7v"></a></p><h2 id="8-解决问题"><a href="#8-解决问题" class="headerlink" title="8. 解决问题"></a>8. 解决问题</h2><p><a name="X8wfj"></a></p><h4 id="8-1-安装了vuejs-devtools但是vue标签不是彩色"><a href="#8-1-安装了vuejs-devtools但是vue标签不是彩色" class="headerlink" title="8.1 安装了vuejs-devtools但是vue标签不是彩色"></a>8.1 安装了vuejs-devtools但是vue标签不是彩色</h4><ol><li>在浏览器打开扩展程序</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661486080828-231b1ee0-e4cc-474a-89e4-49734c606fe5.png#averageHue=%23fdfcfb&clientId=u96de9006-1761-4&errorMessage=unknown%20error&from=paste&height=429&id=ue9aa2ef0&name=image.png&originHeight=536&originWidth=340&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33966&status=error&style=none&taskId=u2812fbfc-0bd0-4b91-944d-1423090588a&title=&width=272" alt="image.png"></p><ol start="2"><li>找到vue，点击详情</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661486052949-20096e0f-fbf1-45f0-8442-3725eb95029c.png#averageHue=%23fdfdfc&clientId=u96de9006-1761-4&errorMessage=unknown%20error&from=paste&height=193&id=u03c6d7f2&name=image.png&originHeight=241&originWidth=458&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18850&status=error&style=none&taskId=u169e5b26-8cc8-4a60-9e24-39dc3df7323&title=&width=366.4" alt="image.png"></p><ol start="3"><li>打开无痕 &#x2F; 允许访问网址</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661486118148-588bdb4a-4749-476b-94a2-94a89a41a444.png#averageHue=%23fefdfc&clientId=u96de9006-1761-4&errorMessage=unknown%20error&from=paste&height=301&id=u5f5ff177&name=image.png&originHeight=376&originWidth=672&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30618&status=error&style=none&taskId=u9e87192e-50a7-4cfb-aac7-bc87d424442&title=&width=537.6" alt="image.png"><br />参考文档：<a href="https://blog.csdn.net/goog_man/article/details/112556875">https://blog.csdn.net/goog_man&#x2F;article&#x2F;details&#x2F;112556875</a><br><a name="y20TM"></a></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a><a href="https://cn.vuejs.org/"><br /></a>面试题</h2><ol><li>什么事mvc和mvvm</li><li>v-show和v-if有什么区别</li><li>vue中的v-for和v-if为什么不建议一起使用</li><li>为什么需要给for循环添加key值</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue基本语法</title>
    <link href="/%E5%AD%A6%E4%B9%A0/vue/1-vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/%E5%AD%A6%E4%B9%A0/vue/1-vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>课程目标</p><ol><li>了解vue的特点</li><li>理解vue的运行机制</li><li>掌握vue的基础语法</li></ol></blockquote><p><a name="7a1209c4"></a></p><h2 id="1-vue的特点"><a href="#1-vue的特点" class="headerlink" title="1. vue的特点"></a>1. vue的特点</h2><p><a name="rasqQ"></a></p><h3 id="1-0-什么是MVC，什么是MVVM"><a href="#1-0-什么是MVC，什么是MVVM" class="headerlink" title="1.0 什么是MVC，什么是MVVM"></a>1.0 什么是MVC，什么是MVVM</h3><p>MVC：全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是一种软件设计典范，将业务逻辑、数据、界面显示分离组织代码的形式<br />M：model层，主要处理数据的curd<br />V：view 视图层，前端页面<br />C：controller 控制器蹭，也被称为业务逻辑层，路由也是这里面的，最重要的是conrtol，数据的业务逻辑。例：登陆，注销<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661313474459-ff7fd5fa-7926-4a53-8d30-cbdc98274cb7.png#averageHue=%23f2eee7&clientId=u0368daff-1c05-4&errorMessage=unknown%20error&from=paste&height=500&id=u6860fb52&name=image.png&originHeight=900&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=336996&status=error&style=none&taskId=u63481835-abd8-414f-a597-145dfd337db&title=&width=666.6666843273026" alt="image.png"><br />前端主要负责MVC中的V（view）着一层，主要工作就是和界面打交道，来制作前端页面效果</p><p>MVVM：是Model-View-ViewModel的简写，MVVM是前端视图层的概念，主要关注于视图层分离，也就是说：MVVM把前端的视图层，分为了三部分，Model，View，VM(ViewModel)<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661438628286-c60ec040-8001-4606-bbbe-4299d8980d24.png#averageHue=%23f0f0f0&clientId=ue16017ea-5d94-4&errorMessage=unknown%20error&from=paste&height=156&id=u3d96af7c&name=image.png&originHeight=280&originWidth=1260&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79519&status=error&style=none&taskId=uc781c0d0-48fc-475d-b7e7-d4d6b8f1640&title=&width=700.0000185436678" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661438677196-42778447-b94d-4010-bd4c-1f39e99f4106.png#averageHue=%23fbf9f2&clientId=ue16017ea-5d94-4&errorMessage=unknown%20error&from=paste&height=237&id=ud3b9ebee&name=image.png&originHeight=427&originWidth=887&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69584&status=error&style=none&taskId=ueb6cb47c-ba84-4825-b46d-f54a8d4d39f&title=&width=492.7777908319312" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661482191563-6943c832-3649-4606-8f43-9d207fc6b9ce.png#averageHue=%23f4f4f3&clientId=u96de9006-1761-4&errorMessage=unknown%20error&from=paste&height=502&id=u5ca3de37&name=image.png&originHeight=628&originWidth=1113&originalType=binary&ratio=1&rotation=0&showTitle=false&size=112761&status=error&style=none&taskId=u1ce6cd85-45f8-4b26-9aab-e2b872f54fe&title=&width=890.4" alt="image.png"><br><a name="7b6f4881"></a></p><h3 id="1-1-三大前端框架"><a href="#1-1-三大前端框架" class="headerlink" title="1.1 三大前端框架"></a>1.1 三大前端框架</h3><p>目前前端有三个非常流行的框架，非别是angularjs,reactjs,vuejs。而这三个当中，vuejs的受欢迎度目前是最高的，而开发vuejs的就是一个中国人尤雨溪。<br />vue是国人开发的，叫做尤雨溪，他也是html5版clear的打造人；<br />2014年2月，开源了一个前端开发库Vue.js<br />2016年9月，加盟阿里巴巴weex团队，尤雨溪（尤大神，背后宣传支持）称他将以技术顾问的身份加入 Weex 团队来做 Vue 和 Weex 的 JavaScript runtime 整合，目标是让大家能用 Vue 的语法跨三端。<br />任何一个创始人在语言推广初期，都会借助于大企业；比如python借助谷歌；php借助百度；vue借助阿里巴巴都是一样的；<br />从14年到现在仅仅六七年的时间，vue的用户使用量远远超过预期；<br />国外的网站：<a href="https://vuejs.org/">https://vuejs.org/</a><br />国内的网站 使用中文版的：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1661309786715-78b748ac-ff9a-4f6a-b199-5532a50dd14b.png#averageHue=%234a545c&clientId=u1efb9bbd-6891-4&errorMessage=unknown%20error&from=paste&height=256&id=lM1im&name=image.png&originHeight=460&originWidth=460&originalType=binary&ratio=1&rotation=0&showTitle=false&size=318566&status=error&style=none&taskId=u08cf6c4e-c0a0-4326-b567-8ecbce6f2ac&title=&width=255.555562325466" alt="image.png"><br><a name="13288966"></a></p><h3 id="1-2-vue的优势"><a href="#1-2-vue的优势" class="headerlink" title="1.2 vue的优势"></a>1.2 vue的优势</h3><ul><li>Vue致力解决的问题与React一致，但却提供了另外一套解决方案。Vue使用模板系统而不是JSX，使其对现有应用的升级更加容易</li><li>Vue的开发者尤雨溪是中国人，框架本身提供了大量丰富的中文文档，这也为Vue的发展和使用带来巨大的优势。</li><li>Vue框架适合于需要快速上手、上线的应用，还适用于迁移传统的多单面应用。<br><a name="hdXKb"></a></li></ul><h3 id="1-3-官网地址"><a href="#1-3-官网地址" class="headerlink" title="1.3 官网地址"></a>1.3 官网地址</h3><ul><li><a href="https://vuejs.org/">https://vuejs.org/</a>  国外的网站</li><li><a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a>  国内的网站 使用中文版的<br><a name="IO4aS"></a></li></ul><h2 id="2-vue的下载和使用"><a href="#2-vue的下载和使用" class="headerlink" title="2. vue的下载和使用"></a>2. vue的下载和使用</h2><p><a name="eNjX4"></a></p><h3 id="2-1-直接用-引入"><a href="#2-1-直接用-引入" class="headerlink" title="2.1 直接用 引入"></a>2.1 <a href="https://cn.vuejs.org/v2/guide/installation.html#%E7%9B%B4%E6%8E%A5%E7%94%A8-lt-script-gt-%E5%BC%95%E5%85%A5">直接用<script> 引入</a></h3><p><a name="m1Gw1"></a></p><h3 id="2-2-使用CDN"><a href="#2-2-使用CDN" class="headerlink" title="2.2 使用CDN"></a>2.2 使用CDN</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="QTQUz"></a></p><h3 id="2-3-使用npm安装"><a href="#2-3-使用npm安装" class="headerlink" title="2.3 使用npm安装"></a>2.3 使用npm安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g @vue/cli<br></code></pre></td></tr></table></figure><p><a name="jv0I1"></a></p><h2 id="3-挂载点配置"><a href="#3-挂载点配置" class="headerlink" title="3. 挂载点配置"></a>3. 挂载点配置</h2><p><a name="YWqaq"></a></p><h3 id="3-1-vue的模板"><a href="#3-1-vue的模板" class="headerlink" title="3.1 vue的模板"></a>3.1 vue的模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>改变数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &#123;&#123;&#125;&#125;里是js的表达式 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;msg - 8&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="A2ug2"></a></p><h3 id="3-2-vue的实例化"><a href="#3-2-vue的实例化" class="headerlink" title="3.2 vue的实例化"></a>3.2 vue的实例化</h3><p>创建vue实例传入option</p><blockquote><p>option中主要有三个内容<br>el：<br>类型：string （#app）| HTMLElement  （document.querySelector）<br>作用：决定之后Vue实例会管理哪一个DOM。<br>data：<br>类型：Object | Function （组件当中data必须是一个函数）<br>作用：Vue实例对应的数据对象。<br>methods：<br>类型：{[key:string]:Function}<br>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// jquery是以DOM做为驱动</span><br><span class="hljs-comment">// Vue是以数据做为驱动</span><br><span class="hljs-comment">// 编程范式：声明式</span><br><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; <span class="hljs-comment">// 创建vue实例，实力化出来的vm就是MVVM中的调度者</span><br>  <span class="hljs-comment">// 挂载点</span><br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">// element 元素</span><br>  <span class="hljs-attr">data</span>: &#123; <span class="hljs-comment">// data属性：存放el中需要的数据</span><br>    <span class="hljs-comment">//只有注册在data当中的数据才是响应式数据，数据改变，会触发视图的重新渲染</span><br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello world&#x27;</span>, <span class="hljs-comment">// vue中不存在dom操作，直接通过渲染的方式显示</span><br>    <span class="hljs-attr">book</span>:[<br>      &#123;<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>&#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-comment">// 方法</span><br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-comment">// this等价于vm这个vue的根实例</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;hahaha&#x27;</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 用于计算的属性</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>      <span class="hljs-comment">// 计算商品总价</span><br>      <span class="hljs-attr">totalPrice</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">books</span>.<span class="hljs-property">length</span>; i++) &#123;<br>              result += <span class="hljs-variable language_">this</span>.<span class="hljs-property">books</span>[i].<span class="hljs-property">price</span><br>          &#125;<br>          <span class="hljs-keyword">return</span> result<br>      &#125;<br>  &#125;    <br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="sAcEk"></a></p><h3 id="3-3-编程范式【了解】"><a href="#3-3-编程范式【了解】" class="headerlink" title="3.3 编程范式【了解】"></a>3.3 编程范式【了解】</h3><p>参考文档：<a href="https://blog.csdn.net/weixin_42968460/article/details/123836679">https://blog.csdn.net/weixin_42968460/article/details/123836679</a><br />编程范式是一种方法论，用来指导你编写代码过程中的思路、规则、习惯和定式<br />编程范式主要有三种：命令式编程(Imperative)、声明式编程(Declarative)和函数式编程(Functional)。<br />命令式编程(Imperative)：命令式编程的主要思想是关注计算机执行的步骤，即一步一步告诉计算机先做什么再做什么。</p><p><strong>声明式编程(Declarative)：</strong>声明式编程是以数据结构的形式来表达程序执行的逻辑。它的主要思想是告诉计算机应该做什么，但不指定具体要怎么做。 SQL 语句就是最明显的一种声明式编程的例子。</p><p><strong>函数式编程(Functional)：</strong><br />函数式编程和声明式编程是有所关联的，因为他们思想是一致的：即只关注做什么而不是怎么做。但函数式编程不仅仅局限于声明式编程<br><a name="9opNo"></a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>回流和重绘</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/62-%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/62-%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98/</url>
    
    <content type="html"><![CDATA[<p><a name="Wi4jU"></a></p><h2 id="什么是回流？"><a href="#什么是回流？" class="headerlink" title="什么是回流？"></a>什么是回流？</h2><p><br />页面中元素的尺寸，布局，隐藏等改变而需要重新构建页面，就会引起回流。</p><p><a name="VTPkS"></a></p><h2 id="什么是重绘？"><a href="#什么是重绘？" class="headerlink" title="什么是重绘？"></a>什么是重绘？</h2><p><br />页面中元素属性发生改变，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘</p><p><a name="H0sm0"></a></p><h2 id="有什么区别？"><a href="#有什么区别？" class="headerlink" title="有什么区别？"></a>有什么区别？</h2><p><br />回流必将引起重绘，而重绘不一定会引起回流。比如：只有颜色改变的时候就只会发生重绘而不会引起回流<br />当页面布局和几何属性改变时就需要回流<br />比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变</p><p><a name="e1Mgv"></a></p><h2 id="优化项目，提高性能-应用场景："><a href="#优化项目，提高性能-应用场景：" class="headerlink" title="优化项目，提高性能 应用场景："></a>优化项目，提高性能 应用场景：</h2><ol><li>我们可以改变一些写法减少回流和重绘</li></ol><p>比如改变样式的时候，不去改变他们每个的样式，而是直接改变className 。</p><ol start="2"><li>将频繁的操作改为一次性操作，通过创建文档碎片，最后一次性加入文档碎片。</li></ol><p>参考文档：<a href="https://blog.csdn.net/weixin_43822787/article/details/120434963">https://blog.csdn.net/weixin_43822787&#x2F;article&#x2F;details&#x2F;120434963</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>json-server</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/61-json-server/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/61-json-server/</url>
    
    <content type="html"><![CDATA[<p><a name="399cb21e"></a></p><h2 id="JSON-Server基础使用"><a href="#JSON-Server基础使用" class="headerlink" title="JSON-Server基础使用"></a>JSON-Server基础使用</h2><p>JSON-Server 是一个 Node 模块，运行 Express 服务器，你可以指定一个 json 文件作为 api 的数据源。<br />json-server可以直接把一个json文件托管成一个具备全RESTful风格的API,并支持跨域、jsonp、路由订制、数据快照保存等功能的 web 服务器。<br><a name="85fcb75a"></a></p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><ol><li><p>查看是否安装node </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node -v<br></code></pre></td></tr></table></figure></li><li><p>查看是否安装npm </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm -v<br></code></pre></td></tr></table></figure></li><li><p>安装json-server </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install -g json-server<br></code></pre></td></tr></table></figure></li><li><p>查看json-server的版本 </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">json</span>-<span class="hljs-keyword">server</span> -v<br></code></pre></td></tr></table></figure></li><li><p>配置db.json文件 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;student&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1000</span>,<br>      <span class="hljs-string">&quot;uname&quot;</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>      <span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;web前端&quot;</span>,<br>      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;我叫小明，明天的明&quot;</span>,<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">19</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1001</span>,<br>      <span class="hljs-string">&quot;uname&quot;</span>: <span class="hljs-string">&quot;小红&quot;</span>,<br>      <span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;java开发&quot;</span>,<br>      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;我叫小红，红色的红&quot;</span>,<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;tableList&quot;</span>:[<span class="hljs-string">&#x27;首页&#x27;</span>,<span class="hljs-string">&#x27;公司概况&#x27;</span>,<span class="hljs-string">&#x27;云和教育&#x27;</span>,<span class="hljs-string">&#x27;云和技术&#x27;</span>,<span class="hljs-string">&#x27;云和服务&#x27;</span>,<span class="hljs-string">&#x27;云和国际&#x27;</span>,<span class="hljs-string">&#x27;云和网课&#x27;</span>,<span class="hljs-string">&#x27;云和招聘&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动json-server </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">json-server --watch db.<span class="hljs-property">json</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意：</span><br><span class="hljs-comment">1. db.json为json文件的名称，你自己的文件名叫什么，就启动对应的文件就可以了</span><br><span class="hljs-comment">2. 启动json-server的时候，必须在你db.json所在的文件夹下进行启动</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>这样服务器就可以启动成功了，可以通过配置db.json文件，访问服务器里面的数据<br />访问地址：127.0.0.1:3300&#x2F;student<br><a name="2d9b262e"></a></p></li></ol><h1 id="使用json-server实现增删改查"><a href="#使用json-server实现增删改查" class="headerlink" title="使用json-server实现增删改查"></a>使用json-server实现增删改查</h1><p><a name="533abd11"></a></p><h4 id="1-添加数据-post请求"><a href="#1-添加数据-post请求" class="headerlink" title="1. 添加数据 post请求"></a>1. 添加数据 post请求</h4><p>在apifox中创建一个 快捷调试<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1656918900255-792cf129-5305-4fa9-833d-82bebf1c7caa.png#averageHue=%231b1c21&clientId=u26cf33e8-0896-4&errorMessage=unknown%20error&from=paste&height=836&id=u10539fcc&name=image.png&originHeight=1504&originWidth=5120&originalType=binary&ratio=1&rotation=0&showTitle=false&size=548148&status=error&style=none&taskId=u552dc4ef-bb10-4cb2-99c6-e4ada49292c&title=&width=2844.444519796491" alt="image.png"></p><p>直接点击发送，当body中返回下面内容，表示添加成功<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1656918925746-bfddb67f-c3aa-49c4-af66-4244a13ba6b6.png#averageHue=%231b1c21&clientId=u26cf33e8-0896-4&errorMessage=unknown%20error&from=paste&height=836&id=u57491b3f&name=image.png&originHeight=1504&originWidth=5120&originalType=binary&ratio=1&rotation=0&showTitle=false&size=548148&status=error&style=none&taskId=u457601e3-04c0-4690-9b84-a924b304d3a&title=&width=2844.444519796491" alt="image.png"><br />注意：不需要添加id，他会自动添加id值<br><a name="2d0c3818"></a></p><h4 id="2-获取指定id的数据"><a href="#2-获取指定id的数据" class="headerlink" title="2. 获取指定id的数据"></a>2. 获取指定id的数据</h4><blockquote><p>请求格式：<br>get &#x2F;资源名 获取所有的资源<br>get &#x2F;资源名&#x2F;:id 获取id为对应id的资源</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1656918944173-ef796f92-28ed-4b19-89a8-95934c5a88a7.png#averageHue=%23fcfcfc&clientId=u26cf33e8-0896-4&errorMessage=unknown%20error&from=paste&height=348&id=ua9a3be13&name=image.png&originHeight=1440&originWidth=2112&originalType=binary&ratio=1&rotation=0&showTitle=false&size=287363&status=error&style=none&taskId=u19579a72-ac59-4ca7-b2a6-0a690744705&title=&width=510.998291015625" alt="image.png"><br><a name="eb0d518d"></a></p><h4 id="3-修改数据-put"><a href="#3-修改数据-put" class="headerlink" title="3. 修改数据 - put"></a>3. 修改数据 - put</h4><p>修改的时候需要传递id，并且重制要修改的字段<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1664427752122-5a91e09f-1cea-441d-a912-10f1290fbeda.png#averageHue=%23f7f5f1&clientId=u4885a5dd-d79c-4&errorMessage=unknown%20error&from=paste&height=316&id=u36f3af20&name=image.png&originHeight=568&originWidth=1404&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66678&status=error&style=none&taskId=u5607605b-7e69-4190-b707-84f9f3358f0&title=&width=780.000020662944" alt="image.png"><br />除了使用put可以修改时数据以外，还可以使用patch修改数据<br><a name="f3f13d12"></a></p><h4 id="4-删除数据-delete"><a href="#4-删除数据-delete" class="headerlink" title="4. 删除数据 - delete"></a>4. 删除数据 - delete</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1656918999950-ee9243ef-40e8-4ac6-be00-88be7caf4305.png#averageHue=%231d1e22&clientId=u26cf33e8-0896-4&errorMessage=unknown%20error&from=paste&height=661&id=u0628f42d&name=image.png&originHeight=1190&originWidth=5120&originalType=binary&ratio=1&rotation=0&showTitle=false&size=445390&status=error&style=none&taskId=u1f3baefd-de74-4b00-87db-3280cebdb2d&title=&width=2844.444519796491" alt="image.png"><br />删除数据，只需要在上面传递要删除的id号<br />总结：json-server中使用的六个接口</p><ul><li>get &#x2F;资源名 获取所有的资源</li><li>get &#x2F;资源名&#x2F;:id 获取id为对应id的资源</li><li>post &#x2F;资源名 创建一个新的资源</li><li>put &#x2F;资源名&#x2F;:id 修改id为对应id的资源，覆盖更新</li><li>patch &#x2F;资源名&#x2F;:id 修改id为对应id的资源 局部更新</li><li>delete &#x2F;资源名&#x2F;:id 删除对应id的资源</li></ul><p><a name="224baef6"></a></p><h1 id="常用功能及参数"><a href="#常用功能及参数" class="headerlink" title="常用功能及参数"></a>常用功能及参数</h1><p><a name="9e2fb939"></a></p><h4 id="1-实现分页效果"><a href="#1-实现分页效果" class="headerlink" title="1. 实现分页效果"></a>1. 实现分页效果</h4><blockquote><p>_ page 表示请求第几页_<br>_ limit 表示一页显示多少条数据</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1656919013105-cc1f022c-80be-47d1-ba11-c1fb1808a212.png#averageHue=%23191a1e&clientId=u26cf33e8-0896-4&errorMessage=unknown%20error&from=paste&height=710&id=ue1c6c0d3&name=image.png&originHeight=1278&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=352598&status=error&style=none&taskId=ud0751973-ad33-4519-be1e-dbc97aa5aa6&title=&width=1422.2222598982455" alt="image.png"><br><a name="120ce36a"></a></p><h4 id="2-查询到指定姓名的用户信息"><a href="#2-查询到指定姓名的用户信息" class="headerlink" title="2. 查询到指定姓名的用户信息"></a>2. 查询到指定姓名的用户信息</h4><p>根据相关字段，查询到对应的结果<br />写字段的名字，跟着要查询的只。例如：?name&#x3D;李四<br />示例：<a href="http://localhost:3000/uname/?name=%E6%9D%8E%E5%9B%9B">http://localhost:3000/uname/?name=李四</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1656919028450-c4beea28-3440-412b-92a3-ece9133245c3.png#averageHue=%23f9f8f6&clientId=u26cf33e8-0896-4&errorMessage=unknown%20error&from=paste&height=566&id=ufa804924&name=image.png&originHeight=1018&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=260288&status=error&style=none&taskId=ucc0521a4-8e9e-4c09-9443-cca40c390a8&title=&width=1422.2222598982455" alt="image.png"><br><a name="375a29de"></a></p><h4 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h4><p>默认为升序<br />_sort 根据某个字段排序<br />asc 升序；desc 降序<br />localhost:3000?__sort&#x3D;id&amp;__order&#x3D;desc<br />示例：倒序请求方式 <a href="http://localhost:3000/uname/">http://localhost:3000/uname/</a>?__sort&#x3D;id&amp;__order&#x3D;desc<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1656919041887-b030ffe8-70e6-4e2c-a0e2-78cab7c693a0.png#averageHue=%23fcfcfc&clientId=u26cf33e8-0896-4&errorMessage=unknown%20error&from=paste&height=375&id=uffcda7a0&name=image.png&originHeight=1976&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=279121&status=error&style=none&taskId=u16f67549-b62b-4c3b-b989-5e3d76cbb06&title=&width=272.9930725097656" alt="image.png"><br><a name="858b94d7"></a></p><h4 id="4-模糊查询"><a href="#4-模糊查询" class="headerlink" title="4. 模糊查询"></a>4. 模糊查询</h4><p>通过使用对应 “字段名_like”的形式，我们可以对对应的字段进行模糊查询<br />localhost:3000?name_like&#x3D;李<br />查找所有姓名中包含李的人员信息<br />示例：查询所有名字李包含张的：<br /><a href="http://localhost:3000/uname/?name_like=%E5%BC%A0">http://localhost:3000/uname/?name_like=张</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1656919063430-578efb23-1bb0-4623-a6e9-efd7f2cc0f48.png#averageHue=%23fcfcfc&clientId=u26cf33e8-0896-4&errorMessage=unknown%20error&from=paste&height=360&id=u25eaa23b&name=image.png&originHeight=1440&originWidth=1496&originalType=binary&ratio=1&rotation=0&showTitle=false&size=264397&status=error&style=none&taskId=u9ccf2c94-bffa-4469-995e-a9940c55d93&title=&width=373.9913330078125" alt="image.png"></p><p><a name="OUDke"></a></p><h1 id="mock数据的使用"><a href="#mock数据的使用" class="headerlink" title="mock数据的使用"></a>mock数据的使用</h1><p><a name="PqyqC"></a></p><h4 id="什么事mock数据"><a href="#什么事mock数据" class="headerlink" title="什么事mock数据"></a>什么事mock数据</h4><p>前端可以使用mock（假数据），模拟开发中用到的数据</p><p><a name="YNcSZ"></a></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>后台支持未完成</li><li>前后端并行开发，此时没有后端数据</li></ol><p><a name="q5YHn"></a></p><h4 id="mock数据的优势"><a href="#mock数据的优势" class="headerlink" title="mock数据的优势"></a>mock数据的优势</h4><p>团队并行开发，测试驱动，演示，隔离数据等<br />没有跨域问题，直接测试就行</p><p><a name="cPLm4"></a></p><h4 id="mock语法"><a href="#mock语法" class="headerlink" title="mock语法"></a>mock语法</h4><p>使用的是json格式，随机内容的生成<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1665480202744-05d24feb-cbe3-41b4-9076-2ee9aa7106a8.png#averageHue=%23dfe1d1&clientId=u069398dc-d98c-4&from=paste&height=637&id=u073c3c07&name=image.png&originHeight=1146&originWidth=1606&originalType=binary&ratio=1&rotation=0&showTitle=false&size=899880&status=done&style=none&taskId=u43292691-0ec8-4500-ab05-4ab49c26f77&title=&width=892.22224585804" alt="image.png"></p><p><a name="UazDE"></a></p><h4 id="可以mock数据的网站有很多"><a href="#可以mock数据的网站有很多" class="headerlink" title="可以mock数据的网站有很多"></a>可以mock数据的网站有很多</h4><p>比如：<a href="https://www.fastmock.site/">https://www.fastmock.site/</a><br />基本上都大同小异</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跨域请求</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/60-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/60-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p><a name="4be5c6fb"></a></p><h3 id="跨域请求数据"><a href="#跨域请求数据" class="headerlink" title="跨域请求数据"></a>跨域请求数据</h3><p><a name="32d193d5"></a></p><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>什么是跨域：跨域，是指浏览器不能执行其他网站的脚本。它是由<strong>浏览器的同源策略</strong>造成的，是浏览器对JavaScript实施的安全限制<br />什么是同域：协议, 域名, 端口号 完全一致, 是同域.<br />协议: http, https<br />域名: 一级域名, 二级域名, 三级域名<br />端口号: 80(http), 443(https)等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.oa.ranyihang.com:8080</span><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.oa.ranyihang.com:8081</span><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.ranyihang.com:8080</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.oa.ranyihang.com:8080</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1653898105048-b7fe2bce-8560-4adb-aafe-07a426610e96.png#averageHue=%23e8e9e5&clientId=u1b2c6a01-5777-4&from=paste&height=313&id=udc5f01f3&name=image-20210909233443199.png&originHeight=438&originWidth=782&originalType=binary&ratio=1&rotation=0&showTitle=false&size=211342&status=done&style=none&taskId=uf4c098d8-25f7-4f8e-9df3-0c23f55c5c2&title=&width=559" alt="image-20210909233443199.png"></p><p><a name="4a4b502d"></a></p><h3 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h3><p>原生JS解决跨域问题有三种方式：Jsonp，postMessage，CORS<br />前端：Jsonp<br />后端：CORS</p><p><a name="6c81fa9a"></a></p><h3 id="数据地址"><a href="#数据地址" class="headerlink" title="数据地址"></a>数据地址</h3><p>百度数据地址：<a href="https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=javascript&cb=jQuery1102076227855690958_1542010335391&_=1542010335404">https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=javascript&cb=jQuery1102076227855690958_1542010335391&amp;_&#x3D;1542010335404</a></p><p><a name="14395158"></a></p><h3 id="jsonp跨域"><a href="#jsonp跨域" class="headerlink" title="jsonp跨域"></a>jsonp跨域</h3><p>前端发送请求<br />后端配合回调函数<br />好处：</p><ol><li>javascript 兼容性比较好</li><li>不需要服务器支持，直接在本地运行</li></ol><p>缺点：</p><ol><li>它只支持GET请求而不支持POST等其它类型的HTTP请求</li><li>它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</li><li>jsonp在调用失败的时候不会返回各种HTTP状态码。</li><li>安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的</li></ol><p>作业接口：<br /><a href="https://blog.csdn.net/qq_37635519/article/details/90666312">https://blog.csdn.net/qq_37635519&#x2F;article&#x2F;details&#x2F;90666312</a></p><ul><li>淘宝商品搜索建议<br /><code>http://suggest.taobao.com/sug?code=utf-8&amp;q=商品关键字&amp;callback=cb</code> <a href="https://suggest.taobao.com/sug?code=utf-8&q=%E5%8D%AB%E8%A1%A3&callback=cb">测试用例</a><br /><code>ps</code>:callback是回调函数设定<br><a name="dsztO"></a></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><a name="f7aaeb6b"></a></p><h3 id="CORS实现跨域请求"><a href="#CORS实现跨域请求" class="headerlink" title="CORS实现跨域请求"></a>CORS实现跨域请求</h3><p>php页面配置请求内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin:http://www.abc.com&#x27;</span>); <span class="hljs-comment">// 允许一个访问</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin:*&#x27;</span>); <span class="hljs-comment">// 允许所有访问</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;您已经访问成功&#x27;</span>;<br></code></pre></td></tr></table></figure><p>发送ajax请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> oInp=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#inp&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-title function_">addEvent</span>(oInp,<span class="hljs-string">&#x27;click&#x27;</span>,getMsg);</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMsg</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">url=<span class="hljs-string">&#x27;http://192.168.64.2/1.6/2.getCors.php&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-title function_">ajaxPostAsyn</span>(url,<span class="hljs-string">&#x27;&#x27;</span>,ok,error);</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ok</span>(<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="Se77m"></a></p><h3 id="补充：URLURL对象"><a href="#补充：URLURL对象" class="headerlink" title="补充：URLURL对象"></a>补充：URLURL对象</h3><p>URL 是互联网的基础设施之一。浏览器提供了一些原生对象，用来管理 URL。<br><a name="cpI3e"></a></p><h4 id="1-URL-的编码和解码"><a href="#1-URL-的编码和解码" class="headerlink" title="1. URL 的编码和解码"></a><br />1. URL 的编码和<a href="https://so.csdn.net/so/search?q=%E8%A7%A3%E7%A0%81&spm=1001.2101.3001.7020">解码</a></h4><p><br />网页的 URL 只能包含合法的字符。合法字符分成两类。</p><ul><li>URL 元字符：分号（;），逗号（,），斜杠（&#x2F;），问号（?），冒号（:），at（@），&amp;，等号（&#x3D;），加号（+），美元符号（$），井号（#）</li><li>语义字符：a-z，A-Z，0-9，连词号（-），下划线（_），点（.），感叹号（!），波浪线（~），星号（*），单引号（’），圆括号（()）</li></ul><p>除了以上字符，其他字符出现在 URL 之中都必须转义，规则是根据操作系统的默认编码，将每个字节转为百分号（%）加上两个大写的十六进制字母。<br />比如，UTF-8 的操作系统上，<a href="http://www.example.com/q=%E6%98%A5%E8%8A%82%E8%BF%99%E4%B8%AA">http://www.example.com/q=春节这个</a> URL 之中，汉字“春节”不是 URL 的合法字符，所以被浏览器自动转成<a href="http://www.example.com/q=%E6%98%A5%E8%8A%82%E3%80%82%E5%85%B6%E4%B8%AD%EF%BC%8C%E2%80%9C%E6%98%A5%E2%80%9D%E8%BD%AC%E6%88%90%E4%BA%86%E6%98%A5%EF%BC%8C%E2%80%9C%E8%8A%82%E2%80%9D%E8%BD%AC%E6%88%90%E4%BA%86%E8%8A%82%E3%80%82%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E2%80%9C%E6%98%A5%E2%80%9D%E5%92%8C%E2%80%9C%E8%8A%82%E2%80%9D%E7%9A%84">http://www.example.com/q=%E6%98%A5%E8%8A%82。其中，“春”转成了%E6%98%A5，“节”转成了%E8%8A%82。这是因为“春”和“节”的</a> UTF-8 编码分别是E6 98 A5和E8 8A 82，将每个字节前面加上百分号，就构成了 URL 编码。</p><p><a name="Sk2ip"></a></p><h4 id="2-URL-接口"><a href="#2-URL-接口" class="headerlink" title="2. URL 接口"></a>2. URL 接口</h4><p><br />URL接口是一个构造函数，浏览器原生提供，可以用来构造、解析和编码 URL。一般情况下，通过window.URL可以拿到这个构造函数。<br><a name="QUCGw"></a></p><h3 id="URL的编码-x2F-解码方式"><a href="#URL的编码-x2F-解码方式" class="headerlink" title="URL的编码&#x2F;解码方式"></a>URL的编码&#x2F;解码方式</h3><p>JavaScript 提供四个 URL 的编码&#x2F;解码方法。</p><ul><li>encodeURI()</li><li>encodeURIComponent()</li><li>decodeURI()</li><li>decodeURIComponent()</li></ul><p><a name="Urldd"></a></p><h4 id="1-encodeURI"><a href="#1-encodeURI" class="headerlink" title="1. encodeURI()"></a>1. encodeURI()</h4><p>encodeURI()方法用于转码整个 URL。它的参数是一个字符串，代表整个 URL。它会将元字符和语义字符之外的字符，都进行转义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&#x27;http://www.example.com/q=春节&#x27;</span>)<br><span class="hljs-comment">// &quot;http://www.example.com/q=%E6%98%A5%E8%8A%82&quot;</span><br></code></pre></td></tr></table></figure><p><a name="kxB5N"></a></p><h4 id="2-encodeURIComponent"><a href="#2-encodeURIComponent" class="headerlink" title="2. encodeURIComponent()"></a>2. encodeURIComponent()</h4><p>encodeURIComponent()方法用于转码 URL 的组成部分，会转码除了语义字符之外的所有字符，即元字符也会被转码。所以，它不能用于转码整个 URL。它接受一个参数，就是 URL 的片段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">&#x27;春节&#x27;</span>) <br><span class="hljs-comment">// &quot;%E6%98%A5%E8%8A%82&quot; </span><br><span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">&#x27;http://www.example.com/q=春节&#x27;</span>) <br><span class="hljs-comment">// &quot;http%3A%2F%2Fwww.example.com%2Fq%3D%E6%98%A5%E8%8A%82&quot; 1234</span><br></code></pre></td></tr></table></figure><p>上面代码中，encodeURIComponent()会连 URL 元字符一起转义，所以如果转码整个 URL 就会出错。<br><a name="ttf4b"></a></p><h4 id="3-decodeURI"><a href="#3-decodeURI" class="headerlink" title="3. decodeURI()"></a><br />3. decodeURI()</h4><p>decodeURI()方法用于整个 URL 的解码。它是encodeURI()方法的逆运算。它接受一个参数，就是转码后的 URL。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&#x27;http://www.example.com/q=%E6%98%A5%E8%8A%82&#x27;</span>) <br><span class="hljs-comment">// &quot;http://www.example.com/q=春节&quot; 12</span><br></code></pre></td></tr></table></figure><p><a name="Flvlk"></a></p><h4 id="4-decodeURIComponent"><a href="#4-decodeURIComponent" class="headerlink" title="4. decodeURIComponent()"></a>4. decodeURIComponent()</h4><p>decodeURIComponent()用于URL 片段的解码。它是encodeURIComponent()方法的逆运算。它接受一个参数，就是转码后的 URL 片段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&#x27;%E6%98%A5%E8%8A%82&#x27;</span>) <span class="hljs-comment">// &quot;春节&quot;</span><br></code></pre></td></tr></table></figure><p><a name="syCjL"></a></p><h3 id="URL接口常用属性"><a href="#URL接口常用属性" class="headerlink" title="URL接口常用属性"></a>URL接口常用属性</h3><p><a name="SFF96"></a></p><h4 id="1-URL接口"><a href="#1-URL接口" class="headerlink" title="1. URL接口"></a>1. URL接口</h4><p>URL接口是一个构造函数，浏览器原生提供，可以用来构造、解析和编码 URL。一般情况下，通过window.URL可以拿到这个构造函数。<br />URL作为构造函数，可以生成 URL 实例。它接受一个表示 URL 的字符串作为参数。如果参数不是合法的 URL，会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;http://www.example.com/index.html&#x27;</span>); <br><span class="hljs-comment">// url.href &quot;http://www.example.com/index.html&quot; 123</span><br></code></pre></td></tr></table></figure><p>如果参数是另一个 URL 实例，构造函数会自动读取该实例的href属性，作为实际参数。<br />如果 URL 字符串是一个相对路径，那么需要表示绝对路径的第二个参数，作为计算基准。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> url1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-string">&#x27;http://example.com&#x27;</span>); <br>url1.<span class="hljs-property">href</span> <span class="hljs-comment">// &quot;http://example.com/index.html&quot; </span><br><span class="hljs-keyword">var</span> url2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;page2.html&#x27;</span>, <span class="hljs-string">&#x27;http://example.com/page1.html&#x27;</span>); <br>url2.<span class="hljs-property">href</span> <span class="hljs-comment">// &quot;http://example.com/page2.html&quot; </span><br><span class="hljs-keyword">var</span> url3 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;http://example.com/a/b.html&#x27;</span>) <br>url3.<span class="hljs-property">href</span> <span class="hljs-comment">// &quot;http://example.com/&quot;</span><br></code></pre></td></tr></table></figure><p><a name="jTbQz"></a></p><h4 id="2-URL接口实例属性"><a href="#2-URL接口实例属性" class="headerlink" title="2. URL接口实例属性"></a>2. URL接口实例属性</h4><table><thead><tr><th>属性</th><th>功能</th></tr></thead><tbody><tr><td>URL.href</td><td>返回整个 URL</td></tr><tr><td>URL.protocol</td><td>返回协议，以冒号:结尾</td></tr><tr><td>URL.hostname</td><td>返回域名</td></tr><tr><td>URL.host</td><td>返回域名与端口，包含:号，默认的80和443端口会省略</td></tr><tr><td>URL.port</td><td>返回端口</td></tr><tr><td>URL.origin</td><td>返回协议、域名和端口【只读】</td></tr><tr><td>URL.pathname</td><td>返回路径，以斜杠&#x2F;开头</td></tr><tr><td>URL.search</td><td>返回查询字符串，以问号?开头</td></tr><tr><td>URL.searchParams</td><td>返回一个URLSearchParams实例，该属性是Location对象没有的</td></tr><tr><td>URL.hash</td><td>返回片段识别符，以井号#开头</td></tr><tr><td>URL.password</td><td>返回域名前面的密码</td></tr><tr><td>URL.username</td><td>返回域名前面的用户名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">var</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&#x27;</span>);<br><br>url.<span class="hljs-property">href</span><br><span class="hljs-comment">// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;</span><br>url.<span class="hljs-property">protocol</span><br><span class="hljs-comment">// &quot;http:&quot;</span><br>url.<span class="hljs-property">hostname</span><br><span class="hljs-comment">// &quot;www.example.com&quot;</span><br>url.<span class="hljs-property">host</span><br><span class="hljs-comment">// &quot;www.example.com:4097&quot;</span><br>url.<span class="hljs-property">port</span><br><span class="hljs-comment">// &quot;4097&quot;</span><br>url.<span class="hljs-property">origin</span><br><span class="hljs-comment">// &quot;http://www.example.com:4097&quot;</span><br>url.<span class="hljs-property">pathname</span><br><span class="hljs-comment">// &quot;/path/a.html&quot;</span><br>url.<span class="hljs-property">search</span><br><span class="hljs-comment">// &quot;?x=111&quot;</span><br>url.<span class="hljs-property">searchParams</span><br><span class="hljs-comment">// URLSearchParams &#123;&#125;</span><br>url.<span class="hljs-property">hash</span><br><span class="hljs-comment">// &quot;#part1&quot;</span><br>url.<span class="hljs-property">password</span><br><span class="hljs-comment">// &quot;passwd&quot;</span><br>url.<span class="hljs-property">username</span><br><span class="hljs-comment">// &quot;user&quot;</span><br></code></pre></td></tr></table></figure><p><a name="Co7fW"></a></p><h4 id="3-静态方法"><a href="#3-静态方法" class="headerlink" title="3. 静态方法"></a>3. 静态方法</h4><ol><li>URL.createObjectURL()</li></ol><p>URL.createObjectURL()方法用来为上传&#x2F;下载的文件、流媒体文件生成一个 URL 字符串。这个字符串代表了File对象或Blob对象的 URL。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// HTML 代码如下 </span><br><span class="hljs-comment">// &lt;div id=&quot;display&quot;/&gt; </span><br><span class="hljs-comment">// &lt;input type=&quot;file&quot;  id=&quot;fileElem&quot;   multiple  accept=&quot;image/*&quot;  οnchange=&quot;handleFiles(this.files)&quot;&gt; </span><br><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;display&#x27;</span>); <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFiles</span>(<span class="hljs-params">files</span>) &#123;   <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.<span class="hljs-property">length</span>; i++) &#123;     <br>    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);     <br>    img.<span class="hljs-property">src</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(files[i]);     <br>    div.<span class="hljs-title function_">appendChild</span>(img);   <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，URL.createObjectURL()方法用来为上传的文件生成一个 URL 字符串，作为元素的图片来源。<br />该方法生成的 URL 就像下面的样子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">blob</span>:<span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost/c745ef73-ece9-46da-8f66-ebes574789b1 1</span><br></code></pre></td></tr></table></figure><p>注意，每次使用URL.createObjectURL()方法，都会在内存里面生成一个 URL 实例。如果不再需要该方法生成的 URL 字符串，为了节省内存，可以使用URL.revokeObjectURL()方法释放这个实例。</p><ol start="2"><li>URL.revokeObjectURL()</li></ol><p>URL.revokeObjectURL()方法用来释放URL.createObjectURL()方法生成的 URL 实例。它的参数就是URL.createObjectURL()方法返回的 URL 字符串。<br />下面为上一段的示例加上URL.revokeObjectURL()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;display&#x27;</span>); <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFiles</span>(<span class="hljs-params">files</span>) &#123;   <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.<span class="hljs-property">length</span>; i++) &#123;     <br>    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);     <br>    img.<span class="hljs-property">src</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(files[i]);     <br>    div.<span class="hljs-title function_">appendChild</span>(img);     <br>    img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;       <br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>);     <br>    &#125;   <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，一旦图片加载成功以后，为本地文件生成的 URL 字符串就没用了，于是可以在img.onload回调函数里面，通过URL.revokeObjectURL()方法卸载这个 URL 实例。</p><p><a name="msJVh"></a></p><h4 id="案例：点击商品显示商品详细信息【使用url-jsonserver】"><a href="#案例：点击商品显示商品详细信息【使用url-jsonserver】" class="headerlink" title="案例：点击商品显示商品详细信息【使用url+jsonserver】"></a>案例：点击商品显示商品详细信息【使用url+jsonserver】</h4><p>URL参考链接：<a href="https://blog.csdn.net/beeworkshop/article/details/106854195">https://blog.csdn.net/beeworkshop/article/details/106854195</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>引用类型和深拷贝浅拷贝</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/59-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/59-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p><a name="8e4b8c79"></a></p><h2 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h2><p><a name="f6a38ffe"></a></p><h4 id="JS分两种数据类型："><a href="#JS分两种数据类型：" class="headerlink" title="JS分两种数据类型："></a>JS分两种数据类型：</h4><p>一个变量可以存放两种类型的值，基本类型的值（primitive values）和引用类型的值（reference values）。<br />ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p><p><a name="5d961e79"></a></p><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>JavaScript 中共有 6 种基本数据类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol (new in ES 6)</code> ！<br /><strong>约定：</strong><code>基本数据类型</code>与<code>原始数据类型</code>等意。</p><p><strong>基本数据类型的值是按值访问的。</strong></p><ul><li><p>基本类型的值是不可变的 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123hello321&quot;</span>;<br>str.<span class="hljs-title function_">toUpperCase</span>();     <span class="hljs-comment">// 123HELLO321</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);      <span class="hljs-comment">// 123hello321</span><br></code></pre></td></tr></table></figure></li><li><p>基本类型的比较是它们的值的比较 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-literal">true</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a == b);    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b);   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p> <br />上面 a 和 b 的数据类型不同，但是也可以进行值的比较，这是因为在比较之前，自动进行了数据类型的 <code>隐式转换</code>。<br /><code>==</code> : 只进行值的比较<br /><code>===</code> : 不仅进行值得比较，还要进行数据类型的比较</p></li><li><p>基本类型的变量是存放在栈内存（Stack）里的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a,b;<br>a = <span class="hljs-string">&quot;zyj&quot;</span>;<br>b = a;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);   <span class="hljs-comment">// zyj</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);   <span class="hljs-comment">// zyj</span><br>a = <span class="hljs-string">&quot;呵呵&quot;</span>;       <span class="hljs-comment">// 改变 a 的值，并不影响 b 的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);   <span class="hljs-comment">// 呵呵</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);   <span class="hljs-comment">// zyj</span><br></code></pre></td></tr></table></figure><p>图解如下：栈内存中包括了变量的标识符和变量的值</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1653884143020-1ca0b4bd-83f1-4d51-98c5-763e7db8144e.png#averageHue=%23e1e0e0&clientId=u4592ab9c-d462-4&from=paste&height=149&id=u910bd6df&name=image.png&originHeight=149&originWidth=368&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22820&status=done&style=none&taskId=ufc466ca4-ab7d-47b5-a799-2e769e4e942&title=&width=368" alt="image.png"></p><p><a name="7df6e743"></a></p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>除过上面的 6 种基本数据类型外，剩下的就是引用类型了，统称为 <code>Object 类型</code>。细分的话，有：<code>Object 类型</code>、<code>Array 类型</code>、<code>Date 类型</code>、<code>RegExp 类型</code>、<code>Function 类型</code> 等。</p><p><strong>引用类型的值是按引用访问的。</strong></p><ul><li><p>引用类型的值是可变的 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zyj&quot;</span>&#125;;   <span class="hljs-comment">// 创建一个对象</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;percy&quot;</span>;       <span class="hljs-comment">// 改变 name 属性的值</span><br>obj.<span class="hljs-property">age</span> = <span class="hljs-number">21</span>;             <span class="hljs-comment">// 添加 age 属性</span><br>obj.<span class="hljs-property">giveMeAll</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; : &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>;<br>&#125;;                        <span class="hljs-comment">// 添加 giveMeAll 方法</span><br>obj.<span class="hljs-title function_">giveMeAll</span>();<br></code></pre></td></tr></table></figure></li><li><p>引用类型的比较是引用的比较 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = &#123;&#125;;    <span class="hljs-comment">// 新建一个空对象 obj1</span><br><span class="hljs-keyword">var</span> obj2 = &#123;&#125;;    <span class="hljs-comment">// 新建一个空对象 obj2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 == obj2);    <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 === obj2);   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><br />因为 obj1 和 obj2 分别引用的是存放在堆内存中的2个不同的对象，故变量 obj1 和 obj2 的值（引用地址）也是不一样的！ </p></li><li><p>引用类型的值是保存在堆内存（Heap）中的对象（Object）<br />与其他编程语言不同，JavaScript 不能直接操作对象的内存空间（堆内存）。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;percy&quot;</span>&#125;;<br><span class="hljs-keyword">var</span> b;<br>b = a;<br>a.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;zyj&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">name</span>);    <span class="hljs-comment">// zyj</span><br>b.<span class="hljs-property">age</span> = <span class="hljs-number">22</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>);     <span class="hljs-comment">// 22</span><br><span class="hljs-keyword">var</span> c = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zyj&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">22</span><br>&#125;;<br></code></pre></td></tr></table></figure><p> <br />如图所示：</p></li><li><p>栈内存中保存了变量标识符和指向堆内存中该对象的指针</p></li><li><p>堆内存中保存了对象的内容</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1653884176365-55b873a9-702b-4ce3-ab71-eec48c29d7a0.png#averageHue=%23dad9d9&clientId=u4592ab9c-d462-4&from=paste&height=734&id=u5ce7dbbc&name=image.png&originHeight=734&originWidth=487&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107829&status=done&style=none&taskId=u1a3d4023-f614-4272-a0ff-7e8ac68b169&title=&width=487" alt="image.png"><br />参考文档（什么是基础数据类型，什么是引用数据类型）：<a href="https://segmentfault.com/a/1190000006752076">https://segmentfault.com/a/1190000006752076</a><br />参考文档（浅拷贝）：<a href="https://www.jianshu.com/p/87375f9a4725">https://www.jianshu.com/p/87375f9a4725</a></p><p><a name="934191aa"></a></p><h3 id="浅拷贝和深拷贝【面试必考】"><a href="#浅拷贝和深拷贝【面试必考】" class="headerlink" title="浅拷贝和深拷贝【面试必考】"></a>浅拷贝和深拷贝【面试必考】</h3><blockquote><p>如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。</p></blockquote><p><a name="88a1a4d3"></a></p><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ol><li><p>使用 &#x3D; 实现浅拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person1=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">hobby</span>:[<span class="hljs-string">&#x27;篮球&#x27;</span>,<span class="hljs-string">&#x27;足球&#x27;</span>,<span class="hljs-string">&#x27;羽毛球&#x27;</span>]&#125;;<br>person2 = person1; <span class="hljs-comment">// 浅拷贝</span><br>person2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2);<br></code></pre></td></tr></table></figure></li><li><p>循环便利 - 浅拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person1=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;章三&quot;</span>,<span class="hljs-attr">hobby</span>:[<span class="hljs-string">&#x27;篮球&#x27;</span>,<span class="hljs-string">&#x27;足球&#x27;</span>,<span class="hljs-string">&#x27;羽毛球&#x27;</span>]&#125;;<br><span class="hljs-keyword">var</span> person2 = &#123;&#125;;<br><span class="hljs-keyword">for</span>(k <span class="hljs-keyword">in</span> person1)&#123;<br>  person2[k] = person1[k]<br>&#125;<br>person1.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">// 两个值互不影响</span><br>person1.<span class="hljs-property">hobby</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">// 修改a的时候，b也发生变化了</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2);<br></code></pre></td></tr></table></figure></li></ol><p>3.在…扩展运算符中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person1=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">hobby</span>:[<span class="hljs-string">&#x27;篮球&#x27;</span>,<span class="hljs-string">&#x27;足球&#x27;</span>,<span class="hljs-string">&#x27;羽毛球&#x27;</span>]&#125;;<br>person2 = &#123;...person1&#125;; <span class="hljs-comment">// 依然是浅拷贝</span><br>person2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>person1.<span class="hljs-property">hobby</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2);<br></code></pre></td></tr></table></figure><p>4.在concat中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person1=[<span class="hljs-string">&#x27;章三&#x27;</span>,<span class="hljs-number">18</span>,[<span class="hljs-string">&#x27;篮球&#x27;</span>,<span class="hljs-string">&#x27;足球&#x27;</span>,<span class="hljs-string">&#x27;羽毛球&#x27;</span>]];<br><span class="hljs-keyword">var</span> person2 = person1.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;郑州&#x27;</span>);<br>person1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;李四&#x27;</span>; <span class="hljs-comment">// 两个值互不影响</span><br>person1[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">// 修改之后两个值都发生了变化</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2);<br></code></pre></td></tr></table></figure><p><a name="0da7ec11"></a></p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><ol><li><p>使用递归实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person1 = [<span class="hljs-string">&#x27;章三&#x27;</span>, <span class="hljs-number">18</span>, [<span class="hljs-string">&#x27;篮球&#x27;</span>, <span class="hljs-string">&#x27;足球&#x27;</span>, <span class="hljs-string">&#x27;羽毛球&#x27;</span>]];<br><span class="hljs-keyword">var</span> person2 = [];<br><span class="hljs-comment">// p要拷贝的数据；c 生成的新数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Copy</span>(<span class="hljs-params">p, c</span>) &#123;<br>  <span class="hljs-keyword">var</span> c = c || &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> p) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> p[i] === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>      c[i] = (p[i].<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>) ? [] : &#123;&#125;<br>      <span class="hljs-title class_">Copy</span>(p[i], c[i]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      c[i] = p[i]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> c;<br>&#125;<br>person2 = <span class="hljs-title class_">Copy</span>(person1,person2);<br>person1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;李四&#x27;</span><br>person1[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;李四&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2);<br></code></pre></td></tr></table></figure><p>面试官：递归实现有什么问题吗？<br />还是<strong>循环引用</strong>的问题<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1654507755815-4d32b5bc-0811-4366-8bf4-99ac4e3741e6.png#averageHue=%23887f8b&clientId=u053e8f1a-0f0e-4&from=paste&id=u494b5838&name=image.png&originHeight=215&originWidth=576&originalType=url&ratio=1&rotation=0&showTitle=false&size=55399&status=done&style=none&taskId=u952f9f59-8cd4-4a4e-a706-64a896425bd&title=" alt="image.png"><br />还是会报错<br />解决：用 WeakMap() 或者Map()记录下对象中的所有对象，并与新创建的对象一一对应，即记录引用关系<br />解决方案：<a href="https://www.jianshu.com/p/331a544b03e9">https://www.jianshu.com/p/331a544b03e9</a><br />     <a href="https://www.cnblogs.com/yangjiale/p/14884031.html">https://www.cnblogs.com/yangjiale/p/14884031.html</a></p></li><li><p>使用JSON的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr  = [<span class="hljs-string">&#x27;hello&#x27;</span>,[<span class="hljs-string">&#x27;world&#x27;</span>,[<span class="hljs-string">&#x27;张三&#x27;</span>]]];<br><span class="hljs-keyword">var</span> newArr = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr));<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr,newArr);<br></code></pre></td></tr></table></figure><p>面试官：这种实现方案有什么问题吗？<br />答：该方法不能解决属性为：undefined、function、RegExp，循环引用的的情况</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>递归函数+常见算法</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/58-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0-%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/58-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0-%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><a name="e9bf03a1"></a></p><h1 id="递归函数【了解】"><a href="#递归函数【了解】" class="headerlink" title="递归函数【了解】"></a>递归函数【了解】</h1><p>导语：有个很经典的故事：从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事！故事是什么呢？『从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事！故事是什么呢？』……</p><p>递归：</p><ul><li>如果一个函数在内部调用自身本身，这个函数就是递归函数</li></ul><p>好处</p><ul><li>递归函数最大的好处在于可以精简程序中繁杂，重复调用程序</li></ul><p><a name="e1fc8f75"></a></p><h4 id="创建一个简单的递归"><a href="#创建一个简单的递归" class="headerlink" title="创建一个简单的递归"></a>创建一个简单的递归</h4><ol><li><p>直接调用的递归 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 直接调用；自己调用自己； 死递归</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;from func&#x27;</span>);<br>  <span class="hljs-title function_">fun</span>();<br>&#125;<br><span class="hljs-title function_">fun</span>()<br></code></pre></td></tr></table></figure></li><li><p>间接调用的递归 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 间接调用自己</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;from foo&#x27;</span>);<br>  <span class="hljs-title function_">bar</span>();<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;from bar&#x27;</span>);<br>  <span class="hljs-title function_">foo</span>();<br>&#125;<br><span class="hljs-title function_">foo</span>()<br></code></pre></td></tr></table></figure><p> <img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1653896315361-b23bb424-1b0a-457b-b80f-3d5f095afc6c.png#averageHue=%23f9f0f0&clientId=u0db55231-e831-4&errorMessage=unknown%20error&from=paste&height=199&id=u7d050629&name=image.png&originHeight=398&originWidth=832&originalType=binary&ratio=1&rotation=0&showTitle=false&size=133855&status=error&style=none&taskId=ucef7dfcb-3c1b-4c15-b0ad-0db54f8a4a8&title=&width=416" alt="image.png"></p></li><li><p>实现递归；递归要有最终的一个出口 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 递归的实现</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">n</span>)&#123;<br>  <span class="hljs-comment">// 测试数据</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>  <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">18</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">age</span>(n-<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-title function_">age</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>总结：递归只是一种思想，只不过在程序，依靠函数自身嵌套来实现</p></li></ol><p><a name="54ac1af4"></a></p><h4 id="使用递归求阶乘"><a href="#使用递归求阶乘" class="headerlink" title="使用递归求阶乘"></a>使用递归求阶乘</h4><p>案例：求1 _* 1+ 2 *  _2+ 3 * _3+ 4 * _4….的和</p><ol><li><p>普通写法 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">n</span>)&#123;<br>  result = n <br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=n-<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">1</span>; i--)&#123;<br>  result *= i<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure></li><li><p>递归 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">n</span>)&#123;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> n*n + <span class="hljs-title function_">sum</span>(n-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure></li></ol><p>总结：递归的好处 是 递归函数常用于检索大量数据，比如检索一个拥有300万个数的列表，从中查找某个数是否存在，如果用for遍历，会严重占用计算机计算能力，那么我们可以通过递归函数来减少搜索量。</p><p><a name="6ff56370"></a></p><h4 id="递归实现的特点"><a href="#递归实现的特点" class="headerlink" title="递归实现的特点"></a>递归实现的特点</h4><p>有进有出<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1653896337083-2564e2c2-cf2f-4a3f-b4b0-c8ed0ebd14c5.png#averageHue=%23f1f1f1&clientId=u0db55231-e831-4&errorMessage=unknown%20error&from=paste&height=154&id=u682a6e66&name=image.png&originHeight=308&originWidth=546&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71758&status=error&style=none&taskId=u14f73057-d3c7-4cd8-905a-6fd01ffeea2&title=&width=273" alt="image.png"><br />递归可以将复杂的程序变简单</p><p>需求：如计算数字1+到100，判断数字是否小与100，判断变量是否小与100，小于100让他+1，然后输出当前变量i，直到100</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 普通写法</span><br><span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">i</span>)&#123;<br>  i+=<span class="hljs-number">1</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>  <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">100</span>)&#123;<br>    i+=<span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">100</span>)&#123;<br>      i+=<span class="hljs-number">1</span>;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-title function_">test</span>(i);<br><br><span class="hljs-comment">// 改成递归函数</span><br><span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">i</span>)&#123;<br>  i+=<span class="hljs-number">1</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>  <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">100</span>)&#123;<br>  <span class="hljs-title function_">test</span>(i);<br>  &#125;<br>&#125;<br><span class="hljs-title function_">test</span>(i);<br></code></pre></td></tr></table></figure><p>递归只是一种思想，只不过在程序，依靠函数自身嵌套来实现（递归使用的是压栈，弹栈，枪压子弹，叠书****）</p><p><a name="21d68b2d"></a></p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>    <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-title function_">func</span>(n-<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br><span class="hljs-title function_">func</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>案例：计算1到100之间相加之和；通过循环和递归两种方式实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 普通写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum_cycle</span>(<span class="hljs-params">n</span>)&#123;<br>    sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    sum+=i<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum);<br>&#125;<br><span class="hljs-title function_">sum_cycle</span>(<span class="hljs-number">5</span>);<br><br><span class="hljs-comment">// 递归写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum_cycle</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span> n + <span class="hljs-title function_">sum_cycle</span>(n-<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum_cycle</span>(<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><p><a name="e22f9700"></a></p><h4 id="案例：小熊掰玉米"><a href="#案例：小熊掰玉米" class="headerlink" title="案例：小熊掰玉米"></a>案例：小熊掰玉米</h4><p>案例：小熊掰玉米 一天小熊来到一片玉米地，兴奋的掰了若干个玉米，他发现太多了，于是扔了其中一半，感觉还是有点多，于是又扔了一个后往家赶；当它走了一米的时候感觉有点累，于是扔掉其中的一半加一个，继续往前每走一米重复以往的动作，扔掉其中的一半加一个；当它走到10米时候，发现手中就剩一个了，有点伤感，也忘了开始自己摘了几个玉米了，那么你帮小熊算算，它开始掰了多少个玉米？<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22278242/1656399358826-7985eeac-573c-43d6-b44b-811a0c25b7f9.jpeg#averageHue=%2397892c&clientId=u969e022d-0f25-4&errorMessage=unknown%20error&from=paste&id=u4b4aeecc&originHeight=153&originWidth=236&originalType=url&ratio=1&rotation=0&showTitle=false&status=error&style=none&taskId=ua90d723c-262f-4f61-9dcd-767828c8eb4&title="></p><p>分析：小熊掰玉米，给定的是总的米数，但是获取10米需要依赖于9米，求9米，需要依赖8米…以此类推，所以想要获取10米的需要知道没走的时候，0米的时候手里有几个玉米</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTotle</span>(<span class="hljs-params">length</span>)&#123;<br><span class="hljs-keyword">if</span>(length == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*(<span class="hljs-title function_">getTotle</span>(length-<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getTotle</span>(<span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure><p>递归的特点：<br />函数内部调用函数本身<br />有进有出<br />必须有出口<br />每次调用函数都会用掉一点内存，在足够多次数的函数调用发生后（在之前的调用返回后），空间就不够了，程序会以一个“超过最大递归深度”的错误信息结束。<br />面试题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 结果？</span><br>  a = <span class="hljs-number">5</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">a</span>); <span class="hljs-comment">// 结果？</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 结果？</span><br>&#125;<br><span class="hljs-title function_">show</span>();<br></code></pre></td></tr></table></figure><p><a name="5d7ecc89"></a></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序：依次比较相邻的两个值，如果后面的比前面的小，则将小的元素排到前面。依照这个规则进行多次并且递减的迭代，直到顺序正确。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1653896362270-4b9f19a8-e3fe-41de-9c64-74086a50101a.png#averageHue=%23f9fcf9&clientId=u0db55231-e831-4&errorMessage=unknown%20error&from=paste&height=371&id=ue8ed6e78&name=image.png&originHeight=742&originWidth=970&originalType=binary&ratio=1&rotation=0&showTitle=false&size=346260&status=error&style=none&taskId=ud81569ed-7f01-405a-af1f-24e29166396&title=&width=485" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> examplearr=[<span class="hljs-number">8</span>,<span class="hljs-number">94</span>,<span class="hljs-number">15</span>,<span class="hljs-number">88</span>,<span class="hljs-number">55</span>,<span class="hljs-number">76</span>,<span class="hljs-number">21</span>,<span class="hljs-number">39</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sortarr</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-comment">// for(j=0;j&lt;arr.length-1-i;j++)&#123; //更节省内存</span><br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">var</span> temp=arr[j];<br>                arr[j]=arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>]=temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="cc128b01"></a></p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1653896378700-5f787a99-d1df-4add-bda3-251229ea559d.png#averageHue=%23f8f8f8&clientId=u0db55231-e831-4&errorMessage=unknown%20error&from=paste&height=149&id=ubdb75e40&name=image.png&originHeight=298&originWidth=357&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9736&status=error&style=none&taskId=u146eb2b8-297a-45d3-be5a-199fd1d485b&title=&width=178.5" alt="image.png"><br><a name="5690affe"></a></p><h1 id="冒泡排序和选择排序对比"><a href="#冒泡排序和选择排序对比" class="headerlink" title="冒泡排序和选择排序对比"></a>冒泡排序和选择排序对比</h1><p>一般情况下对比两个算法的好坏，会从时间复杂度和空间复杂度两个方面进行对比；</p><ul><li>时间复杂度：指的是一个算法执行所耗费的时间。 </li><li>空间复杂度：指运行完一个程序所需内存的大小。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 生成1000个数字进行排序</span><br><span class="hljs-comment">// 1. 创建空数组，保存随机出来的数据</span><br><span class="hljs-keyword">var</span> getarr = [];<br><br><span class="hljs-comment">// 2. 获取当前时间</span><br><span class="hljs-keyword">var</span> oDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-comment">// 3. 获取随机数字</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100000</span>; i++)&#123;<br><span class="hljs-keyword">var</span> num = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">1000</span> );<br>getarr.<span class="hljs-title function_">push</span>( num );<br>&#125;<br><br><span class="hljs-comment">// 4.调用选择排序或者冒泡排序</span><br><span class="hljs-title function_">xuanze</span>(getarr); <span class="hljs-comment">// 10W - 10m</span><br><span class="hljs-comment">// maopao(getarr); // 10W - 13354m</span><br><br><span class="hljs-comment">// 5. 获取时间差值</span><br>o.<span class="hljs-property">innerHTML</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() - oDate;<br></code></pre></td></tr></table></figure></li></ul><p><a name="9bd81a1c"></a></p><h1 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h1><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">binary_search</span>(<span class="hljs-params">num,list</span>)&#123;<br>    <span class="hljs-keyword">var</span> low = <span class="hljs-number">0</span>; <span class="hljs-comment">// 获取开始位置</span><br>    <span class="hljs-keyword">var</span> height = list.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>; <span class="hljs-comment">// 获取结束位置，下标值</span><br><br>    <span class="hljs-keyword">while</span>(low &lt;= height)&#123; <span class="hljs-comment">// 判断数组中是否有值</span><br>        mid = <span class="hljs-built_in">parseInt</span>((low + height)/<span class="hljs-number">2</span>); <span class="hljs-comment">// 获取数组中的中间值</span><br>        <span class="hljs-keyword">if</span>(list[mid] == num)&#123; <span class="hljs-comment">// 判断正好是中间值，返回下标</span><br>        <span class="hljs-keyword">return</span> mid; <span class="hljs-comment">// </span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list[mid] &gt; num)&#123; <span class="hljs-comment">// 如果中间值 &gt; 输入的数字，表示在左半部分</span><br>        height = mid -<span class="hljs-number">1</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        low = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 如果中间值 &lt; 输入的数字，表示在右半部分</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 没找到</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ranyihang/p/16128154.html">JS十大经典排序方式 </a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>闭包和轮询机制</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/57-%E9%97%AD%E5%8C%85%E5%92%8C%E8%BD%AE%E8%AF%A2%E6%9C%BA%E5%88%B6/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/57-%E9%97%AD%E5%8C%85%E5%92%8C%E8%BD%AE%E8%AF%A2%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p><a name="R32Lq"></a></p><h1 id="1-引出闭包案例"><a href="#1-引出闭包案例" class="headerlink" title="1.引出闭包案例"></a>1.引出闭包案例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// ？</span><br>    &#125;);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-comment">// 结果是什么：？</span><br></code></pre></td></tr></table></figure><p><a name="JTmWL"></a></p><h1 id="2-事件轮询机制（Event-Loop）"><a href="#2-事件轮询机制（Event-Loop）" class="headerlink" title="2.事件轮询机制（Event Loop）"></a>2.事件轮询机制（Event Loop）</h1><p>事件轮询（Event Loop）是一个很重要的概念，指的是计算机系统的一种运行机制。JavaScript语言就是采用的这种机制，来解决单线程运行带来的一些问题。</p><blockquote><ol><li>同步和异步任务分别进入不通的执行“场所”，同步的进入主线程，异步的进入Event Table并注册函数</li><li>当指定的事情完成时，Event Table会将这个函数移入Event Queue（事件队列&#x2F;任务队列&#x2F;消息队列）</li><li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行</li><li>上述过程会不断重复，也就是常说的Event loop（事件循环）</li></ol></blockquote><p>进程：</p><ul><li>进程是指在系统中正在运行的一个应用程序，程序一旦运行就是进程。</li><li>一个进程可以拥有多个线程，每个线程使用其所属进程的栈空间。</li></ul><p>线程：</p><ul><li>线程是进程的一个实体，是进程的一条执行路径。 </li><li>线程是CPU独立运行和独立调度的基本单位。</li></ul><p>任务队列：</p><ul><li>将要被执行的任务，存放在浏览器的任务队列中</li></ul><p>单线程：</p><ul><li>每次只能干一件事</li></ul><p>多线程：</p><ul><li>多线程是指从软件或者硬件上实现多个线程的并发技术 </li><li>优势： <ol><li>使用多线程可以把程序中占据时间长的任务放到后台去处理，如图片、视屏的下载 </li><li>发挥多核处理器的优势，并发执行让系统运行的更快、更流畅，用户体验更好</li></ol></li></ul><p>举例：你早上上班，正要打卡的时候，手机响了。。你如果先接了电话，等接完了，在打卡，就是单线程。<br />如果你一手接电话，一手打卡。就是多线程。<br />2件事的结果是一样的。。你接了电话且打了卡。</p><p>事件轮询：</p><ul><li>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）</li></ul><p><a name="XCOvV"></a></p><h2 id="2-1-JS是单线程还是多线程"><a href="#2-1-JS是单线程还是多线程" class="headerlink" title="2.1 JS是单线程还是多线程"></a>2.1 JS是单线程还是多线程</h2><p>javaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。<br />为什么不允许js可以实现多线程？因为如果实现了多线程，一个线程创建了一个div元素，而另外一个线程删除了这个div元素，那么这个时候浏览器应该听谁的？<br />所以为了避免出现这种互相冲突的操作，js从一开始就是单线程的，这就是它的核心特征。<br />单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br /><img src="https://gitee.com/YihangRan/markdownpicbed/raw/master/teaching/2021/12/20211222231553.png#clientId=u4686285f-4900-4&id=CKr2M&originHeight=781&originWidth=1230&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=udca21f7b-4085-46dc-ad22-2adb245c564&title="></p><p><a name="aSmFe"></a></p><h2 id="2-2-任务队列"><a href="#2-2-任务队列" class="headerlink" title="2.2 任务队列"></a>2.2 任务队列</h2><p><a name="c06r3"></a></p><h4 id="2-2-1-什么是宏任务，什么是微任务"><a href="#2-2-1-什么是宏任务，什么是微任务" class="headerlink" title="2.2.1 什么是宏任务，什么是微任务"></a>2.2.1 什么是宏任务，什么是微任务</h4><p>在js的异步任务中，分为宏任务和微任务<br />宏任务（由宿主也就是浏览器和node引发）：<br />setTimeout，setInterval，Ajax（网络请求），DOM事件<br />微任务（js引擎发布的任务）：<br />Promise async&#x2F;await<br />promise本身是同步的，then&#x2F;catch的回调函数是异步的<br />注意：微任务比宏任务的执行时间要早<br><a name="Nqr63"></a></p><h4 id="2-2-2-宏任务和微任务的执行顺序"><a href="#2-2-2-宏任务和微任务的执行顺序" class="headerlink" title="2.2.2 宏任务和微任务的执行顺序"></a>2.2.2 宏任务和微任务的执行顺序</h4><ol><li>同步代码</li><li>微任务的异步代码（promise等）</li><li>宏任务的异步代码（setTimeout，setInterval等）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667914476508-90edf586-259b-4410-955d-c2e2f387977e.png#averageHue=%23fffefe&clientId=uc226ee66-d1e3-4&from=paste&height=342&id=ue770be16&name=image.png&originHeight=616&originWidth=970&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18823&status=done&style=none&taskId=ucad45285-da26-4bd4-a305-050f72e44d4&title=&width=538.8889031645696" alt="image.png"><br />执行顺序<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1667914978114-5d90a251-e710-4311-9bf3-f93c921dbebc.png#averageHue=%23fef9f9&clientId=uc226ee66-d1e3-4&from=paste&height=303&id=u497c0359&name=image.png&originHeight=546&originWidth=904&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46885&status=done&style=none&taskId=ub2a49498-59e4-4dae-adda-e1a60c6da90&title=&width=502.222235526568" alt="image.png"><br><a name="SYoAN"></a></p><h4 id="2-2-3-案例"><a href="#2-2-3-案例" class="headerlink" title="2.2.3 案例"></a>2.2.3 案例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;,<span class="hljs-number">100</span>)<br><span class="hljs-keyword">let</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br>&#125;)<br>pro.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// 1 3 4 5 1000 2</span><br></code></pre></td></tr></table></figure><p><a name="Xv43W"></a></p><h2 id="2-3-解决方案"><a href="#2-3-解决方案" class="headerlink" title="2.3 解决方案"></a>2.3 解决方案</h2><ol><li><p>使用闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-comment">//这个匿名函数生成了闭包的效果，新建了一个作用域，这个作用域接收到每次循环的i值保存了下来，即使循环结束，闭包形成的作用域也不会被销毁</span><br>  (<span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>      &#125;);<br>  &#125;)(i)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>使用let变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><a name="m3KLy"></a></p><h1 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3.闭包"></a>3.闭包</h1><p>特性：</p><ol><li>函数嵌套函数</li><li>函数内部可以引用函数外部的参数和变量</li><li>参数和变量不会被垃圾回收机制回收【延长变量作用域】</li></ol><p>包是js开发惯用的技巧：能够访问另一个函数作用域的变量的函数<br />清晰的讲：闭包就是一个函数，这个函数能够访问其他函数的作用域中的变量<br />闭包可以用在许多地方。它的最大用处有两个<br />1. 一个是前面提到的可以读取函数内部的变量<br />2. 另一个就是让这些变量的值始终保持在内存中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> func2; <span class="hljs-comment">// 闭包</span><br>&#125;<br><span class="hljs-keyword">var</span> num = <span class="hljs-title function_">func1</span>()();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br></code></pre></td></tr></table></figure><p>注意：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p><a name="574dd01d-1"></a></p><h2 id="3-1-闭包的作用"><a href="#3-1-闭包的作用" class="headerlink" title="3.1 闭包的作用"></a>3.1 闭包的作用</h2><p>闭包可以延长作用域链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-keyword">var</span> name = name;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br>  &#125;<br>   <span class="hljs-keyword">return</span> sayName;<br>&#125;<br><span class="hljs-keyword">var</span> fun = <span class="hljs-title function_">person</span>(<span class="hljs-string">&#x27;王小明&#x27;</span>);<br><span class="hljs-title function_">fun</span>();<span class="hljs-comment">// 王小明</span><br></code></pre></td></tr></table></figure><p>fun 是一个 <strong>全局函数</strong><code>，但可以访问到</code><strong>person</strong><code>里的</code><strong>局部变量 name</strong><code>，这是因为</code><strong>fun</strong><code>的值是从</code><strong>person</strong><code>函数中返回的</code><strong>sayName</strong>函数，而sayName 函数是可以访问到局部变量 name 的；</p><p><a name="0ec3598a"></a></p><h2 id="3-2-复杂闭包案例分析"><a href="#3-2-复杂闭包案例分析" class="headerlink" title="3.2 复杂闭包案例分析"></a>3.2 复杂闭包案例分析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 局部变量</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;我是outer里面的变量&#x27;</span>;<br>  <span class="hljs-comment">// var c = &#x27;one&#x27;</span><br>  <span class="hljs-comment">// console.log(a);</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">twoinner</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-string">&#x27;我是twoinner的变量&#x27;</span>;<br>    <span class="hljs-keyword">var</span> c = <span class="hljs-string">&#x27;two&#x27;</span><br>    <span class="hljs-comment">// console.log(b);</span><br>    <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-comment">// function thrinner()&#123;</span><br>    <span class="hljs-comment">//     var c = &#x27;我是thrinner&#x27;;</span><br>    <span class="hljs-comment">//     console.log(c);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// thrinner();</span><br>    <span class="hljs-comment">// return thrinner;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> twoinner; <span class="hljs-comment">// 函数体: twoinner函数就是一个闭包, 因为它能够访问到其他函数中的变量的作用域</span><br>&#125;<br><span class="hljs-comment">// console.log(outer());</span><br><span class="hljs-comment">// console.log(outer()());</span><br><span class="hljs-comment">// outer()()();</span><br><span class="hljs-keyword">var</span> n =  <span class="hljs-title function_">outer</span>()();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br></code></pre></td></tr></table></figure><p><a name="nF4tB"></a></p><h2 id="3-3-闭包能够解决的问题"><a href="#3-3-闭包能够解决的问题" class="headerlink" title="3.3 闭包能够解决的问题"></a>3.3 闭包能够解决的问题</h2><p>问题：给下面5个li添加点击事件，点击显示当前元素的下标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> oli = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">/* 输出的全都是5 */</span></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;oli.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">        oli[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125; </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用闭包解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 闭包方案解决: */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;oli.<span class="hljs-property">length</span>;i++)&#123;<br>  oli[i].<span class="hljs-property">onclick</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    &#125;<br>  &#125;)(i); <span class="hljs-comment">// 闭包</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用let解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// let 方案解决</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;oli.<span class="hljs-property">length</span>;i++)&#123;<br>  oli[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>  &#125;; <span class="hljs-comment">// 闭包</span><br>&#125;<br></code></pre></td></tr></table></figure><p>分析执行过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 分析执行过程 */</span><br>oli[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-number">0</span></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;)(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// =&gt; 第一次循环 闭包函数自执行完毕</span><br>oli[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><br /><a name="xHK6x"></a>## 3.4 闭包有三个特性：<ol><li>函数嵌套函数</li><li>函数内部可以引用外部的参数和变量</li><li>参数和变量不会被垃圾回收机制回收<br><a name="DDU9Z"></a></li></ol><h1 id="4-自执行函数"><a href="#4-自执行函数" class="headerlink" title="4. 自执行函数"></a>4. 自执行函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是自执行函数&#x27;</span>)&#125; ()); <span class="hljs-comment">// 用括号把整个表达式包起来</span><br>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是自执行函数&#x27;</span>)&#125;) (); <span class="hljs-comment">//用括号把函数包起来</span><br>!<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是自执行函数&#x27;</span>)&#125;(); <span class="hljs-comment">// 求反，我们不在意值是多少，只想通过语法检查。</span><br>+<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是自执行函数&#x27;</span>)&#125;();<br>-<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是自执行函数&#x27;</span>)&#125;();<br>~<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是自执行函数&#x27;</span>)&#125;();<br><span class="hljs-keyword">void</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是自执行函数&#x27;</span>)&#125;();<br><span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是自执行函数&#x27;</span>)&#125;();<br></code></pre></td></tr></table></figure><p>自执行函数通常都是定义之后立即执行，以后都不再会调用，所以声明时可以省略函数名，因此自执行函数又叫<code>**匿名函数**</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是匿名函数&#x27;</span>)&#125;)();<span class="hljs-comment">// 我是匿名函数</span><br></code></pre></td></tr></table></figure><p>如果上一行代码没有使用 分号 ‘ ; ‘结束，可能会导致匿名函数通不过语法检查，所以通常会在小括号前加个分号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">;(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是匿名函数&#x27;</span>)&#125;)()<span class="hljs-comment">// 我是匿名函数</span><br></code></pre></td></tr></table></figure><p><a name="e9036d3e"></a></p><h2 id="4-1自执行函数的效果"><a href="#4-1自执行函数的效果" class="headerlink" title="4.1自执行函数的效果"></a>4.1自执行函数的效果</h2><p>自执行函数可以用来保存变量的作用域，防止污染全局变量<br><a name="630ec65b"></a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>防抖和节流</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/56-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/56-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>防抖(debounce)和节流(throttle)<br>debounce英  [di’bauns]      throttle英  [ˈθrɒtl]<br>本质上是优化高频率执行代码的一种手段<br>如：浏览器的 resize、scroll、keypress、mousemove 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能<br>为了优化体验，需要对这类事件进行调用次数的限制，对此我们就可以采用 防抖（debounce） 和 节流（throttle） 的方式来减少调用频率<br>定义<br>● 节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>● 防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时<br>防抖<br>为什么会出现debounce和throttle<br>防抖和截流是针对响应跟不上触发频率这类问题的两种解决方案。<br>在给DOM绑定事件时，有些事件我们时无法控制触发频率的。如鼠标移动事件onmousemove，滚动滚动条事件onscroll，窗口大小改变事件onresize，瞬间的操作都会导致这些事件会被高频触发。如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。在实时检查输入时，如果我们绑定onkeyup事件发请求去服务器端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发</p><p>总结：以下场景往往由于事件频繁被触发，而重复执行DOM操作，资源加载等重行为、会导致UI停顿甚至浏览器崩溃。</p><ol><li>window对象的resize、scroll和拖拽时的mousemove事件 </li><li>射击游戏中的mousedown，keydown事件 </li><li>类似百度搜索提示keyup事件</li></ol><p>问题分析<br>        DOM操作比非DOM交互需要更多的内存和CPU事件，连续尝试进行过多的DOM相关操作可能会导致浏览器挂起，有时候甚至会崩溃<br>        实际上对于window的resize事件，实际需求大多为停止改变大小n毫秒后执行后续操作、而拖拽的mousemove事件函数则是以一定的频率执行后续处理。比如拖拽事件、可以在用户能够接受的范围内更改代码的执行频率、mousemove的触发频率大概为10ms【100次】一次，而当我们设置执行事件为50ms【20次】一次时，用户也不会察觉、这样我们就可以在不影响用户体验的前提下，提高性能。<br>        针对这两种需求就出现了防抖（debounce）和节流（throttle）两种解决方法</p><p>debounce防抖<br>        debounce，去抖动。策略是当事件被触发时，设定一个周期延迟动作，若期间又被触发，则重新设定周期，直到周期结束，执行动作。这是debounce的基本思想，在后期又扩展了前缘debounce，即执行动作在前，然后设定周期，周期内有事件被触发，不执行动作，且周期重新设定</p><pre><code class="hljs">    debounce的特点是当事件快速联系不断触发时，动作只会执行一次。延迟debounce，是在周期结束时执行。但当触发有间断，且简短大雨我们设定的时间间隔时，动作就会有多次执行</code></pre><p>总结：什么是debounce，高频率触发的事件，我们最终只让他执行一次</p><p>防抖代码</p><style>  * {    margin: 0;    padding: 0;  }  #common {    position: absolute;    left: 0;    top: 0;    border: 1px solid #000;    width: 300px;    height: 600px;  }  #special {    position: absolute;    left:400px;    top: 0;    border: 1px solid #000;    width: 300px;    height: 600px;  }</style><div id="common"></div><div id="special"></div><script>var delay = 300;var common = document.getElementById('common') // 获取页面的左边var special = document.getElementById('special') // 获取页面的右边<p>function debounce(fn, delay) { &#x2F;&#x2F; 定义一个debounce函数<br>    clearTimeout(fn.timeid)<br>    fn.timeid &#x3D; setTimeout(function () {<br>            fn()<br>    }, delay)<br>}</p><p>function addlist() { &#x2F;&#x2F; 监听事件的响应事件，执行dom操作。<br>        special.innerHTML +&#x3D; ‘<li>k</li>‘<br>}</p><p>function commonWay() { &#x2F;&#x2F; 这是执行了普通的函数<br>        common.innerHTML +&#x3D; ‘<li>k</li>‘<br>}<br>&#x2F;&#x2F; 这是执行debounce的。<br>window.onresize &#x3D; function () {<br>    debounce(addlist, delay) &#x2F;&#x2F;这一个防抖设置<br>    commonWay() &#x2F;&#x2F; 这个是普通的函数执行<br>}<br></script></p><p>面试题：<br>什么是防抖：在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束。<br>什么时候使用：防抖用于高频触发的事件<br>特点：高频触发事件处理程序，只执行他的最后一次</p><p>节流<br>节流代码</p><div id="common">  throttle</div><div id="special">  debounce</div><script>  var delay = 300;  var common = document.getElementById('common')   // 获取页面的左边  var special = document.getElementById('special')   // 获取页面的右边<p>  function addlist() { &#x2F;&#x2F; 监听事件的响应事件，执行dom操作。<br>    special.innerHTML +&#x3D; ‘<li>k</li>‘<br>  }</p><p>  function commonWay() { &#x2F;&#x2F; 这是执行了普通的函数<br>    common.innerHTML +&#x3D; ‘<li>k</li>‘<br>  }</p><p>  &#x2F;&#x2F; tottle的实现，也就是节流的实现,就是设置了一个一开始函数运行的时间戳进行执行<br>  var startTime, timestamp, timer;</p><p>  function throttle(fn, delay) {<br>    &#x2F;&#x2F; timestamp &#x3D; +new Date()<br>    timestamp &#x3D; new Date().getTime(); &#x2F;&#x2F; 时间戳 timestamp &#x3D; 10:23:10  10:23:20 10:23:59 10:23:60<br>    clearTimeout(timer)<br>    if (!startTime) {<br>      startTime &#x3D; timestamp &#x2F;&#x2F; startTime &#x3D; 10:23:59<br>    }<br>    if (timestamp - startTime &gt;&#x3D; delay) {<br>      fn() &#x2F;&#x2F; 这里才会调用<br>      startTime &#x3D; timestamp<br>    } else {<br>      timer &#x3D; setTimeout(function () {<br>        fn()<br>      }, delay)<br>    }<br>  }</p><p>  function debounce(fn, delay) {     &#x2F;&#x2F; 定义一个debounce函数<br>    clearTimeout(fn.timeid)<br>    fn.timeid &#x3D; setTimeout(function () {<br>      fn()<br>    }, delay)<br>  }</p><p>  window.addEventListener(‘resize’, function () {<br>    throttle(commonWay, 200); &#x2F;&#x2F; 节流 100ms执行一次，1s执行了10次；<br>    debounce(addlist, delay); &#x2F;&#x2F; 防抖<br>  })<br></script></p><p>总结<br>以下场景往往由于事件频繁被触发，而重复执行DOM操作、资源加载等重行为、会导致UI停顿甚至浏览器崩溃。<br>1、window对象的resize、scroll和拖拽时的mousemove事件<br>2、射击游戏中的mousedown、keydown事件<br>3、类似百度搜索提示keyup事件<br>防抖： 在事件多次触发时，通过防抖，只执行最后一次事件处理程序<br>节流：  降低事件处理程序执行的频率。  比如，onmousemove事件如果一秒钟执行200次，通过节流可以只执行20次</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高频面试题</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/55-%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/55-%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vue3js.cn/interview/">https://vue3js.cn/interview/</a><br><a name="DeMrh"></a></p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ol><li>html5新增了哪些内容，删除了哪些标签？</li></ol><p>新增：<br />结构化标签：nav，header，article，aside，section，footer<br />视频音频标签：video，audio<br />表单控件：date，time，number，url，range，pattern，email，color<br />删除标签：<br />font，dir，frameset，noframe，frame<br><a name="gsLCq"></a></p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ol><li>什么是盒模型</li></ol><p>标准盒模型：box-sizing：content-box 内容+边框+内边距+外边距<br />怪异盒模型：box-sizing：border-box  内容【内边距+边框】 + 外边距</p><ol start="2"><li><p>隐藏元素的方式有哪些</p><blockquote><ol><li>dianplay:none</li><li>opacity：0</li><li>width：0；overflow：hidden</li><li>height：0；overflow：hidden</li><li>transform：scale(0)</li><li>visibility：hidden；</li><li>定位 position：fixed； top：-高度；left：-宽度</li><li>transform：rotateX（180deg）； backface-visibility：hidden;</li></ol></blockquote></li><li><p>怎么解决浮动塌陷问题？</p><blockquote><ol><li>给父元素添加高度</li><li>clear：both</li><li>使用bfc的特性<ol><li>overflow：hidden</li><li>给父元素添加float：left&#x2F;right</li><li>position:fixed</li><li>display:table&#x2F;table-ceil</li></ol></li></ol></blockquote></li><li><p>样式重置经常会重置哪些标签</p></li></ol><p>i,em{ font-style:normal}<br />li{list-style:none}<br />a{text-decoration:none;color:#000}<br />p,h1,body,ul,ol,li,dl,dt,dd{margin:0;padding:0}<br />input{outline:0;margin:0}<br />input[type&#x3D;button],input[type&#x3D;submit],input[type&#x3D;reset]{box-sizing:content-box}<br />b,strong{font-weight:normal}</p><ol start="5"><li>什么是BFC</li></ol><p>BFC块格式化上下文<br />float的值不为none;<br />overflow的值不为visible;<br />position的值为fixed &#x2F; absolute;<br />display的值为table-cell &#x2F; table-caption &#x2F; inline-block &#x2F; flex &#x2F; inline-flex</p><ol start="6"><li><p>posotion属性的选项</p><blockquote><p>absolute: 绝对定位；相对于页面的左上角；相对于脱离了文档流的父元素定位<br>relative: 相对定位；相对于原位置的左上角定位，并且不会让出原来的位置<br>fixed: 固定定位；相对于窗口的左上角定位<br>sticky: 粘性定位；滚动到指定的某个位置后，会固定再指定的位置</p></blockquote></li><li><p>css3新增了哪些内容</p><blockquote><p>圆角，背景渐变，背景裁切，背景定位，2D【旋转，平移，缩放】，3D【旋转，平移，缩放】，动画效果，过渡，文字阴影和盒子阴影，自定义引入字体，选择器【属性选择器】，媒体查询</p></blockquote></li><li><p>如何让一个元素出现再页面的正中间</p><blockquote><ol><li>用定位</li></ol></blockquote><p>position：absolute；</p><blockquote><p>top：0；left：0；right：0；bottom：0；<br>margin：auto;<br>2. 弹性盒子</p></blockquote><p>.father{</p><blockquote><p>display:flex;<br>justify-content:center;<br>align-items：center<br>}<br>3. 定位</p></blockquote><p>position：fixed；</p><blockquote><p>left：50%；<br>top：50%；<br>margin-top：-高度的一半<br>margin-left：-宽度的一半</p></blockquote></li><li><p>想要让一个元素，宽度100%，高度100%显示</p><blockquote><p>方法一：<br>html,body{<br>            height: 100%;</p></blockquote></li></ol><blockquote><pre><code class="hljs">    &#125;    .box&#123;        width: 100%;        height: 100%;        background-color: pink;    &#125;</code></pre><p>方法二：<br>&#x2F;* 视窗的宽高：vw，vh *&#x2F;<br>            width: 100vw;<br>            height: 100vh;<br>            background-color: pink;</p></blockquote><p><a name="N8p2C"></a></p><h1 id="布局模式"><a href="#布局模式" class="headerlink" title="布局模式"></a>布局模式</h1><ol><li>常用的布局模式有哪些</li></ol><p>div+css，响应式布局，百分比布局【流式布局】，弹性盒子【flex】，rem</p><ol start="2"><li>为什么不使用table进行页面布局</li></ol><p>嵌套层级太深<br />css样式不方便设置<br />cellpadding，cellspaceing这些间隔不方便调整</p><ol start="3"><li>弹性盒子和float有什么区别？</li></ol><p>浮动是作用到当前元素身上，弹性盒子是设置容器<br />浮动宽度不够会自动换行；弹性盒子不管你的内容有多少，默认情况下都不会换行<br />浮动会出现高度塌陷（浮动塌陷）；弹性盒子不会<br />浮动是改变元素再水平方向上的位置；弹性盒子既可以调整主轴方向上的位置，调整交叉轴上的位置</p><ol start="4"><li><p>flex:1 0 auto 是什么意思</p><blockquote><p>flex：是flex-grow，flex-shrink和flex-basis的简写<br>flex-grow：定义项目的的放大比例；<br>flex-shrink：定义项目的缩小比例；<br>flex-basis： 定义在分配多余空间之前，项目占据的主轴空间（main size），浏览器根据此属性计算主轴是否有多余空间，</p><ul><li>默认值为auto，即 项目原本大小；</li><li>tranform：rotate3D( 0&#x2F;1 ,y,z,deg);</li><li>数据类型：布尔值（true 1&#x2F;false 0）</li></ul></blockquote><p>所以flex属性的默认值为：0 1 auto （不放大会缩小）<br />flex为none：0 0 auto （不放大也不缩小）<br />flex为auto：1 1 auto （放大且缩小）</p></li><li><p>什么是圣杯布局？怎么实现圣杯布局</p></li><li><p>网站优化的内容有哪些</p></li></ol><p><a href="https://blog.csdn.net/weixin_43822787/article/details/120434963">https://blog.csdn.net/weixin_43822787&#x2F;article&#x2F;details&#x2F;120434963</a></p><ol start="7"><li>什么是重绘（重排-repalint），什么是回流（reflow）<br><a name="Ika7D"></a></li></ol><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><ol><li>this指向</li><li>DOM操作</li></ol><p>常见的操作包括创建节点，查询节点，更新节点，添加节点，删除节点</p><ol start="3"><li>事件冒泡</li><li>事件委托</li><li>什么是闭包，闭包的优缺点，能写一个简单的闭包么</li><li>从输入url到页面呈现经历了什么</li></ol><p>简单的分析，从输入 URL到回车后发生的行为如下：<br />URL解析<br />DNS 查询<br />TCP 连接<br />HTTP 请求<br />响应请求<br />页面渲染</p><ol start="7"><li>作用域和作用域链</li><li>数组去重&#x2F;冒泡排序</li><li>new一个新对象的过程，发生了什么？</li></ol><p>new一个实例话对象经历的四个阶段：<br />1 ）创建一个空的实例话对象 <br />2 ）让构造函数中的this指向空的实例话对象 <br />3 ）执行（调用）构造函数，从而创建实例话对象自身的属性和方法 <br />4 ）返回实例化对象 </p><ol start="10"><li>什么事深拷贝，什么是浅拷贝，如何实现深拷贝？</li><li>什么是原型，什么是原型链</li><li>call&#x2F;apply&#x2F;bind的区别<br><a name="X7gR2"></a></li></ol><h1 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h1><ol><li><p>css在head部分引入，js在body结束的地方引入</p></li><li><p>使用cdn引入静态资源</p></li><li><p>按需加载数据：触底加载，tab切换</p></li><li><p>减少dom操作的次数</p><blockquote><p>使用appendChild代替innerHTML<br>使用时间委托</p></blockquote></li><li><p>减少回流和重绘</p></li><li><p>防抖和节流</p></li><li><p>为了提升用户体验： 请求数据时使用loading</p></li><li><p>使用base编码的图片<br><a name="H9o3z"></a></p></li></ol><h1 id="项目常见功能"><a href="#项目常见功能" class="headerlink" title="项目常见功能"></a>项目常见功能</h1><ol><li>首页</li><li>分类页面</li><li>购物车页面</li><li>我的（登陆，注册）</li><li>列表页</li><li>详情页</li><li>搜索模块</li></ol><p><a name="hTk3t"></a></p><h1 id="项目注意事项"><a href="#项目注意事项" class="headerlink" title="项目注意事项"></a>项目注意事项</h1><p><a name="gqi74"></a></p><h4 id="1-解决图片防盗链"><a href="#1-解决图片防盗链" class="headerlink" title="1. 解决图片防盗链"></a>1. 解决图片防盗链</h4><meta name="referrer" content="never"> <a name="oknoE"></a>#### 2. 请求后端数据出错的排错思路<ol><li>打开chrome浏览器开发者工具的” 网络”，查看是否发起请求，请求地址，请求方式，请求参数是否正确<br><a name="i1bEI"></a></li></ol><h4 id="3-触底加载中遇到的问题"><a href="#3-触底加载中遇到的问题" class="headerlink" title="3. 触底加载中遇到的问题"></a>3. 触底加载中遇到的问题</h4><ol><li>问题是触底一次加载多页，而我想要的效果是触底一次加载一页</li></ol><p>原因：<br />解决思路： 添加一个开关（继续描述 ）</p><ol start="2"><li>加载到最后一页，本来应该停止，结果却发起更多次数据请求</li></ol><p>原因：<br />解决思路：<br><a name="tqj8r"></a></p><h4 id="4-图片懒加载时重复请求图片的bug"><a href="#4-图片懒加载时重复请求图片的bug" class="headerlink" title="4. 图片懒加载时重复请求图片的bug"></a>4. 图片懒加载时重复请求图片的bug</h4><p><a name="OhO6b"></a></p><h1 id="cookie，localStroage，sessionStroage区别"><a href="#cookie，localStroage，sessionStroage区别" class="headerlink" title="cookie，localStroage，sessionStroage区别"></a>cookie，localStroage，sessionStroage区别</h1><p>存储大小：<br />cookie：4KB<br />localStroage，sessionStroage：5M</p><p>存储的数据格式<br />cookie：整个是一个字符串格式<br />localStroage，sessionStroage：是键值对格式，值是字符串格式</p><p>时效性<br />cookie：既可以是会话存储，也可以永久存储；在于是否设置expires<br />localStroage：永久存储，除非是手动删除，否则一直存在<br />sessionStroage：会话存储，关闭页面之后就会消失</p><p><a name="I6LC3"></a></p><h1 id="ES5，ES6，ES7面试题"><a href="#ES5，ES6，ES7面试题" class="headerlink" title="ES5，ES6，ES7面试题"></a>ES5，ES6，ES7面试题</h1><ol><li>ES5中新增的数组方法有哪些</li><li>forEach和map有什么区别</li><li>reduce中的参数值分别表示什么意思</li><li>普通函数和箭头函数有什么区别</li><li>for-in,for-of,for,forEach有什么区别</li><li>你是怎么理解promise的，在什么场景使用</li><li>什么事async，什么事await</li></ol><p><a name="vXylw"></a></p><h1 id="Nodejs面试题要求：-闭眼或捂眼录视频"><a href="#Nodejs面试题要求：-闭眼或捂眼录视频" class="headerlink" title="Nodejs面试题要求： 闭眼或捂眼录视频"></a>Nodejs面试题要求： 闭眼或捂眼录视频</h1><p>以下面试题录在同一个视频中，直接提交视频即可<br />（流量不够用，不方便提交的同学给我报备一下）</p><ol><li>列举常用的字符串方法</li><li>列举常用的数组方法</li><li>什么是rem</li><li>什么是原型链</li><li>new一个实例化对象的四个阶段6.从输入url到浏览器显示页面发生了什么</li><li>什么是回流和重绘</li><li>常见HTTP状态码的含义</li><li>说一下promise</li><li>说一个async await</li><li>promise.all 和 promise.race 的用法和区别</li><li>什么是防抖和节流，描述防抖的原理和节流的原理</li><li>什么是事件流，解决事件冒泡</li><li>什么是事件委托，应用场景，优缺点</li><li>js的数据类型</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>node</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/54-node/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/54-node/</url>
    
    <content type="html"><![CDATA[<p>Node.js发布于2009年5月，由Ryan Dahl开发，是一个基于<a href="https://baike.baidu.com/item/Chrome/5633839?fromModule=lemma_inlink">Chrome</a> <a href="https://baike.baidu.com/item/V8/6178125?fromModule=lemma_inlink">V8</a>引擎的<a href="https://baike.baidu.com/item/JavaScript/321142?fromModule=lemma_inlink">JavaScript</a>运行环境，使用了一个<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519?fromModule=lemma_inlink">事件驱动</a>、非阻塞式I&#x2F;O模型，让JavaScript 运行在<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316?fromModule=lemma_inlink">服务端</a>的开发平台，它让JavaScript成为与<a href="https://baike.baidu.com/item/PHP/9337?fromModule=lemma_inlink">PHP</a>、<a href="https://baike.baidu.com/item/Python/407313?fromModule=lemma_inlink">Python</a>、<a href="https://baike.baidu.com/item/Perl/851577?fromModule=lemma_inlink">Perl</a>、<a href="https://baike.baidu.com/item/Ruby/11419?fromModule=lemma_inlink">Ruby</a>等服务端语言平起平坐的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708?fromModule=lemma_inlink">脚本语言</a>。 <br />Node.js对一些特殊用例进行优化，提供替代的<a href="https://baike.baidu.com/item/API/10154?fromModule=lemma_inlink">API</a>，使得V8在非浏览器环境下运行得更好，V8引擎执行Javascript的速度非常快，性能非常好，基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/2196523?fromModule=lemma_inlink">网络应用</a>。<br />NodeJS是一个JS运行环境，不是新的语言<br><a name="GpH8l"></a></p><h2 id="必备知识-终端"><a href="#必备知识-终端" class="headerlink" title="必备知识-终端"></a>必备知识-终端</h2><p>每个系统都有<code>终端</code>，以windows系统为例，windows7之后默认有两个终端<code>cmd</code>和<code>powershell</code>，在我们日常使用中，cmd不容易报错。对于前端来讲没有任何区别<br />我们安装Git时自带了<code>git bash</code>这也是个终端。<br />所以咱们的电脑有三个终端<code>cmd``powsershell``bash</code>，用哪个都行。<br><a name="n8c7r"></a></p><h3 id="打开终端"><a href="#打开终端" class="headerlink" title="打开终端"></a>打开终端</h3><p><a name="OZJnO"></a></p><h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><p><code>windows+R</code>打开运行，然后输入cmd<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664346343021-193563ba-591b-490e-9256-4d72d45d944f.png#averageHue=%23f4f3f2&clientId=uf24dd2cb-c769-4&from=paste&height=230&id=u13d685f0&name=image.png&originHeight=230&originWidth=399&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11082&status=done&style=none&taskId=u16626e32-156a-4e09-af2f-962742b3545&title=&width=399" alt="image.png"><br />回车即可<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664346359098-7315e744-feff-4fd7-a6e1-be19d314b748.png#averageHue=%231e1e1e&clientId=uf24dd2cb-c769-4&from=paste&height=512&id=u8083dbf2&name=image.png&originHeight=512&originWidth=979&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7813&status=done&style=none&taskId=u73837195-c2fe-4400-8d5c-8e4e7069ef0&title=&width=979" alt="image.png"><br><a name="ccVWq"></a></p><h4 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h4><p>同样的方法，把<code>cmd</code>更改成<code>powershell</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664346403260-24930a19-2e7e-4ad6-a650-613857e328e1.png#averageHue=%232b2c25&clientId=uf24dd2cb-c769-4&from=paste&height=372&id=u04539e3e&name=image.png&originHeight=372&originWidth=734&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15687&status=done&style=none&taskId=u8f85e438-63e0-4082-b102-50ae3dc036b&title=&width=734" alt="image.png"><br><a name="F0PKC"></a></p><h4 id="怎么从powershell跳转到cmd"><a href="#怎么从powershell跳转到cmd" class="headerlink" title="怎么从powershell跳转到cmd"></a>怎么从powershell跳转到cmd</h4><p>在powershell的界面 输入<code>cmd</code>回车即可<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664346479110-9677387f-448a-4b09-9d65-11c20b5c7095.png#averageHue=%232c2d25&clientId=uf24dd2cb-c769-4&from=paste&height=372&id=ud9706a20&name=image.png&originHeight=372&originWidth=734&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23926&status=done&style=none&taskId=udfbc0cda-bd7b-4085-b010-d608259fa9d&title=&width=734" alt="image.png"><br />为什么会有这样的需求，前端的一些命令在powershell默认禁止执行，需要配置解开进制的操作。<br />可以在这里解决powsershell默认禁用的操作。<br /><a href="https://www.jianshu.com/p/028f93c338c1">https://www.jianshu.com/p/028f93c338c1</a><br><a name="WfDb1"></a></p><h3 id="终端路径"><a href="#终端路径" class="headerlink" title="终端路径"></a>终端路径</h3><p>我们打开的终端，都是自动打开的路径的。未来我们需要用终端时，都是要在我们的项目中用的。我们在运行中打开的cmd，路径不是我们的项目。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664346863263-26d64766-64eb-4bb0-9eba-282e75048286.png#averageHue=%231e1e1e&clientId=uf24dd2cb-c769-4&from=paste&height=512&id=uf6caff29&name=image.png&originHeight=512&originWidth=979&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7857&status=done&style=none&taskId=u830dc999-0473-4eb2-a331-2ff0784dc11&title=&width=979" alt="image.png"><br />我们想要跳转到我们的项目目录。如果能够直接打开就跳转到对应的目录最好。<br><a name="CX7DU"></a></p><h4 id="如何在对应的目录中打开终端"><a href="#如何在对应的目录中打开终端" class="headerlink" title="如何在对应的目录中打开终端"></a>如何在对应的目录中打开终端</h4><p>终端中显示的路径需要是我们对应的目录的路径<br />在资源管理器中，打开项目目录，然后在地址栏里输入<code>cmd</code>回车<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664347004947-3a2caf5f-0a64-47e6-a30b-08fa8690c380.png#clientId=uf24dd2cb-c769-4&from=paste&height=580&id=u1cdc73ef&name=image.png&originHeight=580&originWidth=674&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86218&status=done&style=none&taskId=u1c1d25c8-809d-4887-aedf-f37fd5df3ec&title=&width=674" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664347030139-92693ecf-5e8e-4cb0-a759-fd4f3cecb864.png#clientId=uf24dd2cb-c769-4&from=paste&height=253&id=uf222e650&name=image.png&originHeight=253&originWidth=539&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6899&status=done&style=none&taskId=u392672a5-1f66-4bf9-af24-acc23667bb9&title=&width=539" alt="image.png"><br />路径就是我们的项目路径。<br />注意！！！！打开终端一定要确认路径是否正确，再操作代码<br><a name="xTeSg"></a></p><h3 id="掌握几个终端的基本命令"><a href="#掌握几个终端的基本命令" class="headerlink" title="掌握几个终端的基本命令"></a>掌握几个终端的基本命令</h3><p>终端可以输入命令，在输入命令前，你得确保是终端环境。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664347280416-9e750827-4c65-4128-9564-16e883944c39.png#clientId=uf24dd2cb-c769-4&from=paste&height=319&id=u64d98212&name=image.png&originHeight=319&originWidth=515&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5701&status=done&style=none&taskId=ub1ad3e06-5320-4563-b5ec-61811474199&title=&width=515" alt="image.png"><br><a name="sk5os"></a></p><h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h4><p>查看当前目录中所有的文件和文件夹<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664347389148-03d24aa5-590e-45d7-976f-5d5c4c112192.png#clientId=uf24dd2cb-c769-4&from=paste&height=754&id=u56e78574&name=image.png&originHeight=754&originWidth=445&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22266&status=done&style=none&taskId=ue063b97a-69c2-40f3-8048-dc9654cb13e&title=&width=445" alt="image.png"><br><a name="jpLzI"></a></p><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>进入到某个路径下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./文件夹名字<br><span class="hljs-built_in">cd</span> 绝对路径（需要是当前盘符路径）<br></code></pre></td></tr></table></figure><p><a name="xRvGT"></a></p><h4 id="跳转到某个盘符"><a href="#跳转到某个盘符" class="headerlink" title="跳转到某个盘符"></a>跳转到某个盘符</h4><p>直接输入<code>盘符:</code>回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">d:<br></code></pre></td></tr></table></figure><p><a name="aWQqu"></a></p><h4 id="执行记录中的命令"><a href="#执行记录中的命令" class="headerlink" title="执行记录中的命令"></a>执行记录中的命令</h4><p>我们在终端执行过的命令都会被记录，按方向键 上 下 可以切换记录。<br><a name="AKVcZ"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664345561346-c713dc1e-1a34-4901-8b23-bb8a656bf9e4.png#clientId=uf24dd2cb-c769-4&from=paste&height=493&id=ucb55909f&name=image.png&originHeight=493&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48589&status=done&style=none&taskId=u1355c424-a36c-46ee-833e-5141c55a28d&title=&width=650" alt="image.png"><br />下载后一直下一步安装即可。最后一步勾选，安装python等工具，一般都会失败。如果失败，自己手动安装python。<br><a name="uJCr6"></a></p><h3 id="是否安装成功"><a href="#是否安装成功" class="headerlink" title="是否安装成功"></a>是否安装成功</h3><p>打开<code>终端</code>，输入<code>node -v</code>回车，如果能正常看到版本，则表示安装成功。<br />继续尝试输入<code>npm -v</code>回车，可以看到版本，表示npm安装成功<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664345767512-c246965d-390d-42ef-b818-734ac5fb0811.png#clientId=uf24dd2cb-c769-4&from=paste&height=126&id=uee4a8f6d&name=image.png&originHeight=126&originWidth=282&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2374&status=done&style=none&taskId=u4d33d0dc-6255-4d90-bc7c-26c890f200a&title=&width=282" alt="image.png"><br><a name="JpTxu"></a></p><h3 id="使用nodejs运行js文件"><a href="#使用nodejs运行js文件" class="headerlink" title="使用nodejs运行js文件"></a>使用nodejs运行js文件</h3><p>nodejs只有 ECMASCript + NodeJSApi 没有DOM和BOM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node xxx.js <span class="hljs-comment"># 可以运行我们的js代码</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/53-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/53-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>正则表达式是用来处理字符串的，它可以让你节省很多很多的代码。<br><a name="NA59r"></a></p><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>如果一个输入框不让提交，这个过程就是表单验证的过程。同理：</p><ol><li>如果我们输入的不是手机号，就不让提交</li><li>如果我们输入的不是邮箱地址，就不让提交</li><li>如果我们输入的不是身份证号，不然提交</li></ol><p>上面这些操作都是表单验证的场景，而这些都需要用到正则表达式。<br><a name="jwUoJ"></a></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a name="vhuNs"></a></p><h3 id="正则的使用"><a href="#正则的使用" class="headerlink" title="正则的使用"></a>正则的使用</h3><p>想要创建一个正则表达式，需要我们通过<code>new RegExp</code>进行创建。也可以通过<code>//</code>，建议使用后者，在特定时候，必须使用前者。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;规则&quot;</span>, <span class="hljs-string">&quot;修饰符&quot;</span>)<br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/规则/</span>修饰符<br></code></pre></td></tr></table></figure><p><a name="TLwvL"></a></p><h3 id="验证字符串是否符合正则表达式"><a href="#验证字符串是否符合正则表达式" class="headerlink" title="验证字符串是否符合正则表达式"></a>验证字符串是否符合正则表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">reg.<span class="hljs-title function_">test</span>(字符串) <span class="hljs-comment">// 返回值为true或者false</span><br></code></pre></td></tr></table></figure><p><a name="LSFto"></a></p><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><p><a name="X6tF1"></a></p><h3 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h3><p>正则表达式中一个字符是一个宽度，会和字符串中的对应的符合条件的字符尽心匹配，如： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/a/</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;sva&quot;</span><br><br><span class="hljs-comment">// reg就会匹配到a</span><br><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/aa/</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;svab&#x27;</span><br><span class="hljs-comment">// 这个不能匹配</span><br></code></pre></td></tr></table></figure><p><a name="H3fg7"></a></p><h3 id="如果我们要匹配的内容是一个范围"><a href="#如果我们要匹配的内容是一个范围" class="headerlink" title="如果我们要匹配的内容是一个范围"></a>如果我们要匹配的内容是一个范围</h3><p>使用<code>[]</code>表示一个范围，宽度为1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/[abcdefghjklmnopqrstuvwxyz]/</span> <span class="hljs-comment">// 虽然有26个字母，但是只匹配一个宽度</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/[a-z]/</span> <span class="hljs-comment">// 如果式连贯的字母，就可以写a-xxx 如a-c表示 abc</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/[a-zA-Z]/</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/[a-cA-C_0-4]/</span><br></code></pre></td></tr></table></figure><p>如果表示不包含[]中的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/[^a-c]/ <span class="hljs-comment">// 不包含a-c </span><br></code></pre></td></tr></table></figure><p><a name="FYt0d"></a></p><h3 id="以什么开始-以什么结束"><a href="#以什么开始-以什么结束" class="headerlink" title="以什么开始 以什么结束"></a>以什么开始 以什么结束</h3><p>为了确保我们匹配到的字符是一个完整没有其他不符合要求的字符，一般我们需要设置开始和结束的标志</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/^规则/</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/规则$/</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/^规则$/</span><br><br></code></pre></td></tr></table></figure><p><a name="o0eZd"></a></p><h3 id="将匹配宽度增加"><a href="#将匹配宽度增加" class="headerlink" title="将匹配宽度增加"></a>将匹配宽度增加</h3><p>在我们进行匹配时，有很多时候会出现相同匹配情况，我们可以设置匹配宽度 <code>&#123;m, n&#125;</code>例如：<br />QQ号是5-11位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> qqReg = <span class="hljs-regexp">/^[1-9][0-9]&#123;4,10&#125;$/</span><br></code></pre></td></tr></table></figure><p>数量可以有以下写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;m, n&#125; <span class="hljs-comment">// m - n位</span><br>&#123;m&#125; <span class="hljs-comment">// 固定m位</span><br>&#123;m,&#125; <span class="hljs-comment">// 大于等于m位</span><br></code></pre></td></tr></table></figure><p><a name="KvpZh"></a></p><h4 id="转义符"><a href="#转义符" class="headerlink" title="\ 转义符"></a>\ 转义符</h4><p>我们正则表达式中，有些字符有自己的功能，我们就需要通过转义符来实现另外一种功能，例如</p><ul><li>d表示字母d，\d表示数字</li><li>w表示字母w，\w表示所有字符</li><li>\表示转移，\表示普通的符号<br><a name="q6U3p"></a></li></ul><h4 id="字符大写"><a href="#字符大写" class="headerlink" title="字符大写"></a>字符大写</h4><p>如果一个元字符中字母大写，则一般表示，小写的反义结果，例如<br />\d表示数字 \D 表示非数字<br><a name="uDKNO"></a></p><h4 id=""><a href="#" class="headerlink" title="* + ?"></a>* + ?</h4><ul><li><ul><li>表示 0次或者多次 {0, }</li></ul></li><li>+表示1次或者多次 {1, }</li><li>? 表示0次或者1次 {0, 1}<br><a name="YclmM"></a></li></ul><h4 id="-1"><a href="#-1" class="headerlink" title="."></a>.</h4><p>.是除换行符外的任意字符<br />如果我们想要匹配标点符号<code>.</code>我们需要<code>\.</code><br><a name="JPCSs"></a></p><h4 id="b-B"><a href="#b-B" class="headerlink" title="\b \B"></a>\b \B</h4><p>表示单词的边界，一般你用不上，例如，我想匹配我的className</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box1 box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>\B表示非单词边界<br><a name="sEdiL"></a></p><h4 id="d-D"><a href="#d-D" class="headerlink" title="\d \D"></a>\d \D</h4><p>\d等同于[0-9] 表示数字<br />\D等同于[^0-9]  非数字<br><a name="nlLVv"></a></p><h4 id="n-s-S-r"><a href="#n-s-S-r" class="headerlink" title="\n \s \S \r"></a>\n \s \S \r</h4><p>\n换行符 \r回车符<br />\s空白符 \n \r \t \v都是空白符<br />\S表示非空白符</p><p><a name="CNwd7"></a></p><h4 id="w-W"><a href="#w-W" class="headerlink" title="\w \W"></a>\w \W</h4><p>\w字母数字下划线 等同于 [a-zA-Z0-9_]<br />\W表示非数字字母下划线[^a-zA-Z0-9_]<br><a name="xZFr2"></a></p><h4 id="数字"><a href="#数字" class="headerlink" title="\数字"></a>\数字</h4><p>我们如果在正则表达式中有括号，会产生一个分组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/(\d)\1/g</span> <span class="hljs-comment">// 等同于 \d前面匹配内容的引用</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;112234&#x27;</span> <span class="hljs-comment">// 11 22</span><br></code></pre></td></tr></table></figure><p><a name="wdv2t"></a></p><h4 id="-2"><a href="#-2" class="headerlink" title="()"></a>()</h4><p>优先匹配 产生分组 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/((1)(2))(((3))(4))/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">((1)(2))</span><br><span class="hljs-comment"> (1)</span><br><span class="hljs-comment">  (2)</span><br><span class="hljs-comment">  (((3))(4))</span><br><span class="hljs-comment">  ((3))</span><br><span class="hljs-comment">  (3)</span><br><span class="hljs-comment">  (4)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><a name="oYRCF"></a></p><h4 id="或"><a href="#或" class="headerlink" title="| 或"></a>| 或</h4><p>条件，不走前面就走后面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/((131)|(132))/</span><br></code></pre></td></tr></table></figure><p><a name="Pr5k0"></a></p><h4 id="num"><a href="#num" class="headerlink" title="$num"></a>$num</h4><p>在replace操作中，如果我们想要借助分组匹配到的结果，可以使用$num num就是组的序号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`</span><br><span class="hljs-string">  1. 题目1</span><br><span class="hljs-string">  2. 题目2</span><br><span class="hljs-string">  3. 题目3</span><br><span class="hljs-string">  4. 题目4</span><br><span class="hljs-string">  5. 题目5</span><br><span class="hljs-string">  6. 题目6</span><br><span class="hljs-string">`</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(题目\d)/g</span>, <span class="hljs-string">&quot;&#x27;$1&#x27;&quot;</span>))<br></code></pre></td></tr></table></figure><p><a name="Aeld0"></a></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>写在&#x2F;&#x2F;后面的字母</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reg = <span class="hljs-comment">//ig</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;ig&quot;</span>)<br></code></pre></td></tr></table></figure><p><a name="LYUsQ"></a></p><h4 id="g"><a href="#g" class="headerlink" title="g"></a>g</h4><p>全局匹配<br><a name="cE33Y"></a></p><h4 id="i"><a href="#i" class="headerlink" title="i"></a>i</h4><p>不区分大小写<br><a name="aAiYV"></a></p><h2 id="贪婪和懒惰"><a href="#贪婪和懒惰" class="headerlink" title="贪婪和懒惰"></a>贪婪和懒惰</h2><p>如果在限制符后添加<code>?</code>会进入懒惰模式，然后会尽可能少的取匹配对应的字符。默认是贪婪模式，尽可能多的匹配字符。<br><a name="pqQT6"></a></p><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p><a name="oQc76"></a></p><h3 id="pattern"><a href="#pattern" class="headerlink" title="(?:pattern)"></a>(?:pattern)</h3><p>可以代替<code>|</code>操作时，省略公共的字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`</span><br><span class="hljs-string">windows10</span><br><span class="hljs-string">  windows11</span><br><span class="hljs-string">`</span><br><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/windows(?:10|11)/</span><br><span class="hljs-comment">// 匹配到的是windows10 和 windows11 相当于windows10|windows11</span><br></code></pre></td></tr></table></figure><p><a name="Io1Sx"></a></p><h3 id="x3D-pattern"><a href="#x3D-pattern" class="headerlink" title="(?&#x3D;pattern)"></a>(?&#x3D;pattern)</h3><p>匹配后面的结尾的内容是否符合条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`</span><br><span class="hljs-string">windows10</span><br><span class="hljs-string">  windows11</span><br><span class="hljs-string">`</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/windows(?=\d+)/</span><br><span class="hljs-comment">// 匹配到的是windows 匹配数字但是不进行保存</span><br></code></pre></td></tr></table></figure><p><a name="IAuZx"></a></p><h3 id="lt-x3D-pattern"><a href="#lt-x3D-pattern" class="headerlink" title="(?&lt;&#x3D;pattern)"></a>(?&lt;&#x3D;pattern)</h3><p>和上面方向相反，先判断后匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`</span><br><span class="hljs-string">windows10</span><br><span class="hljs-string">  windows11</span><br><span class="hljs-string">`</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/(?&lt;=windows)\d+/</span><br><span class="hljs-comment">// 匹配到的是后面的数字，匹配window但是不保存</span><br></code></pre></td></tr></table></figure><p><a name="NlhKl"></a></p><h3 id="pattern-1"><a href="#pattern-1" class="headerlink" title="(?!pattern)"></a>(?!pattern)</h3><p>和第一个都是后面判断，表示不符合条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`</span><br><span class="hljs-string">windows10</span><br><span class="hljs-string">  windows11</span><br><span class="hljs-string">  windowsxp</span><br><span class="hljs-string">`</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/windows(?!\d+)/</span><br><span class="hljs-comment">// 匹配到的是windows 是windowsxp的windows 前面两个比匹配</span><br></code></pre></td></tr></table></figure><p><a name="GOvO3"></a></p><h3 id="lt-pattern"><a href="#lt-pattern" class="headerlink" title="(?&lt;!pattern)"></a>(?&lt;!pattern)</h3><p>和上面方向相反，先判断后匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`</span><br><span class="hljs-string">windows1</span><br><span class="hljs-string">  windows2</span><br><span class="hljs-string">  ubuntu3</span><br><span class="hljs-string">`</span><br><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/(?&lt;!windows)\d+/</span><br><span class="hljs-comment">// 匹配到的是后面的数字，但是是最后一个3，因为前面不能是windows</span><br></code></pre></td></tr></table></figure><p><a name="gnQIz"></a></p><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><p>大部分的字符串方法都可以使用正则表达式<br><a name="DVT7d"></a></p><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">str.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/正则/</span>)<br></code></pre></td></tr></table></figure><p><a name="OxVcu"></a></p><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>可以匹配到对应的字符串，咱们在网上使用的正则表达式验证，就是利用了match<br><a name="PM8N7"></a></p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>功能和indexOf相同，支持正则表达式，可以查询某个匹配到的正则在我们对应的字符串中的下标。<br><a name="u0kXL"></a></p><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>字符串替换，可以使用正则进行匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/正则/</span>, <span class="hljs-string">&quot;替换的内容&quot;</span>)<br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(正则)(正则)/</span>, <span class="hljs-string">&quot;$1:$2&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/52-Git/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/52-Git/</url>
    
    <content type="html"><![CDATA[<p><a name="KoSaD"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>作者是Linux之父，因为吐槽SVN难用，所以就自己开发了一个。<br><a name="m6LM5"></a></p><h3 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h3><p>版本控制工具主流的有</p><ul><li>git</li><li>svn</li></ul><p>我们要学习的git，版本控制工具就是可以帮助我们将代码进行备份存档，当我们想要用某个版本时，可以直接读档，读取对应的代码。并且解决了和同事间一起开发合并代码的问题。<br><a name="bfQNm"></a></p><h2 id="Git的前期准备"><a href="#Git的前期准备" class="headerlink" title="Git的前期准备"></a>Git的前期准备</h2><p><a name="gSztg"></a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://git-scm.com/">Git</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663984149750-d5f29c51-3131-48cd-9fae-e75e62e7f95c.png#averageHue=%2397bab1&clientId=ub2fa58c0-4ac3-4&from=paste&height=250&id=u89efaaac&name=image.png&originHeight=250&originWidth=318&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49765&status=done&style=none&taskId=ub1407eec-db2b-4637-b3bf-f6c6cd1b4b5&title=&width=318" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663984170246-177a5c43-7ca9-4bbb-a86d-0689b771e927.png#averageHue=%23f9f8f5&clientId=ub2fa58c0-4ac3-4&from=paste&height=602&id=ua4312867&name=image.png&originHeight=602&originWidth=716&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59120&status=done&style=none&taskId=u56b872b2-3b2d-459b-bfda-a394b7d0202&title=&width=716" alt="image.png"><br />因为服务器是国外，下载很慢，所以可以腾讯软件中心。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663984262731-25d0680f-7afa-4243-8911-314e38ee0bf4.png#averageHue=%23e5eef2&clientId=ub2fa58c0-4ac3-4&from=paste&height=303&id=u10b3a5d9&name=image.png&originHeight=303&originWidth=819&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51390&status=done&style=none&taskId=u8c8bdd18-df87-4d71-9186-77ae3a15ce4&title=&width=819" alt="image.png"><br><a name="X5ZXU"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Git的安装及其简单，虽然配置很多，但是默认全部下一步即可，注意！！！！安装路径不要有中文。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663984408536-46038baf-c8c3-4150-b889-d9972497d1ce.png#averageHue=%23f1f0f0&clientId=ub2fa58c0-4ac3-4&from=paste&height=392&id=u462541e1&name=image.png&originHeight=392&originWidth=499&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9599&status=done&style=none&taskId=u207347c4-7ce6-4323-a574-98bbdf4a027&title=&width=499" alt="image.png"><br><a name="TjGDJ"></a></p><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><p>安装成功后，右键会有<code>Git Bash Here</code>，我们也可以使用windows自带的终端。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663984467988-1c22323a-5425-495f-831c-b2e0d5675d37.png#averageHue=%23e4e4e4&clientId=ub2fa58c0-4ac3-4&from=paste&height=284&id=ua8a119cb&name=image.png&originHeight=284&originWidth=230&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12720&status=done&style=none&taskId=u3f9cf14a-629e-46a6-ba79-41c7d9de66a&title=&width=230" alt="image.png"><br />window + R，输入<code>cmd</code>打开终端，然后输入<code>git</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663984542976-8d44d9fd-8563-4435-86dd-61f411b2c61a.png#averageHue=%23252525&clientId=ub2fa58c0-4ac3-4&from=paste&height=512&id=u3bccefbb&name=image.png&originHeight=512&originWidth=979&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22418&status=done&style=none&taskId=ucd07b0fd-57a6-4339-9e52-5f42c6d4f57&title=&width=979" alt="image.png"><br />如果说提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#x27;git&#x27; 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。<br></code></pre></td></tr></table></figure><p>表示没有安装成功。<br><a name="qtpgi"></a></p><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><p>一会大家在提交的时候，可能会出现提交不了的情况，因为git在下载后，需要先配置下自己的用户名和邮箱<br />需要在<code>git bash</code>里输入这些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p><a name="jF2vz"></a></p><h2 id="Git原理"><a href="#Git原理" class="headerlink" title="Git原理"></a>Git原理</h2><p>git本地仓库原理<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663984833938-523133cf-f5e8-4ffc-af81-5eb8bd1cf326.png#averageHue=%23f6f5f5&clientId=ub2fa58c0-4ac3-4&from=paste&height=546&id=uf2c1efb6&name=image.png&originHeight=546&originWidth=1301&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22161&status=done&style=none&taskId=uab2502ce-d9c6-4136-a5b5-12043c3732c&title=&width=1301" alt="image.png"><br><a name="LxOor"></a></p><h2 id="使用Git"><a href="#使用Git" class="headerlink" title="使用Git"></a>使用Git</h2><p>我们需要把一个文件夹变成一个Git仓库<br><a name="XKLqQ"></a></p><h3 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化git仓库</h3><p>我们要使用下面的命令进行仓库的初始化操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>在我们要初始化成仓库的文件夹中，右键，打开<code>git bash here</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663984989430-2ee310cb-09cd-4b74-a7a3-23a8c742d2c9.png#averageHue=%23e3e3e3&clientId=ub2fa58c0-4ac3-4&from=paste&height=344&id=u695fc446&name=image.png&originHeight=344&originWidth=230&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14786&status=done&style=none&taskId=u6c667f30-0bf9-4176-be5b-dfcdf2f64ca&title=&width=230" alt="image.png">  <br />在打开的窗口中输入 <code>git init</code>回车<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985026548-46859b84-be65-43c3-922f-d26fe0f12688.png#averageHue=%231c1b1b&clientId=ub2fa58c0-4ac3-4&from=paste&height=370&id=ud4cb378f&name=image.png&originHeight=370&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17634&status=done&style=none&taskId=u9fd14cbf-01ad-4241-ae1a-11c6087904e&title=&width=581" alt="image.png"><br />初始化完成后，如果我们开启隐藏文件，会看到里面有<code>.git</code>文件夹<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985060394-c8d809ed-4201-4174-b348-263d6e8e7b60.png#averageHue=%23fafaf9&clientId=ub2fa58c0-4ac3-4&from=paste&height=124&id=u20e5177c&name=image.png&originHeight=124&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8332&status=done&style=none&taskId=u3b96afa5-259a-4f6d-b01f-a7b25eec80f&title=&width=642" alt="image.png"><br><a name="ywopf"></a></p><h4 id="我们也可以使用VSCode进行可视化操作"><a href="#我们也可以使用VSCode进行可视化操作" class="headerlink" title="我们也可以使用VSCode进行可视化操作"></a>我们也可以使用VSCode进行可视化操作</h4><p>打开VSCode的第三个选项<code>源代码管理</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985117925-c66e69b3-e0c2-4e39-af8b-3bf2200baf6c.png#averageHue=%234c8fba&clientId=ub2fa58c0-4ac3-4&from=paste&height=294&id=u02a85fa4&name=image.png&originHeight=294&originWidth=223&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11755&status=done&style=none&taskId=u9d2f646e-4060-47ed-86f3-38556ffb743&title=&width=223" alt="image.png"><br />点击初始化仓库<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985152380-da5516d6-f971-4fc0-b200-550e927e1d9a.png#averageHue=%23242d35&clientId=ub2fa58c0-4ac3-4&from=paste&height=321&id=ufdb7b08e&name=image.png&originHeight=321&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28825&status=done&style=none&taskId=u7f29abc9-bde8-42b2-9151-ee7f963434b&title=&width=616" alt="image.png"><br />等待片刻即可初始化完成<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985255865-a903d6b2-e966-48f7-9fde-bb1754de442d.png#averageHue=%231774b2&clientId=ub2fa58c0-4ac3-4&from=paste&height=346&id=u0cdc6374&name=image.png&originHeight=346&originWidth=346&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14836&status=done&style=none&taskId=u4159b244-7f98-4364-9991-26f626b50e4&title=&width=346" alt="image.png"><br><a name="tu3xc"></a></p><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><p>当我们添加，修改，删除某些文件时，我们的<code>源代码管理</code>中就会有对应文件的更改记录<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985355920-57e76e9e-92d3-431b-a380-b5fe41f7be91.png#clientId=ub2fa58c0-4ac3-4&from=paste&height=288&id=u4487824f&name=image.png&originHeight=288&originWidth=49&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4385&status=done&style=none&taskId=u2a84b8a5-3d17-4809-b7ff-bc1e1e192ec&title=&width=49" alt="image.png"><br />对应的源代码管理的图表上就会出现角标显示文件更改的数量。点开之后可以查看具体信息<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985478683-997e3c7d-45a0-409f-8c57-bbbe0a7ebd02.png#averageHue=%2316689f&clientId=ub2fa58c0-4ac3-4&from=paste&height=312&id=u074769cd&name=image.png&originHeight=312&originWidth=340&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14217&status=done&style=none&taskId=u96e7b955-c301-488f-b8f1-3346f73fa3e&title=&width=340" alt="image.png"><br />后面的<code>u</code>代表了不同的状态。更改的文件不在暂存区，需要我们进行暂存。<br><a name="LAPLK"></a></p><h3 id="暂存文件"><a href="#暂存文件" class="headerlink" title="暂存文件"></a>暂存文件</h3><p><a name="CRzrw"></a></p><h4 id="第一种方式-命令的方式"><a href="#第一种方式-命令的方式" class="headerlink" title="第一种方式 命令的方式"></a>第一种方式 命令的方式</h4><p>使用<code>git add .</code>可以快速暂存所有的文件，如果我们只想暂存某个或者某些文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 文件名 文件名2<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985669641-fb109074-0957-40cf-b6c0-f5cb6eca4c84.png#averageHue=%231f1e1b&clientId=ub2fa58c0-4ac3-4&from=paste&height=370&id=ueb5f975b&name=image.png&originHeight=370&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21829&status=done&style=none&taskId=u74c28f01-e08d-4fe6-a0e1-b667c8d1a5e&title=&width=581" alt="image.png"><br><a name="o97XC"></a></p><h4 id="第二种方式-VSCode可视化操作"><a href="#第二种方式-VSCode可视化操作" class="headerlink" title="第二种方式 VSCode可视化操作"></a>第二种方式 VSCode可视化操作</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985702075-f3bbd0ba-9f64-4e36-be37-e96fadbbe1f8.png#averageHue=%2377a894&clientId=ub2fa58c0-4ac3-4&from=paste&height=296&id=u61c8e3e2&name=image.png&originHeight=296&originWidth=426&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17505&status=done&style=none&taskId=u8ce8118c-5182-4eb7-872a-114557d2b14&title=&width=426" alt="image.png"><br />点一下对应的<code>+</code>即可让VSCode帮我们执行<code>git add .</code>的命令<br />文件后也有暂存的按钮，可以单独暂存某个文件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663985744483-97390dd3-34ef-4d40-bc9c-ec24e3a04324.png#averageHue=%231d5376&clientId=ub2fa58c0-4ac3-4&from=paste&height=300&id=u279bff14&name=image.png&originHeight=300&originWidth=389&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16657&status=done&style=none&taskId=u85c0b629-4289-4465-87a6-3ecff434b16&title=&width=389" alt="image.png"><br><a name="Zk7Nc"></a></p><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><p><a name="jjMEM"></a></p><h4 id="第一种方式-命令的方式-1"><a href="#第一种方式-命令的方式-1" class="headerlink" title="第一种方式 命令的方式"></a>第一种方式 命令的方式</h4><p>输入<code>git commit -m &quot;提交信息&quot;</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986067833-adce5ca0-72a3-4980-b66e-f69f21d3ec78.png#averageHue=%23201e1c&clientId=ub2fa58c0-4ac3-4&from=paste&height=370&id=udbac1680&name=image.png&originHeight=370&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34998&status=done&style=none&taskId=u44500d92-4e26-47c8-88a0-4d6438416cd&title=&width=581" alt="image.png"><br><a name="twpQA"></a></p><h4 id="第二种方式-VSCode可视化操作-1"><a href="#第二种方式-VSCode可视化操作-1" class="headerlink" title="第二种方式 VSCode可视化操作"></a>第二种方式 VSCode可视化操作</h4><p>直接暂存后，输入提交信息，然后点击提交即可。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986324351-5d5d1515-56aa-464b-91ff-cb85e09b40de.png#averageHue=%231877b7&clientId=ub2fa58c0-4ac3-4&from=paste&height=307&id=ud48b613d&name=image.png&originHeight=307&originWidth=356&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19014&status=done&style=none&taskId=uad3e26c9-8222-4865-a9f7-50d6106b264&title=&width=356" alt="image.png"><br><a name="eGPli"></a></p><h3 id="查看自己的提交记录"><a href="#查看自己的提交记录" class="headerlink" title="查看自己的提交记录"></a>查看自己的提交记录</h3><p>我们通过<code>git log</code>命令查看我们的提交记录<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986420557-a1dba137-bf08-41e2-b339-c38f1f9f19c6.png#averageHue=%23050301&clientId=ub2fa58c0-4ac3-4&from=paste&height=260&id=u9c09083b&name=image.png&originHeight=260&originWidth=557&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17777&status=done&style=none&taskId=ubb4fca5e-97d2-4283-8ca3-2bd68588b65&title=&width=557" alt="image.png"><br />我们也可以有更好的可视化的方案，在VSCode中安装一个插件<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986453901-c2f93079-e40a-4c7b-b02f-6517d4b42eef.png#averageHue=%232b383f&clientId=ub2fa58c0-4ac3-4&from=paste&height=140&id=u0d8dc537&name=image.png&originHeight=140&originWidth=385&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11722&status=done&style=none&taskId=uff7e3121-7194-470f-96df-419541d123e&title=&width=385" alt="image.png"><br />安装后，在<code>源代码管理</code>中会新增一个图标<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986515072-84ff21a6-feb3-4339-9cd6-01c7fb0c29b3.png#averageHue=%23718d92&clientId=ub2fa58c0-4ac3-4&from=paste&height=423&id=ub74dc64f&name=image.png&originHeight=423&originWidth=460&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21836&status=done&style=none&taskId=uf7535f26-e379-42ab-b427-f0139b3c385&title=&width=460" alt="image.png"><br />点击即可打开一个可视化的提交记录界面。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986550682-776dd0e9-1873-4222-aaa8-db513a44f6c1.png#averageHue=%232b2a29&clientId=ub2fa58c0-4ac3-4&from=paste&height=258&id=u7d821682&name=image.png&originHeight=258&originWidth=631&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27928&status=done&style=none&taskId=u54c153d8-4013-487f-9c1e-d7eb9029e40&title=&width=631" alt="image.png"><br><a name="Sb3Ry"></a></p><h3 id="临时查看之前版本代码"><a href="#临时查看之前版本代码" class="headerlink" title="临时查看之前版本代码"></a>临时查看之前版本代码</h3><p>在<code>git history</code>插件中，点击对应提交记录的more，然后渲染checkout<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986707920-8b93a58f-9a64-4f94-a462-558dd8bbabbc.png#averageHue=%2320445a&clientId=ub2fa58c0-4ac3-4&from=paste&height=186&id=ud6721c66&name=image.png&originHeight=186&originWidth=634&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18410&status=done&style=none&taskId=u4f11244c-2583-4257-b6e9-7823f72b93d&title=&width=634" alt="image.png"><br />选择后，左下角的<code>分支</code>就会变成对应的<code>hash值</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986748226-776fbbce-199b-4b0e-86cd-b3049b3b5669.png#averageHue=%2321323e&clientId=ub2fa58c0-4ac3-4&from=paste&height=176&id=uf4d83e7f&name=image.png&originHeight=176&originWidth=364&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7821&status=done&style=none&taskId=ufb1adb5f-a083-4081-8e8d-a69c5529585&title=&width=364" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986760537-25533964-31eb-4036-a91c-7e6e92f3042d.png#averageHue=%231478b9&clientId=ub2fa58c0-4ac3-4&from=paste&height=92&id=ue186061c&name=image.png&originHeight=92&originWidth=224&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6876&status=done&style=none&taskId=u5168bdc6-7558-4c5e-a475-46caf132d01&title=&width=224" alt="image.png"><br />如果想切回到主代码，点击左下角的分支名，选择master即可。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663986798526-a7180958-2541-49ed-980f-adee3f531623.png#averageHue=%2399beba&clientId=ub2fa58c0-4ac3-4&from=paste&height=148&id=ucd5d0b4d&name=image.png&originHeight=148&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8897&status=done&style=none&taskId=u06db2b1b-24e3-4878-a34e-39e59821840&title=&width=616" alt="image.png"><br><a name="bI3WM"></a></p><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p>Git中可以有很多分支，数量不限。分支的目的是进行隔离开发，让同一个项目的开发者之间互不影响，最终我们会把分支上的代码合并到某一个分支上。<br />master分支是主分支（默认分支）git初始化后自带的分支（因为master有一个对黑人不好的含义，所以Github就把主分支命名为main分支了）<br />一般开发分为以下几类分支</p><ul><li>master 主分支 所有人都不会直接在这上面修改代码。</li><li>develop 开发分支 开发时共同维护的分支，代码有bug，所有人也都不会直接在这上面修改代码</li><li>feature-功能 功能分支 如果你负责某个功能，你就在这个项目上的develop分支上创建出自己的功能分支进行开发。开发完成后合并到develop上</li><li>release-版本分支 从合并后的develop上进行创建的分支，由测试人员测试，开发人员解决问题，解决的同时，要将代码合并到develop上。最终可见bug修复完成后，能够进入到发布流程。合并到master</li><li>hotfix-版本  从master上检出新的分支 hotfix-版本 修复bug后合并到master和develop上。</li></ul><p><a name="CA51K"></a></p><h3 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h3><p><a name="ZV7n6"></a></p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>master在初始化时自动生成。<br />创建分支使用<code>git branch</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch 分支名<br></code></pre></td></tr></table></figure><p><a name="r1k3B"></a></p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>检出分支（checkout）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout 分支名<br></code></pre></td></tr></table></figure><p>如何检出的同时创建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b 分支名<br></code></pre></td></tr></table></figure><p><a name="IJOaL"></a></p><h3 id="VSCode可视化"><a href="#VSCode可视化" class="headerlink" title="VSCode可视化"></a>VSCode可视化</h3><p>点击VSCode左下角的master<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664001816164-032d9b82-2a1e-49c8-8e3f-e90a1d6205be.png#averageHue=%231e3b4f&clientId=u6e20e23e-5a1c-4&from=paste&height=101&id=uf81a0a1e&name=image.png&originHeight=101&originWidth=289&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6297&status=done&style=none&taskId=u067c8e3e-38f7-4815-942d-93f7f907f57&title=&width=289" alt="image.png"><br />在打开的窗口中选中第一个，按回车<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664001854012-53dbda8d-cbc8-46e6-826c-5d3ace030d6d.png#averageHue=%23193a50&clientId=u6e20e23e-5a1c-4&from=paste&height=132&id=u6f62dd66&name=image.png&originHeight=132&originWidth=606&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8807&status=done&style=none&taskId=ud1d104bd-2bc1-4c2b-88d2-91880c9d6fd&title=&width=606" alt="image.png"><br />然后输入分支名<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664001878557-f86e6c90-d14d-4a5c-bd3b-0dde46344280.png#averageHue=%2333373a&clientId=u6e20e23e-5a1c-4&from=paste&height=64&id=ub62d5f61&name=image.png&originHeight=64&originWidth=615&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6447&status=done&style=none&taskId=u1d75c744-407c-4275-9ced-fa6ca453f56&title=&width=615" alt="image.png"><br />按回车后，自动检出新分支<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664001900224-9b277819-a1cf-40d6-887f-5a1eeda2857a.png#averageHue=%231280c7&clientId=u6e20e23e-5a1c-4&from=paste&height=44&id=ufdbc39be&name=image.png&originHeight=44&originWidth=169&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3815&status=done&style=none&taskId=u89a05f59-e997-47e3-9212-c447711eafb&title=&width=169" alt="image.png"><br />想要看到所有的分支记录，需要在git history的面版中的第二个下拉框选择 <code>All branches</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664002054625-695f5f67-c30d-4c2d-98ce-4fcf5f3a3cb3.png#averageHue=%232c2b2a&clientId=u6e20e23e-5a1c-4&from=paste&height=75&id=u082f9a6b&name=image.png&originHeight=75&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6485&status=done&style=none&taskId=u575910fb-f1fd-4da8-a3a7-53a397ab7ec&title=&width=656" alt="image.png"><br><a name="ET7vn"></a></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>远程仓库解决了代码同步的问题，如果我电脑上的仓库删除，那么我的仓库就彻底没了。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664004914038-16d00576-afc4-42c2-8dce-79dfd45e43ea.png#averageHue=%23f9f9f8&clientId=u6e20e23e-5a1c-4&from=paste&height=760&id=uf6981127&name=image.png&originHeight=760&originWidth=1481&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37753&status=done&style=none&taskId=u5ad11b96-df08-434e-ab1f-57ecdcb82f0&title=&width=1481" alt="image.png">所以在本地的基础上就有了远程的概念，大家所有人的代码，都放在云端。<br />远程仓库有很多很多类：</p><ul><li>国内 Gitee</li><li>国外 Github</li><li>国外 GitLab</li><li>国内 Coding</li><li>还有很多很多……</li></ul><p>不管用什么，我们一定需要有一个远程仓库地址。<br><a name="Bno15"></a></p><h3 id="使用远程仓库"><a href="#使用远程仓库" class="headerlink" title="使用远程仓库"></a>使用远程仓库</h3><ol><li>我们已经在本地仓库中开发了了一段时间了，我们现在想把代码上传到云端</li><li>我们还没有项目，现在云端创建一个项目，在本地方法</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005307562-f54b8544-a278-4619-b134-81218080dbe2.png#averageHue=%23f4f1ef&clientId=u6e20e23e-5a1c-4&from=paste&height=185&id=u88f8b6de&name=image.png&originHeight=185&originWidth=509&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19904&status=done&style=none&taskId=uccb79998-5246-4e9d-ba61-452f01c1036&title=&width=509" alt="image.png"><br><a name="VLAZe"></a></p><h4 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h4><p>在Gitee上新建仓库<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005202062-7953f919-82db-4b1a-9544-a4bcd688738d.png#averageHue=%23f7fcfc&clientId=u6e20e23e-5a1c-4&from=paste&height=286&id=ud0bb087b&name=image.png&originHeight=286&originWidth=406&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23363&status=done&style=none&taskId=uc61799d3-559d-4413-851d-26a6b3dc29b&title=&width=406" alt="image.png"><br />点击后，填入相关信息<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005337981-ad7c2170-b80c-49f6-998e-d550768677c2.png#averageHue=%23fdfcfc&clientId=u6e20e23e-5a1c-4&from=paste&height=693&id=ubb2f1284&name=image.png&originHeight=693&originWidth=875&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48586&status=done&style=none&taskId=ub63e3ec1-a186-48d7-82bf-2b7318e1dff&title=&width=875" alt="image.png"><br />点击创建<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005357864-9a62953f-ffa5-4a5d-9f05-88532c4e5e30.png#averageHue=%23b3b2b2&clientId=u6e20e23e-5a1c-4&from=paste&height=826&id=u8d8e9c79&name=image.png&originHeight=826&originWidth=1214&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66256&status=done&style=none&taskId=u44075962-9774-4b3f-9f54-e34c286e2d4&title=&width=1214" alt="image.png"><br />在已经开发了一些的项目中，运行命令。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005539779-86065a07-8f33-4852-a0e1-07081d8906d6.png#averageHue=%231a1a1a&clientId=u6e20e23e-5a1c-4&from=paste&height=370&id=u13aa5b4b&name=image.png&originHeight=370&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14452&status=done&style=none&taskId=ue4955df1-fd9a-4ffe-81a1-dc8ddb78026&title=&width=581" alt="image.png"><br><a name="cKa3Z"></a></p><h5 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005571501-1b47399d-e330-45b0-b5be-9c8a279df96a.png#averageHue=%23675a50&clientId=u6e20e23e-5a1c-4&from=paste&height=202&id=ud5d1aba8&name=image.png&originHeight=202&originWidth=499&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10328&status=done&style=none&taskId=u670e5ca2-3738-4ddb-bd3d-ac141c93bdf&title=&width=499" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin 你的远程仓库的地址<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005600980-e0772afb-9b9f-4943-836f-16253262988e.png#averageHue=%23f6f5f5&clientId=u6e20e23e-5a1c-4&from=paste&height=46&id=u47eb5477&name=image.png&originHeight=46&originWidth=465&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3761&status=done&style=none&taskId=uc4239666-6aad-4999-8343-a69d7132ce0&title=&width=465" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005717160-8e900207-f4b2-4e1e-bc82-c97e5bafe4b2.png#averageHue=%231c1b1b&clientId=u6e20e23e-5a1c-4&from=paste&height=370&id=ua0cc3902&name=image.png&originHeight=370&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20825&status=done&style=none&taskId=u05690946-e2d0-471e-8534-3de71bdf7af&title=&width=581" alt="image.png"><br />输入 <code>git push -u origin &quot;master&quot;</code>然后回车（这个master是分支名，如果我想上传其他分支，就切换到其他分支，然后写其他分支的名字）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005794620-7e328822-a84a-4024-b451-c77dfd9e9af8.png#averageHue=%23dfdfdf&clientId=u6e20e23e-5a1c-4&from=paste&height=281&id=ua5893451&name=image.png&originHeight=281&originWidth=456&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9259&status=done&style=none&taskId=u4e6427f3-4e76-4ca4-8b10-b0daa5ed1c4&title=&width=456" alt="image.png"><br />输入用户名（邮箱）和密码。（就是我们注册Gitee的邮箱和密码）<br />注意！！！！这里的用户名密码，这辈子只需要输入一次。他们会被保存到电脑“凭据管理器”<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664006063654-ec3e01f3-12d5-4037-ab18-ac3cdb57bf26.png#averageHue=%23fbfaf9&clientId=u6e20e23e-5a1c-4&from=paste&height=539&id=u20e7f646&name=image.png&originHeight=539&originWidth=589&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42458&status=done&style=none&taskId=u3dbee6e0-a919-4558-80bd-bf8e36afef3&title=&width=589" alt="image.png"><br />如果别人已经在你的电脑保存过他的密码，可以把其中的gitee的账号密码删除<br />确定后看到命令行中出现下列界面表示成功<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005898058-9e1b4255-f772-4800-b609-16bd89ca32eb.png#averageHue=%23221f1d&clientId=u6e20e23e-5a1c-4&from=paste&height=370&id=uf98dd7f3&name=image.png&originHeight=370&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37220&status=done&style=none&taskId=ued6c502f-ffdf-44b6-adec-2e84fa54337&title=&width=581" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005932466-becf976c-b201-47e3-95f0-15e13eed5904.png#averageHue=%231f7dbb&clientId=u6e20e23e-5a1c-4&from=paste&height=25&id=u46f07ad2&name=image.png&originHeight=25&originWidth=104&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1817&status=done&style=none&taskId=u4fe8057a-fa85-4a97-9be7-ca77f32dde8&title=&width=104" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005939773-d55672f6-7a53-40f8-88e3-16c19c8a1530.png#averageHue=%230e6ba8&clientId=u6e20e23e-5a1c-4&from=paste&height=39&id=ubdd592b9&name=image.png&originHeight=39&originWidth=108&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1887&status=done&style=none&taskId=u2d3419c7-52da-4d75-a322-125ee42bc12&title=&width=108" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664005952463-dd2e2039-9ef9-43eb-ab43-6abafdf011b8.png#averageHue=%230a466e&clientId=u6e20e23e-5a1c-4&from=paste&height=180&id=u2fc7876e&name=image.png&originHeight=180&originWidth=613&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14420&status=done&style=none&taskId=u5790799a-e9c8-4ec7-8b1b-bd313fe6a71&title=&width=613" alt="image.png"><br><a name="VNhwg"></a></p><h5 id="VSCode操作更简单"><a href="#VSCode操作更简单" class="headerlink" title="VSCode操作更简单"></a>VSCode操作更简单</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664006179933-960b4ca3-6c3f-4f4d-8106-b5179b1b7805.png#averageHue=%236f7b78&clientId=u6e20e23e-5a1c-4&from=paste&height=517&id=u4fb326d7&name=image.png&originHeight=517&originWidth=635&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45745&status=done&style=none&taskId=ue50d2cae-7c49-442f-8ac8-df728dbe04e&title=&width=635" alt="image.png"><br />然后把远程仓库的地址粘进去回车即可。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664006258223-7a50ee98-2bc0-4e78-a0e1-3d7a6cda45b2.png#averageHue=%23177abb&clientId=u6e20e23e-5a1c-4&from=paste&height=409&id=u57002b48&name=image.png&originHeight=409&originWidth=302&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13243&status=done&style=none&taskId=uc0efccb0-73bf-412b-9d1e-b0802df2ba4&title=&width=302" alt="image.png"><br />然后发布分支。<br />然后在远程就可以看到我们的发布的远程分支了<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664006324302-74b07aee-0214-4e99-bb76-b7c45db8632f.png#averageHue=%23fefdfc&clientId=u6e20e23e-5a1c-4&from=paste&height=137&id=u3299e225&name=image.png&originHeight=137&originWidth=1193&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20772&status=done&style=none&taskId=u7966464b-4c5f-4296-b951-85aee3f886d&title=&width=1193" alt="image.png"><br><a name="nFYJs"></a></p><h4 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h4><p>创建项目后，获得到远程仓库的地址。使用克隆命令，克隆到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> 远程地址<br></code></pre></td></tr></table></figure><p>进行提交操作后<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664006683481-d07b88ab-9aa5-4b38-9485-668f3e7de877.png#averageHue=%230a81cf&clientId=u6e20e23e-5a1c-4&from=paste&height=39&id=uf762cdf4&name=image.png&originHeight=39&originWidth=139&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1978&status=done&style=none&taskId=uf841a820-262f-42c3-990f-4d8bc46e943&title=&width=139" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664006699982-3c885bed-2b68-4d14-9491-969db42c6d99.png#averageHue=%231b6aa0&clientId=u6e20e23e-5a1c-4&from=paste&height=291&id=u55f04965&name=image.png&originHeight=291&originWidth=306&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12169&status=done&style=none&taskId=u69c69a24-47b8-4165-8ca4-b777f51c438&title=&width=306" alt="image.png"><br />点击这两个圈的任意一个，就可以把本地仓库最新提交的内容上传到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 上传远程仓库也可以用命令的方法</span><br>git push<br></code></pre></td></tr></table></figure><p><a name="fbju1"></a></p><h3 id="远程版本高于本地"><a href="#远程版本高于本地" class="headerlink" title="远程版本高于本地"></a>远程版本高于本地</h3><p>本地需要拉取远程版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br></code></pre></td></tr></table></figure><p><a name="rCV0F"></a></p><h2 id="个人项目我们应该怎么Git维护"><a href="#个人项目我们应该怎么Git维护" class="headerlink" title="个人项目我们应该怎么Git维护"></a>个人项目我们应该怎么Git维护</h2><ol><li>在远程创建一个项目</li><li>克隆到本地</li><li>进行开发<ol><li>完成一个功能 提交 （尽量多次提交）</li><li>功能完成后 push到远程</li></ol></li><li>我们在多个地方进行开发<ol><li>不管在哪开发，我们都要离开前push</li><li>换一个新的环境，如果没有项目则克隆，如果有项目，但是不是最新，要git pull</li></ol></li></ol><p><a name="pIY5T"></a></p><h3 id="必须要会的操作"><a href="#必须要会的操作" class="headerlink" title="必须要会的操作"></a>必须要会的操作</h3><p>克隆、暂存、提交、推送、拉取<br><a name="TXvMx"></a></p><h2 id="远程仓库和本地仓库的关系"><a href="#远程仓库和本地仓库的关系" class="headerlink" title="远程仓库和本地仓库的关系"></a>远程仓库和本地仓库的关系</h2><p>如果想要把一个远程仓库下载到本地，我们需要使用<code>克隆</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> 远程仓库地址<br></code></pre></td></tr></table></figure><p>本地已经有仓库，只是比远程仓库中少一部份内容，要进行同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br></code></pre></td></tr></table></figure><p>本地仓库比远程的仓库内容多，要进行同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></figure><p>当我们完成某个小功能时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add . <span class="hljs-comment"># 暂存</span><br>git commit -m <span class="hljs-string">&quot;提交信息&quot;</span> <span class="hljs-comment"># 提交到本地仓库</span><br><br>git push <span class="hljs-comment"># 提交到远程仓库</span><br></code></pre></td></tr></table></figure><p><a name="xN3lI"></a></p><h2 id="使用Git到公司后我们应该干嘛"><a href="#使用Git到公司后我们应该干嘛" class="headerlink" title="使用Git到公司后我们应该干嘛"></a>使用Git到公司后我们应该干嘛</h2><p>到公司后先要项目源码</p><ul><li>公司的git仓库是自己搭建的</li><li>公司的git仓库借助了目前主流的 Gitee Github Coding<br><a name="CpsyO"></a></li></ul><h3 id="自己搭建的"><a href="#自己搭建的" class="headerlink" title="自己搭建的"></a>自己搭建的</h3><p>要自己的账号，让管理员把你拉到对应的项目中<br><a name="ahmeK"></a></p><h3 id="借助了其他的仓库"><a href="#借助了其他的仓库" class="headerlink" title="借助了其他的仓库"></a>借助了其他的仓库</h3><p>先看自己有没有账号，如果有则告知管理员，把你加入到项目中。如果没有账号，则自己注册账号，然后发给管理员，让他把你加入到项目中。<br><a name="t0NHb"></a></p><h2 id="公司项目"><a href="#公司项目" class="headerlink" title="公司项目"></a>公司项目</h2><p><a name="q61QP"></a></p><h3 id="如果你是项目负责人"><a href="#如果你是项目负责人" class="headerlink" title="如果你是项目负责人"></a>如果你是项目负责人</h3><ul><li>在远程仓库中新建项目</li><li>把开发者邀请到项目中</li><li>下载项目并创建对应的分支</li><li>制定规范<br><a name="oPGzN"></a></li></ul><h4 id="创建合适的分支"><a href="#创建合适的分支" class="headerlink" title="创建合适的分支"></a>创建合适的分支</h4><p>一个项目默认有master，应该再创建develop分支，作为开发时合并的分支。<br />要求团队中开发者根据自己功能创建自己的功能分支。<br><a name="b6zJr"></a></p><h3 id="如果我是项目开发者"><a href="#如果我是项目开发者" class="headerlink" title="如果我是项目开发者"></a>如果我是项目开发者</h3><ol><li>先从develop分支创建自己的功能分支</li><li>然后写自己的功能<ol><li>提交</li><li>推送</li><li>循环a b 直到功能结束</li></ol></li><li>切换到develop分支上，然后合并我们的分支<br><a name="C2RG5"></a></li></ol><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>先同步一下代码（哪怕没有新的更新）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664158180458-1a960a0d-30c8-40ab-8142-68ef2fa9eded.png#averageHue=%23242a2f&clientId=u0d4fdf08-c778-4&from=paste&height=275&id=ue9c9a373&name=image.png&originHeight=275&originWidth=603&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27402&status=done&style=none&taskId=u3b462a66-0f91-4bd2-9859-e6ca1ffc54c&title=&width=603" alt="image.png"><br />切换到develop分支上，然后点击<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664158217766-b41162b2-0d1b-4bad-9f75-fb68e8aa33a3.png#averageHue=%231d4661&clientId=u0d4fdf08-c778-4&from=paste&height=535&id=u8c87f52d&name=image.png&originHeight=535&originWidth=688&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61335&status=done&style=none&taskId=u644cb847-8e8d-4346-8e6a-734a683eb4d&title=&width=688" alt="image.png"><br />在打开的窗口中，点我们的功能分支。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664158250134-9b2d04cf-0339-47dd-b854-ab12cc0b525f.png#averageHue=%23232a31&clientId=u0d4fdf08-c778-4&from=paste&height=224&id=u50eb7fa8&name=image.png&originHeight=224&originWidth=605&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16336&status=done&style=none&taskId=u78c8e1a3-cd0d-436c-b1af-a868c877396&title=&width=605" alt="image.png"><br />如果没有冲突，就直接推送即可<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664158272847-39bc9548-a177-47fb-8ac6-67e53293f437.png#averageHue=%231b6a9f&clientId=u0d4fdf08-c778-4&from=paste&height=304&id=ub1fde6e9&name=image.png&originHeight=304&originWidth=317&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11637&status=done&style=none&taskId=u78905591-078b-415e-9bd3-e12b4ffe128&title=&width=317" alt="image.png"><br><a name="sCTXS"></a></p><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>当多个人同时修改同一个文件时，未来提交会冲突。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664158897442-f01faec8-9e67-4bd8-97a2-d3f1b6374744.png#averageHue=%23293338&clientId=u0d4fdf08-c778-4&from=paste&height=84&id=uc47cba5b&name=image.png&originHeight=84&originWidth=453&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6252&status=done&style=none&taskId=u08721e5c-1938-47e9-976a-d2460a3c6e8&title=&width=453" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664158908857-54913f8e-fdea-4c27-8f2e-0f7075ada88b.png#averageHue=%2326292b&clientId=u0d4fdf08-c778-4&from=paste&height=101&id=u7ea1888d&name=image.png&originHeight=101&originWidth=415&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5165&status=done&style=none&taskId=ua8865ba5-2fe3-4946-af82-60580f99143&title=&width=415" alt="image.png"><br />冲突文件后会有一个叹号。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664158930685-473d39e3-b13e-46eb-8651-9cbf0f9ec0ec.png#averageHue=%23b3a681&clientId=u0d4fdf08-c778-4&from=paste&height=247&id=ue3ae070b&name=image.png&originHeight=247&originWidth=1090&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29453&status=done&style=none&taskId=uc3198571-73a8-4023-83ff-11c34ede68e&title=&width=1090" alt="image.png"><br />点击后，找到上面类似的相关的结构<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664159137559-e0ed8e0f-5b2e-4e3b-9b93-f404ff463f17.png#averageHue=%23ab956e&clientId=u0d4fdf08-c778-4&from=paste&height=317&id=u31988f07&name=image.png&originHeight=317&originWidth=825&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35210&status=done&style=none&taskId=u4915b7b7-f0f9-4b29-9ff3-5185e67ec51&title=&width=825" alt="image.png"><br />问：如果你们合并时代码冲突了怎么办？<br />答：我们借助开发工具VSCode中的功能，如果合并有冲突，在对应的代码上VSCode会提供三个选项，保留当前代码，保留传入代码，都保留，我们开发者之间沟通，了解需要保留的代码然后选择合适的选项，最后进行提交推送集合。<br><a name="VqeRe"></a></p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>.gitignore文件，可以实现对仓库中某些文件的忽略<br />在项目中新建一个.gitignore文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 忽略文件</span><br>文件名<br><span class="hljs-comment"># 忽略文件夹</span><br>文件夹名/<br><span class="hljs-comment"># 忽略文件夹中的文件</span><br>文件名/文件名<br></code></pre></td></tr></table></figure><p><a name="SfwiM"></a></p><h2 id="学习命令"><a href="#学习命令" class="headerlink" title="学习命令"></a>学习命令</h2><p><a name="wVP8Q"></a></p><h3 id="合并merge和变基rebase的区别"><a href="#合并merge和变基rebase的区别" class="headerlink" title="合并merge和变基rebase的区别"></a>合并merge和变基rebase的区别</h3><p>两者都能实现把代码合并的功能，前者合并后提交记录在不同的分支上，后者在一条分支上，看起来更简洁。<br />变基操作更复杂<br><a name="QwFJM"></a></p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>合并需要切换到版本低的分支上，然后<code>git merge 版本高的分支</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664164859118-74b9179a-6d0b-4edb-b495-e46611fd2ad4.png#averageHue=%235cbcfb&clientId=u0d4fdf08-c778-4&from=paste&height=422&id=u45c61d58&name=image.png&originHeight=422&originWidth=603&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30403&status=done&style=none&taskId=u8202f756-3a35-453f-be31-7137f1ebc19&title=&width=603" alt="image.png"><br><a name="Z58vR"></a></p><h4 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h4><p>切换到develop分支，然后变基到自己的分支上，然后其他一样的操作，就能让develop分支保持最新，包含所有人的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase 分支名<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664164882222-521dfc53-2e9f-4dc6-9c1c-c5f9f547f58b.png#averageHue=%235cbbfb&clientId=u0d4fdf08-c778-4&from=paste&height=931&id=u43ca120f&name=image.png&originHeight=931&originWidth=592&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35290&status=done&style=none&taskId=u130f80e8-2ff3-433a-920c-34445c3c7ed&title=&width=592" alt="image.png"><br><a name="WtDsS"></a></p><h2 id="Git中不同角色的分工"><a href="#Git中不同角色的分工" class="headerlink" title="Git中不同角色的分工"></a>Git中不同角色的分工</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664179856626-090519af-74f5-47e1-8d7e-5505612ad7d2.png#averageHue=%23ededed&clientId=u0d4fdf08-c778-4&from=paste&id=ua05fd7b6&name=image.png&originHeight=1616&originWidth=1200&originalType=url&ratio=1&rotation=0&showTitle=false&size=674229&status=done&style=none&taskId=u7a91e140-8d8e-4b43-8369-feaf97dca4a&title=" alt="image.png"><br><a name="FofZI"></a></p><h3 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h3><ol><li>创建项目</li><li>克隆项目</li><li>创建合适的分支</li><li>变身成为开发者<br><a name="bi6Um"></a></li></ol><h3 id="开发者（这个就是我们的工作，其他的不管）"><a href="#开发者（这个就是我们的工作，其他的不管）" class="headerlink" title="开发者（这个就是我们的工作，其他的不管）"></a>开发者（这个就是我们的工作，其他的不管）</h3><ol><li>克隆项目（如果电脑上没有项目时做的事情）</li><li>切换到开发分支</li><li>创建一个分支（功能分支）feature-xxx</li><li>开发<ol><li>暂存</li><li>提交</li><li>推送</li><li>循环上面三步直到功能完成</li></ol></li><li>切换到develop，然后拉取最新的develop分支</li><li>和我们的自己的feature分支进行合并。<br><a name="G1dPY"></a></li></ol><h3 id="版本发布者"><a href="#版本发布者" class="headerlink" title="版本发布者"></a>版本发布者</h3><ol><li>从最新develop上创建一条新的分支 release-v版本号。</li><li>测试进行测试，测试出来的问题由对应的人员进行修复</li><li>把修复后的代码，合并到develop上。直到所有的可见bug修复完成</li><li>合并到master上</li><li>打上一个标签<br><a name="Fp2Re"></a></li></ol><h3 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h3><ol><li>从master上创建一条新分支hotfix-v版本号</li><li>修复bug</li><li>将代码合并到master和develop</li><li>打上标签</li></ol><p><a href="https://mp.weixin.qq.com/s/tat5fQLFl7D7dQ9GTs8LEQ">https://mp.weixin.qq.com/s/tat5fQLFl7D7dQ9GTs8LEQ</a><br><a name="S9MVE"></a></p><h2 id="SSH地址的使用"><a href="#SSH地址的使用" class="headerlink" title="SSH地址的使用"></a>SSH地址的使用</h2><p>如何生成ssh公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -C <span class="hljs-string">&quot;邮箱地址&quot;</span>  <br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664180689527-ad189a61-c520-423f-bc00-585c367294d4.png#averageHue=%231a1817&clientId=u0d4fdf08-c778-4&from=paste&height=496&id=u0a449341&name=image.png&originHeight=496&originWidth=574&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26801&status=done&style=none&taskId=u85b6b441-3f99-4119-ab00-73323cb719a&title=&width=574" alt="image.png"><br />生成的地址在<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664180715916-cc6cf06d-7e7d-4869-8921-c775516b70b1.png#averageHue=%23050302&clientId=u0d4fdf08-c778-4&from=paste&height=381&id=udea35cf9&name=image.png&originHeight=381&originWidth=541&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22816&status=done&style=none&taskId=uff9ca460-25e4-4fdd-b817-8cc3a741fb4&title=&width=541" alt="image.png"><br />生成公钥后，把公钥加入到对应的ssh列表中。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664180794407-12d04219-cc67-4321-ba40-192fc86bd415.png#averageHue=%23f2e3ca&clientId=u0d4fdf08-c778-4&from=paste&height=854&id=ua9d3d2cf&name=image.png&originHeight=854&originWidth=1309&originalType=binary&ratio=1&rotation=0&showTitle=false&size=109196&status=done&style=none&taskId=uac983b20-9ad6-4060-9fbb-443bf6b8263&title=&width=1309" alt="image.png"><br />把上面生成的公钥用VSCode打开，复制粘贴即可<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664180851975-63f55f6e-0f66-4695-b583-ae5a0d5148a7.png#averageHue=%23fcfaf8&clientId=u0d4fdf08-c778-4&from=paste&height=364&id=ua3969d07&name=image.png&originHeight=364&originWidth=954&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41305&status=done&style=none&taskId=u0bb546f9-4fd2-4bca-982e-5d8189afcc5&title=&width=954" alt="image.png"><br />点击确定添加。</p><p>首次进行Git克隆时，会进行询问<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1664180914073-3a1d2b62-21f4-4d9d-b26c-ac1f378220fc.png#averageHue=%231d1c1b&clientId=u0d4fdf08-c778-4&from=paste&height=370&id=u1173eaef&name=image.png&originHeight=370&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18503&status=done&style=none&taskId=ubbe9ccca-5f49-44c3-bdbf-85f8793f37f&title=&width=581" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>地图</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/51-%E5%9C%B0%E5%9B%BE/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/51-%E5%9C%B0%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>地图示例 <br />在网页上地理信息都要涉及到地图API。现在主流的API<br />我们以高德地图为例讲解<br><a name="w4udG"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a name="PfsbR"></a></p><h3 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h3><p>略<br><a name="fwetx"></a></p><h3 id="注册成功开发者"><a href="#注册成功开发者" class="headerlink" title="注册成功开发者"></a>注册成功开发者</h3><p>略<br><a name="EH05d"></a></p><h3 id="进入控制台，创建应用"><a href="#进入控制台，创建应用" class="headerlink" title="进入控制台，创建应用"></a>进入控制台，创建应用</h3><p><a href="https://console.amap.com/dev/key/app">https://console.amap.com/dev/key/app</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663826866022-3dd29ed2-8006-4bc5-ac0a-b95580a5485c.png#clientId=u7682dbf9-b166-4&from=paste&height=91&id=uf5f320bd&name=image.png&originHeight=91&originWidth=247&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3173&status=done&style=none&taskId=u61995c66-5c32-4b32-a2d9-37cc7c980ad&title=&width=247" alt="image.png"><br />右上角点击创建新应用，然后根据你的信息输入<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663826900230-4b6250c2-1b35-4374-9882-fc2fb238b74e.png#clientId=u7682dbf9-b166-4&from=paste&height=279&id=uf9230d0d&name=image.png&originHeight=279&originWidth=594&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13770&status=done&style=none&taskId=ue3e7298c-343b-495d-82b3-ed5451af76c&title=&width=594" alt="image.png"><br />创建应用后，点击右上角的添加<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663826967335-74f54766-8a6a-4378-b0ed-1ae31a60df64.png#clientId=u7682dbf9-b166-4&from=paste&height=562&id=u9b3abd48&name=image.png&originHeight=562&originWidth=732&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42195&status=done&style=none&taskId=u181fa6c7-cef8-49a9-be1e-ccf33ebb125&title=&width=732" alt="image.png"><br />选<code>web端 JS API</code>起个名字，同意之后点击提交即可。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663826992311-c1014d5e-ed6e-4802-bbb9-fcc89855fb83.png#clientId=u7682dbf9-b166-4&from=paste&height=160&id=ua166d366&name=image.png&originHeight=160&originWidth=1659&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34654&status=done&style=none&taskId=ud6cb0337-0060-4fa2-a511-2a18ec66bff&title=&width=1659" alt="image.png"><br /><a href="https://lbs.amap.com/api/javascript-api/guide/abc/prepare">https://lbs.amap.com/api/javascript-api/guide/abc/prepare</a><br />剩下的工作可以看文档<br><a name="xyL2W"></a></p><h3 id="创建网页"><a href="#创建网页" class="headerlink" title="创建网页"></a>创建网页</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"><span class="hljs-comment">/*  设置地图容器大小  */</span></span><br><span class="language-css">    <span class="hljs-selector-id">#container</span> &#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">100vw</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; &#125;  </span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--  地图容器  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 这一段代码是必须的，开发时这么搞</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">_AMapSecurityConfig</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">securityJsCode</span>:<span class="hljs-string">&#x27;dec00345aebdb98f0471344d97a79a5d&#x27;</span>, <span class="hljs-comment">// 这里改成上面申请的jsCode</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://webapi.amap.com/maps?v=1.4.15&amp;key=d39bccb5d5b956ce9a0540c6b37a12bb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  // script标签中，把key参数修改上面申请的key<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Map</span>(<span class="hljs-string">&#x27;container&#x27;</span>, &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">zoom</span>: <span class="hljs-number">11</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BOM</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/50-BOM/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/50-BOM/</url>
    
    <content type="html"><![CDATA[<p>全称为浏览器对象模型（BOM）。是用来获取浏览器相关信息的对象，并且可以操纵浏览器<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663810975005-118ea0a8-dd8b-46fe-a06d-f2707c74d50b.png#clientId=ucbfd4353-4ad7-4&from=paste&id=ud0ac62b3&name=image.png&originHeight=295&originWidth=496&originalType=url&ratio=1&rotation=0&showTitle=false&size=43520&status=done&style=none&taskId=u9e1d47bc-22f0-4311-97e9-d8986592571&title=" alt="image.png"><br><a name="TJTeF"></a></p><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>window对象是js中最大的对象，所有的对象都在这个对象中存在。在ES6之前，我们创建的变量会变成window对象的属性，创建的函数，会变成window对象的方法。我们在调用window对象的相关属性和方法时，可以不写<code>window.</code><br><a name="qWvy6"></a></p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>location包含了浏览器访问的网址的所有信息。网页url的改变会改变location获取到的信息。<br />一般我们会在url中修改的内容就是search和hash<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663809760840-75c838a0-792b-4b88-9859-f62dc5d0392c.png#clientId=ucbfd4353-4ad7-4&from=paste&height=192&id=udaedbb7e&name=image.png&originHeight=192&originWidth=853&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12442&status=done&style=none&taskId=u4035a639-03df-400f-a8ca-4283b1231d0&title=&width=853" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663809834011-ac19c043-19d8-42e8-be74-f74b8c8ca49e.png#clientId=ucbfd4353-4ad7-4&from=paste&height=143&id=uc4e7f9b6&name=image.png&originHeight=143&originWidth=721&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6974&status=done&style=none&taskId=u75ca21db-3b47-4818-8031-3c45f4a7606&title=&width=721" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663810042060-7ace85e8-31db-4120-82f6-3f5de1997edf.png#clientId=ucbfd4353-4ad7-4&from=paste&height=145&id=uc34d1d9f&name=image.png&originHeight=145&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7046&status=done&style=none&taskId=ucd174a1a-bc51-4205-a1c5-8522809b178&title=&width=700" alt="image.png"></p><ul><li>hash 表示url中”#“后跟着的的内容 hash内容不管怎么改变，访问的网页是不变</li><li>host 域名 和 hostname 一致 </li><li>hostname</li><li>href 当前网页的url</li><li>origin 只包含协议和域名</li><li>pathname 路径</li><li>port 端口</li><li>protocol 协议</li><li>search ?后面的参数<br><a name="bNmIa"></a></li></ul><h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3><p>js可以实现页面的跳转操作。js跳转更灵活。在历史记录中新增一条历史记录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;url&quot;</span><br>location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&quot;url&quot;</span>)<br></code></pre></td></tr></table></figure><p><a name="L0umh"></a></p><h3 id="reload"><a href="#reload" class="headerlink" title="reload"></a>reload</h3><p>重新加载（刷新）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.<span class="hljs-title function_">reload</span>()<br><span class="hljs-comment">// 或者</span><br>location.<span class="hljs-property">href</span> = location.<span class="hljs-property">href</span><br></code></pre></td></tr></table></figure><p><a name="lskmj"></a></p><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>跳转页面，替换当前的历史纪录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.<span class="hljs-title function_">replace</span>(url)<br></code></pre></td></tr></table></figure><p><a name="INo91"></a></p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>历史记录，每当一个页面访问，就会在历史记录中新增一条新的历史记录。通过对历史记录的操作，我们可以在历史记录中进行跳转。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663812366852-a58cae29-13e9-4fa1-8f6a-1e71cd62b279.png#clientId=ucbfd4353-4ad7-4&from=paste&height=38&id=u7df165cc&name=image.png&originHeight=38&originWidth=98&originalType=binary&ratio=1&rotation=0&showTitle=false&size=571&status=done&style=none&taskId=u38a761fa-1caa-45e3-8145-c2b18c63dd1&title=&width=98" alt="image.png"><br><a name="Z7X8O"></a></p><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p>history.back() 在历史记录中返回上一页，前提是上一页得有记录<br><a name="jTQ4U"></a></p><h3 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h3><p>history.forward() 在历史记录中前进下一页，前提是下一页得有记录<br><a name="TlhU3"></a></p><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p>history.go() 中写数字，正值表示向下一页跳转，负值是上一页，数字写几，就跳转几页。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663812636840-b0bcb0be-faf7-40cc-9939-7c11bc430541.png#clientId=ucbfd4353-4ad7-4&from=paste&height=257&id=u22468ad8&name=image.png&originHeight=257&originWidth=585&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10121&status=done&style=none&taskId=u1914366d-f939-4d1f-8697-0e841265ad3&title=&width=585" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663812659850-6387777f-b549-4b75-b708-c51e6fcfe401.png#clientId=ucbfd4353-4ad7-4&from=paste&height=269&id=u2b77675c&name=image.png&originHeight=269&originWidth=603&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10148&status=done&style=none&taskId=u0a83b046-077e-40a4-b5a1-5a673743b80&title=&width=603" alt="image.png"><br />如果使用<code>history.go(0)</code>则刷新页面。<br><a name="I511A"></a></p><h3 id="history中新增方法"><a href="#history中新增方法" class="headerlink" title="history中新增方法"></a>history中新增方法</h3><p>在HTML5中对于historyApi中新增了pushState和replaceState，不跳转页面，然后在历史记录中新增一个历史记录<br><a name="iSY3m"></a></p><h4 id="pushState"><a href="#pushState" class="headerlink" title="pushState"></a>pushState</h4><p>在历史记录中新增一个假的历史记录，可以达到改变url，但是页面不跳转的目的。来模拟历史记录的操作<br><a name="WCK5J"></a></p><h4 id="replaceState"><a href="#replaceState" class="headerlink" title="replaceState"></a>replaceState</h4><p>替换掉当前的历史记录，他不会进行实际页面的跳转，只会改变url</p><p>hash和改新增api在未来的框架中会有应用，但不是我们写，是他们实现框架借助这些api来实现一些新的特性。未来了解了什么是单页面应用后，再去学习一个东西，单面应用路由的实现原理。<br><a name="IHFzb"></a></p><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p><a name="XTy2f"></a></p><h3 id="userAgent"><a href="#userAgent" class="headerlink" title="userAgent"></a>userAgent</h3><p>获取浏览器信息<br><a name="jEUB6"></a></p><h3 id="appVersion"><a href="#appVersion" class="headerlink" title="appVersion"></a>appVersion</h3><p>获取浏览器版本<br />判断浏览器版本的操作，如果需要，我们可以找到对应的js代码<br><a name="azWfZ"></a></p><h3 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h3><p>地理定位涉及到隐私，所以需要询问用户是否同意，当我们调用相关方法时自动出现。<br><a name="J2vrX"></a></p><h4 id="navigator-geolocation"><a href="#navigator-geolocation" class="headerlink" title="navigator.geolocation"></a>navigator.geolocation</h4><p>所有的定位操作，都在这里了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(<span class="hljs-function">(<span class="hljs-params">position</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// position就是我们的位置信息</span><br>  <br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;&#125;)<br></code></pre></td></tr></table></figure><p><a name="lpQat"></a></p><h5 id="position中包含哪些信息"><a href="#position中包含哪些信息" class="headerlink" title="position中包含哪些信息"></a>position中包含哪些信息</h5><ul><li>accuracy 精度</li><li>altitude 海拔</li><li>altitudeAccuracy 海拔精度</li><li>heading 方向</li><li>latitude 纬度</li><li>longitude 经度</li><li>speed 速度</li></ul><p>如果我们想要观察位置的变化，可以使用<code>watchPosition</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">watchPosition</span>(<span class="hljs-function">(<span class="hljs-params">position</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// position就是我们的位置信息</span><br>  <br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;&#125;)<br></code></pre></td></tr></table></figure><p>注意注意！！！！正常的地理定位需要功能，我们在项目中是借助现成的地图api来解决的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>存储</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/49-%E5%AD%98%E5%82%A8/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/49-%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<p>在JS中存储在客户端数据有很多方式：本地存储、会话存储、Cookie、indexedDB<br><a name="FLP8V"></a></p><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><p>Storage分为localStorage和sessionStorage，他们有自己的API可以进行添加、修改、删除、清空操作。</p><ul><li>setItem(key, value)</li><li>removeItem(key)</li><li>getItem(key)</li><li>clear()</li></ul><p>这两个存储的方法一致，是一样的效果。<br />这个中间只能存字符串，引用类型存储时会自动调用toString方法，如果想要存储对象或者数组，可以使用JSON.stringify进行转换，转换为字符串。<br />存储空间约5M<br><a name="c0nWL"></a></p><h3 id="本地存储localStorage"><a href="#本地存储localStorage" class="headerlink" title="本地存储localStorage"></a>本地存储localStorage</h3><p>存储数据到本地，只要你不主动删除，并且电脑浏览器不被卸载，这个数据就永远可以被获取到。<br><a name="Y7dcp"></a></p><h3 id="会话存储sessionStorage"><a href="#会话存储sessionStorage" class="headerlink" title="会话存储sessionStorage"></a>会话存储sessionStorage</h3><p>存储数据在本地，只要浏览器关闭，则会话存储就会被清空<br><a name="cju1n"></a></p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie也是一种本地存储方案，是在Storage之前流行的一种方案。<br />cookie的缺点：</p><ul><li>存储小。只有4kb</li><li>自动被携带http请求中，导致请求时间变长。</li><li>必须依赖服务器</li><li>cookie比较早，相关api比较老，不好操作。需要人为封装函数。</li></ul><p>cookie中有两种Cookie，一种是会话Cookie，浏览器关闭就消失，一种是持久化cookie，有自己的过期时间。<br><a name="yVuI2"></a></p><h3 id="Cookie获取"><a href="#Cookie获取" class="headerlink" title="Cookie获取"></a>Cookie获取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span><br></code></pre></td></tr></table></figure><p>该操作获取到的Cookie是一个字符串，获取到字符串后，我们需要进行筛选获取到我们想要的数据。<img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663575595126-deaeda4a-7a1b-4794-ad29-3ab65fbb1c41.png#clientId=u24dddfe4-72f8-4&from=paste&height=26&id=uce41a628&name=image.png&originHeight=26&originWidth=143&originalType=binary&ratio=1&rotation=0&showTitle=false&size=663&status=done&style=none&taskId=uab040d3e-99ed-4010-acab-7ba53157c3b&title=&width=143" alt="image.png"><br><a name="KB2YZ"></a></p><h3 id="Cookie设置"><a href="#Cookie设置" class="headerlink" title="Cookie设置"></a>Cookie设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">docuemnt.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;key=value; expires=时间对象字符串; path=/; domian=localhost&quot;</span><br></code></pre></td></tr></table></figure><p><a name="o8GCr"></a></p><h3 id="Cookie删除"><a href="#Cookie删除" class="headerlink" title="Cookie删除"></a>Cookie删除</h3><p>删除没有专门的操作，设置一个过去的时间就可以把cookie删除了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">docuemnt.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;key=value; expires=过去的一个时间字符串; path=/; domian=localhost&quot;</span><br></code></pre></td></tr></table></figure><p>Cookie的操作需要封装函数，不然操作起来很麻烦。<br><a name="Xixul"></a></p><h2 id="js-cookie"><a href="#js-cookie" class="headerlink" title="js-cookie"></a>js-cookie</h2><p>我们可以借助cookie库<br /><a href="https://www.yuque.com/attachments/yuque/0/2022/js/29344914/1664357904668-33ed5d0a-6b9a-4326-956f-53282e466f3a.js">js.cookie.js</a><br><a name="MwhUN"></a></p><h3 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Cookies</span>.<span class="hljs-title function_">get</span>(key)<br></code></pre></td></tr></table></figure><p><a name="SgFdy"></a></p><h3 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Cookies</span>.<span class="hljs-title function_">remove</span>(key)<br></code></pre></td></tr></table></figure><p><a name="XL0Fo"></a></p><h3 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Cookies</span>.<span class="hljs-title function_">set</span>(key, value, &#123;<br>  <span class="hljs-attr">expires</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 可以是天数，也可以是日期对象</span><br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 路径</span><br>  <span class="hljs-attr">domain</span>: <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 域名</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="I1s6k"></a></p><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><p><a name="NZtXM"></a></p><h3 id="Cookie、localStorage、SessionStorage的区别？"><a href="#Cookie、localStorage、SessionStorage的区别？" class="headerlink" title="Cookie、localStorage、SessionStorage的区别？"></a>Cookie、localStorage、SessionStorage的区别？</h3><p>Cookie需要借助http，而Storage不需要<br />Cookie存储空间小4kb，Storage 空间大5Mb<br /><del>Cookie的操作比较麻烦，Storage有相应的api帮助我们快速操作。</del><br />Cookie可以设置过期时间，Storage不能，localStorage没有过期时间，SessionStorage浏览器关闭就消失。<br />Cookie还可以给不同的path和域名设置cookie，storage不能。<br />localStorage设置后，整个域名共享，SessionStorage只有对应的页面可以使用，其他页面无法使用。<br />他们可以实现的功能大致相同。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/48-ES6/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/48-ES6/</url>
    
    <content type="html"><![CDATA[<p> ECMAScript是欧洲计算机协会提出的规范，我们JS的语法就是用这个语法，Javascript分为三部分ECMAScript + DOM + BOM<br />IE8浏览器支持ES3，IE9之后支持ES5，没有ES4，因为ES4的修改过于激进，所以没有成为标准。2015年ES2015标准提出。从这个标准之后，ES版本都是以年份作为描述，前端界还会以数字称呼，称为ES6。每一年ECMAScript都会新增一些新的api，但是新增的内容都比较少，所以我们统称后续的ECMAScript为ES6+。<br />新出的标准浏览器兼容性不好，有一个插件应运而生<code>Babel</code>，可以帮助我们把ES6代码转换成ES5代码，基本上，这个转换过程是无感的。所以我们在开发时，可以肆无忌惮使用ES6语法，也推荐大家使用ES6语法。<br><a name="lNlOZ"></a></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数是函数的一个新的写法，它能够带来更简便的函数写法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">let fn = () =&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663135930368-da6eae79-0115-4cb9-90da-dad1bb07cfc6.png#averageHue=%23ffffff&clientId=u7c75106e-4c45-4&from=paste&height=117&id=u1df243bd&name=image.png&originHeight=117&originWidth=215&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2184&status=done&style=none&taskId=u8ede120e-fc78-4de7-af52-a24ed45ec87&title=&width=215" alt="image.png"><br />把原本的function删除，然后在()后面添加了<code>=&gt;</code>，所有的箭头函数都是匿名函数。<br><a name="M09PN"></a></p><h3 id="箭头函数可以简化的写法"><a href="#箭头函数可以简化的写法" class="headerlink" title="箭头函数可以简化的写法"></a>箭头函数可以简化的写法</h3><p>我们使用箭头函数函数时会遇到一下简化写法</p><ul><li>只有一个参数</li><li>只有返回值</li><li>只有返回值且返回值是一个对象<br><a name="nxD6s"></a></li></ul><h4 id="只有一个参数"><a href="#只有一个参数" class="headerlink" title="只有一个参数"></a>只有一个参数</h4><p>只有一个参数时，不需要添加 <code>()</code>可以省略<br />正常函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params">参数</span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p>转成箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">参数</span>) =&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p>简化后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = 参数 =&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p><a name="yMs6C"></a></p><h4 id="只有返回值"><a href="#只有返回值" class="headerlink" title="只有返回值"></a>只有返回值</h4><p>正常函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;返回值&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;返回值&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>简化后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-string">&quot;返回值&quot;</span><br></code></pre></td></tr></table></figure><p><a name="FHn14"></a></p><h4 id="返回值如果是对象"><a href="#返回值如果是对象" class="headerlink" title="返回值如果是对象"></a>返回值如果是对象</h4><p>普通函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>简化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; (&#123;<span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>注意！！！！！推荐大家使用箭头函数，但是对象中的方法不要用箭头函数，事件函数不要用箭头函数，因为箭头函数的this指向和普通函数不一样。<br><a name="sLjGx"></a></p><h3 id="箭头函数的this指向问题"><a href="#箭头函数的this指向问题" class="headerlink" title="箭头函数的this指向问题"></a>箭头函数的this指向问题</h3><p>箭头函数中的this指向谁！！！声明箭头函数时，箭头函数所在作用域的this指向。<br />箭头函数的这个特性解决了什么问题呢？？？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;加载中……&quot;</span><br>  <span class="hljs-comment">// let _this = this</span><br>  axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;https://cnodejs.org/api/v1/topics&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-comment">// 使用了箭头函数，我们就不需要再事先获取到this，然后再使用新的变量</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;加载完成&quot;</span><br>    <span class="hljs-comment">// _this.innerText = &quot;加载完成&quot;</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="l5toa"></a></p><h3 id="分析之前的代码"><a href="#分析之前的代码" class="headerlink" title="分析之前的代码"></a>分析之前的代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>())<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><br>arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>  <span class="hljs-keyword">return</span> num + <span class="hljs-number">1</span><br>&#125;)<br><br>arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> num + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-function">() =&gt;</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><a name="AZMmy"></a></p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>承诺，在声明函数时承诺好，如果成功就执行resolve，如果失败就执行reject。定义resolve和reject函数的人，是使用这个Promise对象的人。<br />Promise有三个状态，分别时等待中，成功，失败。<br />注意！！！！三个状态只能成等待中变成成功，或者从等待中变成失败，如果已经成功成功或者失败，就不能再改变状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 异步函数 () &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 模拟几率</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span>) &#123;<br>        <span class="hljs-comment">// 来了</span><br>        <span class="hljs-title function_">resolve</span>()<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">reject</span>()<br>      &#125;<br>    &#125;, <span class="hljs-number">3000</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">异步函数().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// resolve函数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;一起走&quot;</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;自己走&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>为什么有些函数调用之后，可以调用.then方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">get</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)<br></code></pre></td></tr></table></figure><p>因为这些函数在封装时，上来返回了一个<code>new Proimise</code>。promise对象中有三个方法。</p><ul><li>then(() &#x3D;&gt; {}) 异步操作成功时执行的函数</li><li>catch(() &#x3D;&gt; {}) 异步操作失败时执行的函数</li><li>finally(() &#x3D;&gt; {}) 不管成功还是失败都会执行的函数。</li></ul><p>我们今天的目标是，未来看到.then或者.catch时，知道这个函数内部返回了一个promise对象。后一个.then里的参数，是前一个.then return的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// num就是1</span><br>  <br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663140799420-dc007fd1-b3e8-4841-b592-328102b73381.png#averageHue=%23fefefe&clientId=u7c75106e-4c45-4&from=paste&height=152&id=udaefa729&name=image.png&originHeight=152&originWidth=228&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6404&status=done&style=none&taskId=ua0fbc7de-c2b4-45c8-883a-96d41769d21&title=&width=228" alt="image.png"><br />Promise中所有的方法.then.catch.finally调用之后，都会返回这个promise对象。并且会按链式的顺序执行对应的then中的方法<br><a name="slzmo"></a></p><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><p>forEach map filter find findIndex some every reduce reduceRight<br><a name="wjmF6"></a></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>筛选，调用后得到一个数组，这个数组的内部结构和原数组相同，长度大概率不同，会变少。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> 或者 <span class="hljs-literal">false</span> <br>  <span class="hljs-comment">// 如果上面返回true 则item就会被放在新数组中，如果为false，则不执行任何操作。</span><br>  <span class="hljs-comment">// 所谓的新数组，是我们对应的filter的返回值</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="HtKYX"></a></p><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>判断某个数组中是否有符合条件的值。返回值为布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span>) <br></code></pre></td></tr></table></figure><p>只要有一个返回值为true，则停止遍历，返回some的结果为true，如果都返回false，则some结果为false<br><a name="svVKC"></a></p><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>判断某个数组中是否全部符合条件的值。返回值为布尔值<br />与some相反，只要有一个不符合条件，结果为false，如果全部都符合条件，则结果为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-literal">true</span> 或者 <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p><a name="IbATi"></a></p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>用来查找第一个符合条件的值<br />返回值是第一个符合条件的值，只要第一次函数中返回true，则会把正在遍历的item给作为返回值返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-literal">true</span> 或者 <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p><a name="IjFAP"></a></p><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><p>用来查找第一个符合条件的值的下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-literal">true</span> 或者 <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p><a name="CH02P"></a></p><h3 id="reduce-x2F-reduceRight"><a href="#reduce-x2F-reduceRight" class="headerlink" title="reduce&#x2F;reduceRight"></a>reduce&#x2F;reduceRight</h3><p>每次遍历都会保留上一次的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prevValue, curValue, index, arr</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">return</span> 值 <span class="hljs-comment">// 这个值是下一次函数执行的prevValue</span><br>&#125;, 初始值) <span class="hljs-comment">// 初始值是第一次函数执行的prevValue</span><br></code></pre></td></tr></table></figure><p><a name="z0kra"></a></p><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><p>扁平化数组，没有flat函数我们需要自己封装递归函数进行扁平化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">flat</span>(层数)<br></code></pre></td></tr></table></figure><p>如果我们不知道有几层的情况下，可以使用Infinity</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">flat</span>(<span class="hljs-title class_">Infinity</span>)<br></code></pre></td></tr></table></figure><p><a name="dkyno"></a></p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>在数组对应的位置范围填充相同的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">fill</span>(值, 开始下标, 结束下标) <span class="hljs-comment">// 后两个值可选</span><br></code></pre></td></tr></table></figure><p><a name="p5MbB"></a></p><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>判断一个数组中是否包含某个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;值&quot;</span>)<br></code></pre></td></tr></table></figure><p><a name="Em76H"></a></p><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>可以把参数变成数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// [1,2,3]</span><br></code></pre></td></tr></table></figure><p><a name="R3ldT"></a></p><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>直接设置给构造函数上的方法，叫静态方法，不需要new直接使用构造函数调用即可。数组中有三个静态方法</p><ul><li>Array.from</li><li>Array.isArray</li><li>Array.of<br><a name="hzLvw"></a></li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构赋值，可以实现直接从数组或者对象中取值赋值给变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [变量名, 变量名<span class="hljs-number">2</span>, , 变量名<span class="hljs-number">4</span>] = [值, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>, 值<span class="hljs-number">4</span>]<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-keyword">let</span> 变量名 = 数组[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">let</span> 变量名<span class="hljs-number">2</span> = 数组[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">let</span> 变量名<span class="hljs-number">4</span> = 数组[<span class="hljs-number">3</span>]<br><br><br><span class="hljs-keyword">let</span> &#123; 变量名, 变量名<span class="hljs-number">2</span> &#125; = &#123; 属性名: <span class="hljs-string">&quot;值&quot;</span>, 变量名<span class="hljs-number">2</span>(本质是属性名): <span class="hljs-string">&quot;值&quot;</span> &#125; <span class="hljs-comment">// 属性名和变量需要相同</span><br><br><span class="hljs-keyword">let</span> &#123; a, b &#125; = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; <br></code></pre></td></tr></table></figure><p>解构赋值很容易遇到一种情况，我们要使用的名字和已有变量名冲突（重复）了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;张三&quot;</span><br><br><span class="hljs-keyword">let</span> &#123;name, age&#125; = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-comment">// 因为name已经声明了，所以第三行的name就会报错：变量已经声明</span><br><span class="hljs-comment">// 我们可以使用别名解决这个问题</span><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: 别名, age&#125; = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-comment">// 别名就是变量名</span><br></code></pre></td></tr></table></figure><p><a name="TvIWs"></a></p><h3 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h3><p>我们可以把函数的形参进行解构，在函数内部可以直接使用解构后的值，更方便使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (obj) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">x</span>, obj.<span class="hljs-property">y</span>)<br>&#125;<br><br><span class="hljs-title function_">fn</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>&#125;)<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span> (&#123;x, y&#125;) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y)<br>&#125;<br><span class="hljs-title function_">fn</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>&#125;)<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span> ([x, y]) &#123;<br>&#125;<br><br><span class="hljs-title function_">fn3</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p><a name="puRCx"></a></p><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算的作用可以简单理解为：把数组的中括号，和对象的{}直接去掉。直接去除后，里面的数据格式，我是无法在JS的环境的中独立存在。扩展运算符的操作需要被放置在合适的位置上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> _arr = [...arr] <span class="hljs-comment">// [1,2,3] 这是一个浅拷贝过程</span><br><br><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">let</span> _obj = &#123;...obj&#125; <span class="hljs-comment">// &#123;a: 1, b: 2, c: 3&#125; 这是一个浅拷贝过程</span><br><br><span class="hljs-keyword">let</span> arr2 = [...arr, ...arr] <span class="hljs-comment">// [1,2,3,1,2,3]</span><br></code></pre></td></tr></table></figure><p>在我们使用map操作时，可以保留原有数据的基础上，添加新的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>&#125;]<br><br>arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">stu</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    ...stu,<br>    <span class="hljs-attr">classroom</span>: <span class="hljs-string">&quot;王屋山&quot;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="b1LQD"></a></p><h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><p>这个运算符可以用来代替arguments。当遇到不定参数时，可以使用rest。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span> (...nums) &#123;<br>  nums就是一个数组，传参时我们需要传很多个单个的值，这些值会被放在一个数组中，这个数组就是nums<br>&#125;<br><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">// nums就是[1,2,3]</span><br></code></pre></td></tr></table></figure><p>可以把剩余没有声明形参的参数收集变成数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (a, b, c, ...args) &#123;&#125;<br><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>) <span class="hljs-comment">// a 1 b 2 c 3 args是[4,5,6]</span><br></code></pre></td></tr></table></figure><p><a name="S7Maa"></a></p><h2 id="对象中的新写法"><a href="#对象中的新写法" class="headerlink" title="对象中的新写法"></a>对象中的新写法</h2><p><a name="CYLw1"></a></p><h3 id="属性写法"><a href="#属性写法" class="headerlink" title="属性写法"></a>属性写法</h3><p>当属性的名字和变量相同时，我们可以只写一个属性名即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;张三&quot;</span><br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-comment">// name: name</span><br>  name<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Kmrx5"></a></p><h3 id="方法写法"><a href="#方法写法" class="headerlink" title="方法写法"></a>方法写法</h3><p>当我们要设置方法时，可以直接省略 <code>:function</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-comment">// fn: function () &#123;&#125;,</span><br>fn () &#123;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="amFc3"></a></p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><p>异步函数，可以把函数内部的异步操作转换为同步写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> 函数名 () &#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> 原始值或者<span class="hljs-title class_">Promise</span>对象<br>  <span class="hljs-comment">// 下面的代码，会等上面的异步处理结束后才执行。</span><br>&#125;<br><br><br><span class="hljs-keyword">async</span> getData () &#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;接口地址&quot;</span>, &#123;<span class="hljs-attr">params</span>: &#123;参数&#125;&#125;)<br>  <span class="hljs-comment">// 处理res</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因为变成了同步操作，同时代码有可能得到错误信息，如果要处理错误，可以是try catch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> getData () &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;接口地址&quot;</span>, &#123;<span class="hljs-attr">params</span>: &#123;参数&#125;&#125;)<br>  <span class="hljs-comment">// 处理res</span><br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>  <span class="hljs-comment">// 处理错误操作</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重要！！！！async函数，返回值是一个promise对象。所以我们如果要得到函数里的自己的返回值，需要使用.then获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> () &#123;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br>&#125;<br><br><span class="hljs-title function_">fn</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-comment">// res 就是 10</span><br>&#125;)<br><br><span class="hljs-comment">// 或者如果还要用async 就需要再封装一个函数（比较麻烦）</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span> () &#123;<br><span class="hljs-keyword">let</span> num = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 10</span><br>&#125;<br><br><span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure><p><a name="HsYR1"></a></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><a name="FeE6C"></a></p><h3 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h3><p>ES6中提出了函数参数默认值的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (形参=<span class="hljs-string">&quot;默认值&quot;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(形参)<br>&#125;<br><br><span class="hljs-title function_">fn</span>() <span class="hljs-comment">// 默认值</span><br></code></pre></td></tr></table></figure><p>如果不传参，则默认就是对应的默认值</p><p>下面的知识不属于ES6<br><a name="vrXAY"></a></p><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>表示函数调用时实际传入的参数的集合，是一个类数组对象。一般函数不定数量参数时可以使用arguments<br><a name="pvu7C"></a></p><h3 id="arguments-callee"><a href="#arguments-callee" class="headerlink" title="arguments.callee"></a>arguments.callee</h3><p>这个就表示函数本身，在一些匿名函数完成递归调用时使用。<br><a name="bj9QX"></a></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>这个知识点很重要。<br />模块化发展历史单独引入js-&gt;CommonJS(nodejs)-&gt;AMD（require.js）-&gt;CMD（sea.js）-&gt;UMD-&gt;ESModule(现在主流的)<br><a name="kmRDG"></a></p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>想要在浏览器中使用模块化，需要在script标签添加<code>type=&quot;module&quot;</code>，并且需要在服务器环境下打开。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="uUhLl"></a></p><h3 id="导出模块"><a href="#导出模块" class="headerlink" title="导出模块"></a>导出模块</h3><p>导出模块有两种方法</p><ul><li>export </li><li>export default<br><a name="JZyNz"></a></li></ul><h4 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h4><p>默认导出（最方便的导出方式），这种导出方式只能导出一次，如果想要多次导出，就需要使用export进行导出。这种方式不需要我们考虑命名的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> 任意值<br></code></pre></td></tr></table></figure><p>所谓的任意值，可以是任意的数据类型。<br><a name="LSbLM"></a></p><h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><p>可以导出多个模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一种方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> 变量名 = 任意值<br><br><span class="hljs-comment">// 第二种方法</span><br><span class="hljs-keyword">let</span> 变量名 = 任意值<br><br><span class="hljs-keyword">export</span> &#123;<br>  <span class="hljs-comment">// 如果变量名和模块名一致</span><br>  变量名,<br>变量名 <span class="hljs-keyword">as</span> 模块名 <span class="hljs-comment">// 一般导出时不改名字</span><br>  <br>&#125;<br></code></pre></td></tr></table></figure><p><a name="y5bLY"></a></p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>导入模块使用import 有三种导入方式<br><a name="hskDW"></a></p><h4 id="import-导入默认导出的模块"><a href="#import-导入默认导出的模块" class="headerlink" title="import 导入默认导出的模块"></a>import 导入默认导出的模块</h4><p>这种操作最简单，不需要考虑名字，自己自定义一个即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> 自定义的名字 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块文件路径&quot;</span><br></code></pre></td></tr></table></figure><p>注意！！！如果模块中没有 export default，则会报错。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663732809148-573adeb9-8eec-414f-a7ca-c356c971c642.png#clientId=u2bb6a95f-c34f-4&from=paste&height=54&id=u70a1d102&name=image.png&originHeight=54&originWidth=363&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4447&status=done&style=none&taskId=u8e9c6294-aa29-45f8-8256-6b6b658ac0d&title=&width=363" alt="image.png"><br><a name="SND8M"></a></p><h4 id="import-导入-export导出的模块"><a href="#import-导入-export导出的模块" class="headerlink" title="import 导入 export导出的模块"></a>import 导入 export导出的模块</h4><p>使用export导出的模块，在导入时，名字需要和导出时的名字一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; 模块名 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块文件路径&quot;</span><br><span class="hljs-comment">// 如果有多个模块需要导入，则使用 &quot;,&quot; 隔开</span><br><span class="hljs-keyword">import</span> &#123; 模块名, 模块名<span class="hljs-number">2</span>, 模块名n &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块文件路径&quot;</span><br><span class="hljs-comment">// 如果要导入的模块名和现有变量有冲突，我们可以改名字</span><br><span class="hljs-keyword">import</span> &#123; 模块名 <span class="hljs-keyword">as</span> 别名, 模块名n &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块文件路径&quot;</span><br><span class="hljs-comment">// 如果我们不知道里面有什么模块，想要全部导出作为对象查看</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> 自定义的名字 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块文件路径&quot;</span><br></code></pre></td></tr></table></figure><p><a name="rA1vQ"></a></p><h4 id="当一个模块中既有默认导出，又有普通导出，导入可以一起写"><a href="#当一个模块中既有默认导出，又有普通导出，导入可以一起写" class="headerlink" title="当一个模块中既有默认导出，又有普通导出，导入可以一起写"></a>当一个模块中既有默认导出，又有普通导出，导入可以一起写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> 自定义名字 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块路径&quot;</span><br><span class="hljs-keyword">import</span> &#123;模块名&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块路径&quot;</span><br><br><span class="hljs-comment">// 可以写在一起</span><br><span class="hljs-keyword">import</span> 自定义名字, &#123;模块名&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块路径&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/47-AJAX/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/47-AJAX/</url>
    
    <content type="html"><![CDATA[<p>async javascript and xml 异步的javascript和xml</p><ul><li>async 异步</li><li>sync 同步</li></ul><p>Ajax即<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML（异步JavaScript和<a href="https://baike.baidu.com/item/XML/86251?fromModule=lemma_inlink">XML</a>）在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法，包括: <a href="https://baike.baidu.com/item/HTML/97049?fromModule=lemma_inlink">HTML</a> 或 <a href="https://baike.baidu.com/item/XHTML/316621?fromModule=lemma_inlink">XHTML</a>, CSS, <a href="https://baike.baidu.com/item/JavaScript/321142?fromModule=lemma_inlink">JavaScript</a>, <a href="https://baike.baidu.com/item/DOM/50288?fromModule=lemma_inlink">DOM</a>, XML, <a href="https://baike.baidu.com/item/XSLT/1330564?fromModule=lemma_inlink">XSLT</a>, 以及最重要的<a href="https://baike.baidu.com/item/XMLHttpRequest/6788735?fromModule=lemma_inlink">XMLHttpRequest</a>。 [3]  使用Ajax技术网页应用能够快速地将增量更新呈现在<a href="https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/6582461?fromModule=lemma_inlink">用户界面</a>上，而不需要重载（刷新）整个页面，这使得程序能够更快地回应用户的操作。<br />ajax最早是通过XMLHttpRequest对象生成的，后来在ES6提出了Fetch进行请求。但是一般我们使用ajax时，不会自己封装Ajax，会直接使用现成的ajax库——axios。<br><a name="gD21G"></a></p><h2 id="网络服务"><a href="#网络服务" class="headerlink" title="网络服务"></a>网络服务</h2><p>在我们进行ajax请求时，需要请求网络上的url。这里有几个概念<br><a name="bVkvz"></a></p><h3 id="method-请求方法"><a href="#method-请求方法" class="headerlink" title="method 请求方法"></a>method 请求方法</h3><p>GET、POST、PUT、PATCH、DELETE、OPTION<br><a name="BZicw"></a></p><h3 id="URL-请求地址"><a href="#URL-请求地址" class="headerlink" title="URL 请求地址"></a>URL 请求地址</h3><p>我们要请求的地址，<code>www.baidu.com</code>就是个URL地址<br><a name="yUrjn"></a></p><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><p>我们通过传递不同的参数，获得到不同的资源。具体参数的作用是什么，我们还需要和后台沟通。<br />以上的三个东西，都是由后台提供好的文档，我们只需要在ajax特定的地方填入特定的内容即可。<br><a name="CiXGS"></a></p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON（<a href="https://baike.baidu.com/item/JavaScript?fromModule=lemma_inlink">JavaScript</a> Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于 <a href="https://baike.baidu.com/item/ECMAScript?fromModule=lemma_inlink">ECMAScript</a>（European Computer Manufacturers Association, 欧洲计算机协会制定的js规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。JSON可以简单理解为JS中的数组和对象的集合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;李四&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>JSON本质是一个字符串，对象中的属性应该添加引号，而且必须时双引号。<br />在JS中使用JSON时会涉及到两个概念：json对象和json字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;&#123;\&quot;name\&quot;: \&quot;张三\&quot;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>怎么样才能把JSON字符串转换为JSON对象呢？<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663035972847-e65ea0db-6836-480c-9581-1738508c1e2f.png#clientId=u4d65a084-ea3c-4&from=paste&height=100&id=ubadea634&name=image.png&originHeight=100&originWidth=480&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10736&status=done&style=none&taskId=uef15e000-839d-4f92-897d-d90d8740bd7&title=&width=480" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>字符串) <span class="hljs-comment">// 得到的就是一个对象</span><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title class_">JSON</span>对象) <span class="hljs-comment">// 得到的就是一个字符串</span><br></code></pre></td></tr></table></figure><p><a name="bngPC"></a></p><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><p>我们和后台进行合作开发需要接口文档的支持。后台开发接口，前端调用接口。<br />根据少数派的请求后台会提供下面的接口文档。<br><a name="Xbj6s"></a></p><h3 id="获取文章列表接口"><a href="#获取文章列表接口" class="headerlink" title="获取文章列表接口"></a>获取文章列表接口</h3><p><a name="Y38xL"></a></p><h4 id="请求地址"><a href="#请求地址" class="headerlink" title="请求地址"></a>请求地址</h4><p><a href="https://sspai.com/api/v1/article/index/page/get">https://sspai.com/api/v1/article/index/page/get</a><br><a name="xoj04"></a></p><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>GET<br><a name="v2mbo"></a></p><h4 id="请求参数-1"><a href="#请求参数-1" class="headerlink" title="请求参数"></a>请求参数</h4><p>?offset&#x3D;10</p><table><thead><tr><th>参数名</th><th>参数值</th><th>描述信息</th></tr></thead><tbody><tr><td>offset</td><td>从第几条开始查</td><td></td></tr></tbody></table><p>不同的请求方法，参数写的位置不同。具体怎么写，看后面的操作。<br><a name="FkRau"></a></p><h4 id="响应结果"><a href="#响应结果" class="headerlink" title="响应结果"></a>响应结果</h4><p>这个东西我们要不要都行，只要我们请求到内容，就可以看到响应结果了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75672</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Apple 新品发布会上没告诉你的那些事&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/bcc1ee8f-374e-08c2-3280-caab2d7a746f.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;除了发布会上介绍过的新特性，其中还不乏一些发布会上并没有提及、但仍然值得我们关注的细节，少数派为你整理了其中一部分，让我们一起来看一下。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">102</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">67</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662876153</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;69zxdqx8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cdn.sspai.com/2022/05/07/15b77d2535728cd20235fd6190af928d.JPG&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Noah_Choi&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662871288</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662902890</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75669</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;任意键｜乌贼娘大战章鱼哥；守望先锋闪电般归来；大名鼎鼎的 V 及其他&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/79b0c6c9-5fb4-b1e9-0021-486e2b3a962a.jpg&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中秋快乐！「任意键」是少数派新试点的游戏周报栏目，我派编辑部的整活担当Kiririn将在此为各位读者盘点和锐评本周值得关注的游戏新闻。🎮玩游戏任天堂｜《斯普拉遁3》现已发售，首次支持简体中文万众期待的 ...&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662865402</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Kiririn&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022/08/26/avatar/f4325a5162bf3f56650b902bbb3b8575.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Kiririn&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662828328</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662865402</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75665</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从选购到使用，让 3D 打印机打开新世界的大门&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/a5a64efb-2eb2-9ef7-db5e-450ce4dbb1cc.jpg&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3D 打印机虽然看上去没什么用，但当你获得了可以加工各种形状零件能力的时候，你的想法可能就不太一样了。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">57</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662795000</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;uvi4vn20&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022/09/10/4f08cf2ab52681be572225169fcdf104.jpg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chouchoou&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662777942</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662794744</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75275</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;大厂出品不等于又大又慢，这 6 个小应用值得一试&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/340461ec-929a-554a-c28d-2b3df71429e6.jpg&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;不过大厂也并非所有产品都如此不堪，总有一些优质应用，因为顶着「大厂」的帽子让用户望而却步。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">57</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">45</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662778800</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;thebaldingken&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022/04/01/avatar/45095b5db98c397cc569446d70c0c9a6.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北鸮&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Matrix精选&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cdn.sspai.com//2020/07/15/03489f13d747077eafb9f844d842ed53.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Matrix精选&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; &quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1661080379</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662715411</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75654</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;本周看什么 | 最近值得一看的 6 部作品&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/dbf75f2d-09e7-6d1d-f399-7f452ef79453.jpg&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;☕️TL;DR近期佳作推荐：[美剧]红粉联盟、[电影]十三条命、[日剧]量产型璃子-模型女子的人生组装记-、[动画]瑞克和莫蒂第六季、[韩剧]小小姐们、[电影]恋之光几则精彩预告：《机动战士高达水星的 ...&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662718311</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ee0vj778&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/620926da-cd5f-5853-7961-de06067f507f.jpeg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;少数派编辑部&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662711215</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662719126</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75650</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;App+1 | 人人可用、不取分文，Android 平台习惯养成应用首选：Loop&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/da741512-a60e-f34c-6655-d7373335b657.jpg&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;没有精巧的界面，也没有让人拍手称奇的动画设计，但它却是一款堪称典范的工具类开源应用。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">32</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662711214</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100gle&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022/04/01/64401457d20ef05d671c1b385af6ec94.jpeg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100gle&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662699813</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662711214</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75651</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;今晚下单新品前，先来看看外媒真机上手体验&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/412c0a42-3b7c-af7f-4d2a-2839a97b51be.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;本文对部分外媒的新产品上手体验视频进行了汇总，希望能帮你对新设备更多一点了解，更好地作出购买决定。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">23</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662705998</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;liuxiaofengone&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022/04/02/8ab447d075ad627772c4540bc8612cbd.jpg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;化学心情下2&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662701562</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662705998</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75323</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;毕业留港找工作，这些建议请笑纳&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022/08/29/fbb58b501630c17136cf1d98cb343063.jpg&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">13</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">49</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662694098</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hermanchannn&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022/04/16/f387cf87a83753c6e2871634734f99ff.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hermanchannn&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Matrix精选&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cdn.sspai.com//2020/07/15/03489f13d747077eafb9f844d842ed53.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Matrix精选&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; &quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1661265715</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662694098</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75633</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新玩意 119｜少数派的编辑们最近买了啥？&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/984601ba-1df3-ced5-3f5a-57a8ad4dc91c.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;关于栏目很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。内容声明：《新玩意》栏目如含 ...&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">40</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662628810</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ee0vj778&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/620926da-cd5f-5853-7961-de06067f507f.jpeg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;少数派编辑部&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662627061</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662628810</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75552</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;生活不止眼前的苟且，还有眼下的厕纸：关于卫生纸你应该知道的&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;banner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;article/42830431-b144-5d4e-5890-c11367edafb0.jpg&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;summary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前言前段时间跟长辈聊天，我向他们问了一个我好奇已久的问题——他们小时候擦屁股用的是什么？他们的答案各不相同，令我有些意外，他们都没法用到如今我们习以为常的卫生纸，而是因地制宜，选择了不同的材料。我的舅 ...&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;like_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">52</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;view_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;free&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;post_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;important&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;released_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662618816</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;morning_paper_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;advertisement_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;series&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;betterlive&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022/03/21/1712e48101eb4c03fa49ab4fdefcd395.jpeg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;吃饭Bu洗碗&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;corner&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;memo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;special_columns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662369817</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;modify_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1662692731</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_matrix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is_recommend_to_home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;slug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;belong_to_member&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;issue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;podcast_duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16504</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><a name="EkmuT"></a></p><h3 id="获取文章详情接口"><a href="#获取文章详情接口" class="headerlink" title="获取文章详情接口"></a>获取文章详情接口</h3><p><a name="WPE6n"></a></p><h4 id="请求地址-1"><a href="#请求地址-1" class="headerlink" title="请求地址"></a>请求地址</h4><p><a href="https://sspai.com/api/v1/article/info/get">https://sspai.com/api/v1/article/info/get</a><br><a name="dbYzf"></a></p><h4 id="请求方法-1"><a href="#请求方法-1" class="headerlink" title="请求方法"></a>请求方法</h4><p>GET<br><a name="LJe86"></a></p><h4 id="请求参数-2"><a href="#请求参数-2" class="headerlink" title="请求参数"></a>请求参数</h4><table><thead><tr><th>参数名</th><th>参数值</th><th>描述信息</th></tr></thead><tbody><tr><td>id</td><td>例如：75666</td><td>文章的唯一标识</td></tr></tbody></table><p><a name="rBMZq"></a></p><h2 id="参数的写法"><a href="#参数的写法" class="headerlink" title="参数的写法"></a>参数的写法</h2><p><a name="nMNlZ"></a></p><h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><p>GET和DELETE请求的参数写法<br />query指的就是写在url后面的参数内容，以<code>?key=value&amp;key2=value2</code>的形式出现，对顺序没有要求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">url?id=<span class="hljs-number">10</span>&amp;page=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>所以我们请求少数派的接口时，我们需要写完整的url（具体参数要根据具体的文档）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//sspai.com/api/v1/article/index/page/get?offset=0&amp;limit=10</span><br></code></pre></td></tr></table></figure><p><a name="r0nio"></a></p><h3 id="body参数"><a href="#body参数" class="headerlink" title="body参数"></a>body参数</h3><p>POST PUT PATCH请求时参数的内容，比较多变，等到用到的时候再说。<br><a name="fl9E4"></a></p><h2 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h2><p>想要发起ajax请求有很多方法，原生xhr或者fetch都可以，我们先了解xhr</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><br>xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 我们请求到的结果，就是xhr.response 或者 xhr.responseText</span><br>&#125;<br><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;请求方法&quot;</span>, <span class="hljs-string">&quot;请求URL?请求参数&quot;</span>)<br>xhr.<span class="hljs-title function_">send</span>()<br></code></pre></td></tr></table></figure><p>我们获取到的response是一个JSON字符串，使用时需要将其转换为JSON对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">response</span>)<br></code></pre></td></tr></table></figure><p>请求成功后，可以在F12中的网络（network）里筛选出所有的ajax请求。然后下方就是所有的ajax请求列表<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663037897980-9ca076f7-5bee-41de-ab2e-ca38600cde56.png#clientId=u4d65a084-ea3c-4&from=paste&height=340&id=u99fe6b81&name=image.png&originHeight=340&originWidth=723&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33939&status=done&style=none&taskId=uc9961c9c-7dac-476c-bdda-2f70d9a654d&title=&width=723" alt="image.png"><br />点击请求的列表项<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663038184033-d54b7b1b-e655-4608-afc7-f8b4915333e6.png#clientId=u4d65a084-ea3c-4&from=paste&height=688&id=ub4509444&name=image.png&originHeight=688&originWidth=1103&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53792&status=done&style=none&taskId=ufa72b186-381f-402f-a7fb-2bb515004bb&title=&width=1103" alt="image.png"><br />标头请求中的请求头以及响应头信息，在这里只需要查看常规里的三个信息，就可以判断这个请求是否成功</p><ul><li>请求url</li><li>请求方法</li><li>状态码 200</li></ul><p>负载指的是我们携带的参数。用来判断我们的参数是否传递正确<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663038291532-7fc7c984-8fda-45f5-9d6f-df132723566a.png#clientId=u4d65a084-ea3c-4&from=paste&height=153&id=u5068053b&name=image.png&originHeight=153&originWidth=494&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9100&status=done&style=none&taskId=u302c86c7-c312-48d8-a6aa-37c124055c9&title=&width=494" alt="image.png"><br />预览就是请求的结果<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663038320056-cc884a66-00f2-4134-b96d-91bd640e49a5.png#clientId=u4d65a084-ea3c-4&from=paste&height=170&id=uc3f09fd5&name=image.png&originHeight=170&originWidth=948&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16194&status=done&style=none&taskId=udeb93b75-c8cd-49e5-a914-e7ce4b217ca&title=&width=948" alt="image.png"><br><a name="yrA78"></a></p><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><p>ES6中出现的替代xhr对象进行异步请求的一个对象。它默认是基于promise解决异步操作。fetch的用法很简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;请求地址?参数&quot;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>()) <span class="hljs-comment">// 把请求到的结果转换为JSON对象 在我们接下来的例子中，这一步是完全固定的</span><br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// data就是我们请求到的结果</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="njRRs"></a></p><h3 id="Fetch的配置"><a href="#Fetch的配置" class="headerlink" title="Fetch的配置"></a>Fetch的配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(请求地址, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// GET POST PATCH PUT DELETE</span><br>  <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;&#125;), <span class="hljs-comment">// 要传递数据 GET和delete不能写body,</span><br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// data就是请求到的数据</span><br>  <br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="SE8pv"></a></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>这是一个库！！！http请求库，使用时需要我们引入才能够使用。<br><a name="vSBaz"></a></p><h3 id="axios发起请求"><a href="#axios发起请求" class="headerlink" title="axios发起请求"></a>axios发起请求</h3><p><a name="z2PUe"></a></p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">get</span>(url, &#123;<br>  <span class="hljs-attr">params</span>: &#123;<br>    参数名: 参数值,<br>    参数名<span class="hljs-number">2</span>: 参数值<span class="hljs-number">2</span><br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// res.data就是对应的结果</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="ibp9h"></a></p><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">post</span>(url, &#123;<br>  参数名<span class="hljs-number">1</span>: 参数值<span class="hljs-number">1</span>,<br>  参数名<span class="hljs-number">2</span>: 参数值<span class="hljs-number">2</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// res.data就是我们的结果</span><br>  <br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="wwdj9"></a></p><h3 id="axios实例对象创建"><a href="#axios实例对象创建" class="headerlink" title="axios实例对象创建"></a>axios实例对象创建</h3><p>前期没有使用的必要。后面肯定会用。我们项目中要请求很多接口，可能分为不同的服务器。就需要我们有不同的axios实例对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 新的对象变量 = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;公共前缀&quot;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span>, <span class="hljs-comment">// 超时时间</span><br>  <span class="hljs-comment">// headers: &#123;&#125;</span><br>&#125;)<br><br><span class="hljs-comment">// 未来使用axios时就不能用axios，要用新的对象</span><br>新的对象变量.<span class="hljs-title function_">get</span>()<br>新的对象变量.<span class="hljs-title function_">post</span>()<br></code></pre></td></tr></table></figure><p><a name="Zg7m1"></a></p><h3 id="axios错误处理"><a href="#axios错误处理" class="headerlink" title="axios错误处理"></a>axios错误处理</h3><p>如果我们每个请求都进行错误处理，而且大部分的错误都是相同的，每次都写catch很麻烦</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">get</span>().<span class="hljs-title function_">then</span>().<span class="hljs-title function_">catch</span>()<br></code></pre></td></tr></table></figure><p>如果遇到这种情况，我们就可以用axios提供的响应拦截器 解决这个问题。如果使用的是axios.create创建的实例对象，那么设置拦截器也要用新的实例对象设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在代码的最上面 请求发起前 </span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 请求成功时执行的函数 response就是请求到的结果</span><br>  <span class="hljs-keyword">return</span> response<br>&#125;, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 请求错误时的函数</span><br>  <span class="hljs-comment">// 对公共错误进行处理</span><br>  <span class="hljs-keyword">if</span> (error.<span class="hljs-property">code</span> === <span class="hljs-string">&quot;xxx&quot;</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;什么什么错误，请修复&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="ucYNU"></a></p><h2 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h2><p>我们拿到接口文档，需要测试一下是否能够跑通，可以使用相关测试工具。<br />在线版：postwoman<br />本地版：apifox<br />这些工具大致的流程都一样，在对应的位置，填写url、请求方式、参数发起请求，即可查看对应的数据。<br><a name="urePu"></a></p><h2 id="接口文档上的一些注意的问题"><a href="#接口文档上的一些注意的问题" class="headerlink" title="接口文档上的一些注意的问题"></a>接口文档上的一些注意的问题</h2><p>如果我们在接口文档中看到如下的url</p><ul><li>&#x2F;demo&#x2F;:xxx</li><li>&#x2F;demo&#x2F;{xxx}</li></ul><p>这两种写法代表的意思一样，是两个不同的表示规范。遇到这种情况，意思是，xxx是一个参数，是一个可以动态改变的值。需要用实际的值进行替换。</p><ul><li>&#x2F;demo&#x2F;1</li><li>&#x2F;demo&#x2F;2<br><a name="zPNbN"></a></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><a href="https://cnodejs.org/api">https://cnodejs.org/api</a><br />访问cnode的接口文档，实现<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1663061216639-62575f35-8129-40f4-ab50-5a0f434b49d9.png#clientId=u4d65a084-ea3c-4&from=paste&height=870&id=u82f47a67&name=image.png&originHeight=870&originWidth=1096&originalType=binary&ratio=1&rotation=0&showTitle=false&size=155538&status=done&style=none&taskId=u277ce2cb-04d5-462c-8f0f-7cf67860e2d&title=&width=1096" alt="image.png"><br />点击标题，跳转到详情页，显示对应的详情内容<br><a name="Tibme"></a></p><h3 id="新的接口"><a href="#新的接口" class="headerlink" title="新的接口"></a>新的接口</h3><p><a href="http://172.16.3.100:3000/">http://172.16.3.100:3000</a><br><a name="eLsOp"></a></p><h4 id="获取列表"><a href="#获取列表" class="headerlink" title="获取列表"></a>获取列表</h4><p>GET &#x2F;topics<br />参数</p><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>_limit</td><td>一页的数量</td></tr><tr><td>_page</td><td>第几页</td></tr></tbody></table><p><a name="MGVkf"></a></p><h4 id="获取单个文章"><a href="#获取单个文章" class="headerlink" title="获取单个文章"></a>获取单个文章</h4><p>GET &#x2F;topics&#x2F;:id<br><a name="bfGkU"></a></p><h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><p>注意这个接口新建的文章只有标题和内容，还有分类，没有头像等信息<br />POST &#x2F;topics<br />参数</p><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>标题</td></tr><tr><td>tab</td><td>分类 ask job share dev</td></tr><tr><td>content</td><td>内容</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>10问题和解决</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/10.%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/10.%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p><a name="853471bc"></a></p><h1 id="1-在Andriod真机测试出错"><a href="#1-在Andriod真机测试出错" class="headerlink" title="1. 在Andriod真机测试出错"></a>1. 在Andriod真机测试出错</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">VM59:247 <span class="hljs-built_in">error</span> occurs:ENOENT: <span class="hljs-literal">no</span> such file <span class="hljs-keyword">or</span> directory, access <span class="hljs-string">&#x27;/storage/emulated/0/Android/data/com.tencent.mm/MicroMsg/wxanewfiles/461ac1a77238ddbbf2b7c9824f32db9a/miniprogramLog/log2&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>解决方案<br />在真机测试的二维码界面，把真机测试2.0， 改为真机测试1.0</li></ul><p><a name="203195ef"></a></p><h1 id="2-在wxml中用typeof报错"><a href="#2-在wxml中用typeof报错" class="headerlink" title="2. 在wxml中用typeof报错"></a>2. 在wxml中用typeof报错</h1><ul><li><p>wxml中不支持js的typeof </p></li><li><p>wxml中需要使用js逻辑，可使用wxs </p></li><li><p>wxs模块 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">WXS 代码可以编写在 wxml 文件中的 &lt;wxs&gt; 标签内，或以 <span class="hljs-selector-class">.wxs</span> 为后缀名的文件内。<br>每一个 <span class="hljs-selector-class">.wxs</span> 文件和 &lt;wxs&gt; 标签都是一个单独的模块。<br><br>每个模块都有自己独立的作用域。即在一个模块里面定义的变量与函数，默认为私有的，对其他模块不可见。<br><br>一个模块要想对外暴露其内部的私有变量与函数，只能通过 module<span class="hljs-selector-class">.exports</span> 实现。<br></code></pre></td></tr></table></figure></li><li><p>实现步骤 </p><ol><li><p>根目录 wxs&#x2F;util.wxs </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> (<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(val)) !== <span class="hljs-string">&#x27;number&#x27;</span><br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">result</span>: result<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>页面test.js</p></li></ol></li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">Page(&#123;<br>  data: &#123;<br>    person: &#x27;&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125;&#x27;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>页面test.wxml <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">wxs</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/wxs/util.wxs&quot;</span> <span class="hljs-attr">module</span>=<span class="hljs-string">&quot;tools&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">tools.result</span>(<span class="hljs-name">person</span>)&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><p><a name="0e850143"></a></p><h1 id="3-如何取消小程序中的云开发模式"><a href="#3-如何取消小程序中的云开发模式" class="headerlink" title="3. 如何取消小程序中的云开发模式"></a>3. 如何取消小程序中的云开发模式</h1><ol><li>打开小程序项目， 单击“云开发”， 打开云开发控制台</li><li>单击右上角”设置“， ”环境设置“ ， 在”环境名称“ 右侧的名字上单击， 在下拉菜单中单击”管理我的环境“</li><li>在弹出的“环境管理”中， 鼠标移至下方的环境名称上，即显示“删除”</li><li>删除即可</li></ol><p><a name="937fb44f"></a></p><h1 id="4-引入图标字体时报错"><a href="#4-引入图标字体时报错" class="headerlink" title="4. 引入图标字体时报错"></a>4. 引入图标字体时报错</h1><ul><li><p>报错信息<br />[渲染层网络层错误] Failed to load local font resource &#x2F;pages&#x2F;fonts&#x2F;iconfont.woff2?t&#x3D;1661753720519-do-not-use-local-path-.&#x2F;assets&#x2F;css&#x2F;iconfont.wxss&amp;11&amp;7<br />the server responded with a status of 500 (HTTP&#x2F;1.1 500 Internal Server Error) </p></li><li><p>错误原因<br />字体文件的路径应该使用相对根目录的路径，而不是相对当前文档的路径 </p></li><li><p>错误代码<br />iconfont.wxss </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;iconfont&quot;</span>; <br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../fonts/iconfont.woff2?t=1661753720519&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff2&#x27;</span>),<br>       <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../fonts/iconfont.woff?t=1661753720519&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),<br>       <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../fonts/iconfont.ttf?t=1661753720519&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>正确代码 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;iconfont&quot;</span>; <br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/assets/fonts/iconfont.woff2?t=1661753720519&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff2&#x27;</span>),<br>       <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/assets/fonts/iconfont.woff?t=1661753720519&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),<br>       <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/assets/iconfont.ttf?t=1661753720519&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><a name="258fdd59"></a></p><h1 id="5-按官网引入vant的日历组件后不显示"><a href="#5-按官网引入vant的日历组件后不显示" class="headerlink" title="5. 按官网引入vant的日历组件后不显示"></a>5. 按官网引入vant的日历组件后不显示</h1><ul><li><p>错误原因<br />官网模版如下，但是在json中， 只引入了van-calendar, 没有引入van-cell组件 </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">van-cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;选择单个日期&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">date</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">bind:click</span>=<span class="hljs-string">&quot;onDisplay&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">van-calendar</span> <span class="hljs-attr">show</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">show</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">bind:close</span>=<span class="hljs-string">&quot;onClose&quot;</span> <span class="hljs-attr">bind:confirm</span>=<span class="hljs-string">&quot;onConfirm&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>解决方案： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;van-calendar&quot;</span>: <span class="hljs-string">&quot;@vant/weapp/calendar/index&quot;</span>,<br>        <span class="hljs-string">&quot;van-cell&quot;</span>: <span class="hljs-string">&quot;@vant/weapp/cell/index&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><a name="0639ade0"></a></p><h1 id="6-使用vant日历组件报错"><a href="#6-使用vant日历组件报错" class="headerlink" title="6. 使用vant日历组件报错"></a>6. 使用vant日历组件报错</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[渲染层网络层错误] Failed to load font https:<span class="hljs-regexp">//</span>at.alicdn.com<span class="hljs-regexp">/t/</span>font_2553510_iv4v8nulyz.woff2?t=<span class="hljs-number">1649083952952</span><br>net::ERR_CACHE_MISS <br>(env: Windows,mp,<span class="hljs-number">1.06</span>.<span class="hljs-number">2208010</span>; lib: <span class="hljs-number">2.7</span>.<span class="hljs-number">7</span>)<br></code></pre></td></tr></table></figure><ul><li>解决方案：<br />更改右上角“详情” , “本地设置”, ”调试基础库“ 版本</li></ul><p><a name="3f01f140"></a></p><h1 id="7-Vant样式无效"><a href="#7-Vant样式无效" class="headerlink" title="7. Vant样式无效"></a>7. Vant样式无效</h1><ol><li>重新再终端安装vant<br />npm i @vant&#x2F;weapp -S –production </li><li>“工具”菜单—-构建npm </li><li>重启开发者工具即可</li></ol><p><a name="5ae52e1b"></a></p><h1 id="8-wxml中无论写什么都不显示"><a href="#8-wxml中无论写什么都不显示" class="headerlink" title="8. wxml中无论写什么都不显示"></a>8. wxml中无论写什么都不显示</h1><p>原因：  page.js中为空， 写入基础代码即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Page</span><span class="hljs-params">(&#123;&#125;)</span></span><br></code></pre></td></tr></table></figure><p><a name="b64f599d"></a></p><h1 id="9-在project-config-json中配置云开发失败"><a href="#9-在project-config-json中配置云开发失败" class="headerlink" title="9. 在project.config.json中配置云开发失败"></a>9. 在project.config.json中配置云开发失败</h1><p>原因： 课件中复制过来有不规范字符<br />解决方案：  手敲出来即可</p><p><a name="f4b82521"></a></p><h1 id="10-数据更新后视图不渲染"><a href="#10-数据更新后视图不渲染" class="headerlink" title="10. 数据更新后视图不渲染"></a>10. 数据更新后视图不渲染</h1><ul><li><p>错误代码： </p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">this</span>.<span class="hljs-class"><span class="hljs-keyword">data</span>.list.push()</span><br></code></pre></td></tr></table></figure></li><li><p>解决方案<br />必须使用this.setData更新数据，才能触发视图更新</p></li></ul><p><a name="40f1c73a"></a></p><h1 id="11-事件处理函数中接收不到dataset"><a href="#11-事件处理函数中接收不到dataset" class="headerlink" title="11.  事件处理函数中接收不到dataset"></a>11.  事件处理函数中接收不到dataset</h1><ul><li>错误原因： e.target 应该换为 e.currentTarget</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>9.分包</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/9-%E5%88%86%E5%8C%85/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/9-%E5%88%86%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>8.分包<br><a name="mPnWB"></a></p><h1 id="8-分包"><a href="#8-分包" class="headerlink" title="8.分包"></a>8.分包</h1><p><strong>分包加载</strong><br />官网链接：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html">https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html</a></p><p><strong>使用分包</strong></p><p><strong>注意事项</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670590337418-20858f06-e8ae-44ad-a77c-7629680e6baf.png?x-oss-process=image/resize,w_853,limit_0#averageHue=%23f2f1ef&from=url&id=zHBMo&originHeight=302&originWidth=853&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670590349225-e2b8618d-5b4f-4eca-af13-6e96ed1e67e5.png?x-oss-process=image/resize,w_480,limit_0#averageHue=%23a5bfd1&from=url&id=jZU33&originHeight=816&originWidth=480&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670590352364-fc092ceb-ba44-41de-aed5-390fb9e7a2c1.png?x-oss-process=image/resize,w_480,limit_0#averageHue=%23f7f8f9&from=url&id=JPZ7o&originHeight=701&originWidth=480&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />若有收获，就点个赞吧<br /><a href="https://www.yuque.com/ranguniang-jxtzm">冉姑娘👑</a><br />2022-12-09 20:53<br />274<br />0<br />IP 属地河南<br />举报<br />分享到：<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/anonymous/1655783650827-b43e0b41-9f75-4c48-b306-06a29c164a3e.jpeg?x-oss-process=image/resize,m_fill,w_64,h_64/format,png#averageHue=%237a776e&from=url&id=RiTbn&originHeight=64&originWidth=64&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br /><strong>正文</strong><br />### + Space标题3</p><p><strong>回复</strong><br /><img src="https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*IVdnTJqUp6gAAAAAAAAAAAAADvuFAQ/original#from=url&id=jcKdB&originHeight=172&originWidth=400&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br /><a href="https://www.yuque.com/help/about">关于语雀</a><a href="https://www.yuque.com/help">使用帮助</a><a href="https://www.yuque.com/about/security">数据安全</a><a href="https://www.yuque.com/terms">服务协议</a><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/yn3g8aog2q0b6idk?language=en-us">English</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm">冉姑娘👑</a><br /><strong>课堂笔记</strong><br />搜索Ctrl + J<br />首页<br />目录<br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/ebs8if">7.H5新增API</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/yuqlfp">8.ES6</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/gn5g24">9.MySQL数据库</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/krv2uf">10. Node</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/cugnxt">11.Vue</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/iws2xm5otzrv81mt">12.elementUI</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/eskaxko5lspn3s83">13.TypeScript</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/zzf6iuq4whd1e8f1">14.Vue3</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/npiy99havog3rg2t">15.小程序</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/wenwr451g36779l5">0.小程序代码片段</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/zvkp0fw0lhfim0y0">1.注册小程序</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/zgmriqqaauq7wr8g">2.wxml语法</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/em2b5tlafmg5pyfy">3.page页面的逻辑</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/sz1gbznkhxnl7pgz">4.常用API</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/kn73b0q78aph4d43">5.组件化开发</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/zfmo1dv44rs27oza">6.常用组件和授权</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/sc7hf4zmdmnc04na">7.微信小程序登录授权（鉴权）</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/yn3g8aog2q0b6idk">8.分包</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/meabvd6odwmzcgm7">9.云开发</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/gir1g2rw8h1zxq9z">10.问题和解决</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/xl6ofq1iddlv1c3g">11.uniapp</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/gzg9dh">高频面试题</a><br /><strong>大纲</strong><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/yn3g8aog2q0b6idk#vzMlZ">分包加载</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/yn3g8aog2q0b6idk#sP0Cv">使用分包</a><br /><a href="https://www.yuque.com/ranguniang-jxtzm/ashgdc/yn3g8aog2q0b6idk#guSkg">注意事项</a><br />Adblocker</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>EChats</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/46.EChats/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/46.EChats/</url>
    
    <content type="html"><![CDATA[<p>EChart是一个图表库，用来进行数据可视化操作，同样的库还有很多：蚂蚁金服的AntV，HightCharts<br><a name="QqrNK"></a></p><h2 id="下载ECharts"><a href="#下载ECharts" class="headerlink" title="下载ECharts"></a>下载ECharts</h2><p>在<a href="https://echarts.apache.org/zh/download.html">官网下载</a>，进入后，下载对应的版本即可<br /><a href="https://www.yuque.com/attachments/yuque/0/2022/js/29344914/1664357899813-67de2b7e-aa35-4af4-ac73-5d99a5e6316d.js">echarts.js</a><br><a name="CExig"></a></p><h2 id="使用ECharts"><a href="#使用ECharts" class="headerlink" title="使用ECharts"></a>使用ECharts</h2><p>使用ECharts很简单，我们只需要进行以下操作即可</p><ol><li><p>引入ECharts</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在body中添加合适的容器，用于渲染图表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;charts&quot;</span> style=<span class="hljs-string">&quot;height: 400px&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>这个元素的大小可以任意的修改</p></li><li><p>生成echarts的对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;charts&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// let chart = echarts.init(上面生成的元素的DOM对象)</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> chart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.charts&#x27;</span>))</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>去<a href="https://echarts.apache.org/examples/zh/index.html">案例中心</a>找到合适的案例打开复制对应的option（当然也可以自己写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> option = &#123;<br>  <span class="hljs-attr">xAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>]<br>  &#125;,<br>  <span class="hljs-attr">yAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">series</span>: [<br>    &#123;<br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">150</span>, <span class="hljs-number">230</span>, <span class="hljs-number">224</span>, <span class="hljs-number">218</span>, <span class="hljs-number">135</span>, <span class="hljs-number">147</span>, <span class="hljs-number">260</span>],<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用setOption方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">chart.<span class="hljs-title function_">setOption</span>(option)<br></code></pre></td></tr></table></figure></li><li><p>打开网页，看效果</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662431605335-188e5da7-42fe-46ca-9c45-3fb7ba05eba1.png#clientId=uad51eafd-12e7-4&from=paste&height=761&id=u2be7a399&name=image.png&originHeight=761&originWidth=962&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23330&status=done&style=none&taskId=u0b55bb6a-2209-45ff-aae6-87a257638a7&title=&width=962" alt="image.png"><br />我们需要根据我们的需求修改样式。<br><a name="E8LLs"></a></p><h2 id="模拟现有的一些图表提升自己的数据可视化能力"><a href="#模拟现有的一些图表提升自己的数据可视化能力" class="headerlink" title="模拟现有的一些图表提升自己的数据可视化能力"></a>模拟现有的一些图表提升自己的数据可视化能力</h2><p><a name="bcZ9m"></a></p><h2 id="几个常见的配置项"><a href="#几个常见的配置项" class="headerlink" title="几个常见的配置项"></a>几个常见的配置项</h2><p>在option中有几个常用的配置项，我们要熟悉他们是做什么。<a href="https://echarts.apache.org/zh/option.html#title">所有的配置项看这个网址</a><br><a name="lM5F0"></a></p><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p>可以配置一个数组，我们对应的series里的值会循环的从第一个到最后一个，循环使用颜色。当然颜色也可以单独定义。<br><a name="IDIbr"></a></p><h3 id="xAxis-yAxis"><a href="#xAxis-yAxis" class="headerlink" title="xAxis yAxis"></a>xAxis yAxis</h3><p>设置X轴和Y轴的样式</p><ul><li>label 标签</li><li>line 轴线</li><li>tick 刻度<br><a name="X1ThZ"></a></li></ul><h3 id="toolTip"><a href="#toolTip" class="headerlink" title="toolTip"></a>toolTip</h3><p>鼠标移入时的提示信息<br><a name="wBHIt"></a></p><h3 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h3><p>控制图表展示区域的<br><a name="QZPY4"></a></p><h3 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h3><p>图表上的<img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662445299543-79499a69-181d-47c5-ac9d-a0bb026dbdc7.png#clientId=uad51eafd-12e7-4&from=paste&height=37&id=uf60cb2cf&name=image.png&originHeight=37&originWidth=507&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3427&status=done&style=none&taskId=uf317d2aa-7752-4393-a61c-a68b1095151&title=&width=507" alt="image.png">图例信息。<br><a name="hYk3Y"></a></p><h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><p>每一个图的数据样式都可以在这里的某个对象中进行定义。这个数据是个数组。可以有多种图表类型。<br />如果我们有多个图表，我们就可以实现多个类型的表在一个坐标系中。<br><a name="FW7tU"></a></p><h2 id="显示地图"><a href="#显示地图" class="headerlink" title="显示地图"></a>显示地图</h2><p>想要在echarts中展示地图，我们需要有对应的地图数据，可以去<a href="http://datav.aliyun.com/portal/school/atlas/area_selector">阿里dataV下载</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662451389372-aef41640-7d69-4981-bdd6-0f8c64003acc.png#clientId=uad51eafd-12e7-4&from=paste&height=878&id=u45f4f00e&name=image.png&originHeight=878&originWidth=1857&originalType=binary&ratio=1&rotation=0&showTitle=false&size=125397&status=done&style=none&taskId=ue10aacb0-e126-41f3-a1fa-1ec21000ead&title=&width=1857" alt="image.png"><br />我们要的数据就是一个对象，我们需要把这个对象下载到本地。<br /><a href="https://www.yuque.com/attachments/yuque/0/2022/js/29344914/1664357899933-f00daa96-83f9-4c31-95db-0b388debfbff.js">china.js</a><br />在我们的网页中引入china.js，就会有一个变量<code>china</code><br><a name="vWfiM"></a></p><h3 id="使用地图"><a href="#使用地图" class="headerlink" title="使用地图"></a>使用地图</h3><p>想要使用地图，需要在我们的代码中注册地图</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">echarts.<span class="hljs-title function_">registerMap</span>(<span class="hljs-string">&quot;自定义地图名称&quot;</span>, 地图数据)<br></code></pre></td></tr></table></figure><p>在我们的例子里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">echarts.<span class="hljs-title function_">registerMap</span>(<span class="hljs-string">&quot;china&quot;</span>, china)<br></code></pre></td></tr></table></figure><p>然后初始化echarts，配置对应的option</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> chart = echarts.<span class="hljs-title function_">init</span>(dom对象)<br><br><span class="hljs-keyword">let</span> option = &#123;<br>  <span class="hljs-attr">geo</span>: &#123;<br>    <span class="hljs-attr">map</span>: <span class="hljs-string">&quot;自定义地图名称&quot;</span><br>  &#125;<br>&#125;<br><br>chart.<span class="hljs-title function_">setOption</span>(option)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662452466912-291e9d08-f0eb-4905-8367-039dd0a00423.png#clientId=uad51eafd-12e7-4&from=paste&height=915&id=u167bdc9b&name=image.png&originHeight=915&originWidth=962&originalType=binary&ratio=1&rotation=0&showTitle=false&size=100554&status=done&style=none&taskId=u42a1c80e-5b6c-4393-bb6d-0eed0085974&title=&width=962" alt="image.png"><br />这个地图，其实是我们建立的特殊坐标系——地理坐标系。<br />我们可以通过配置geo.itemStyle改变默认时的样式，配置geo.select配置选中时的样式。配置geo.emphasis配置移入时的样式。<br><a name="EN4GW"></a></p><h3 id="在地图上显示散点图"><a href="#在地图上显示散点图" class="headerlink" title="在地图上显示散点图"></a>在地图上显示散点图</h3><p><a href="https://echarts.apache.org/examples/zh/editor.html?c=effectScatter-bmap">https://echarts.apache.org/examples/zh/editor.html?c=effectScatter-bmap</a><br />散点图的设置在series中，设置一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-comment">// 坐标系设置成地理坐标系，默认是直角坐标系</span><br>    <span class="hljs-attr">coordinateSystem</span>: <span class="hljs-string">&#x27;geo&#x27;</span>,<br>    <span class="hljs-comment">// 地理坐标系中，data比较复杂 [&#123;name:&quot;名字&quot;, value: [经度, 纬度, 值]&#125;]</span><br>    <span class="hljs-attr">data</span>: <span class="hljs-title function_">convertData</span>(data),<br>    <span class="hljs-comment">// 散点图</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;scatter&#x27;</span>,<br>    <span class="hljs-comment">// symbolSize: function () &#123;&#125;</span><br>    <span class="hljs-comment">// 散点大小</span><br>    symbolSize (value) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>      <span class="hljs-keyword">return</span> value[<span class="hljs-number">2</span>] / <span class="hljs-number">10</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>这样我们就可以在地图上展示散点图。<br />注意！！！geo只是添加地理坐标系。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>8.微信小程序登录授权（鉴权）</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/8-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83%EF%BC%88%E9%89%B4%E6%9D%83%EF%BC%89/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/8-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83%EF%BC%88%E9%89%B4%E6%9D%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a name="emID6"></a></p><h1 id="相关概念-（了解）"><a href="#相关概念-（了解）" class="headerlink" title="相关概念 （了解）"></a>相关概念 （了解）</h1><p><a name="HC5KW"></a></p><h3 id="openid"><a href="#openid" class="headerlink" title="openid"></a>openid</h3><ul><li>是表示用户在你的当前应用中的唯一标示,比如小程序，微信公众号等，这些都算是一个应用，如果你有多个应用，同一个用户的openId可能并不相同</li><li>小程序的openid相当重要，它是用户的唯一标识id，牵扯到支付，登录，授权等！你可以理解为小程序的账号，小程序是获取不到你的微信号的，这个属于私密信息!只能获取用户的昵称，头像，openid，session_key等</li></ul><p><a name="mZTcW"></a></p><h3 id="UnionID"><a href="#UnionID" class="headerlink" title="UnionID"></a>UnionID</h3><p>机制说明如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 UnionID 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 UnionID 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，UnionID是相同的</p><p><a name="oDQv1"></a></p><h3 id="session-key"><a href="#session-key" class="headerlink" title="session_key"></a>session_key</h3><ul><li>微信客户端通过wx.getUserInfo()获取用户的信息</li><li>后台有时候也需要获取微信客户端的用户信息，因此，就需要利用session_key这个秘钥来从微信平台中获取</li><li>签名校验以及数据加解密涉及用户的会话密钥 session_key。 开发者应该事先通过 wx.login 登录流程获取会话密钥 session_key 并保存在服务器。为了数据不被篡改，开发者不应该把 session_key 传到小程序客户端等服务器外的环境。</li><li>后台如果想要获取用户的信息，就一定要知道session_key，如果session_key 过期，就需要客户端完成一次登录的流程</li></ul><p><a name="uXM1k"></a></p><h1 id="服务端登录"><a href="#服务端登录" class="headerlink" title="服务端登录"></a>服务端登录</h1><ul><li>登录凭证校验。通过 wx.login 接口获得临时登录凭证 code 后传到开发者服务器调用此接口完成登录流程。</li><li>请求地址：</li></ul><p>GET <a href="https://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code=JSCODE&grant_type=authorization_code">https://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code&#x3D;JSCODE&amp;grant_type&#x3D;authorization_code</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670590148676-eae89508-37cb-4e37-ba43-720da18bf3f9.png#averageHue=%23fdfcfc&clientId=u75fbedda-3b31-4&from=paste&height=253&id=ud3e0f196&name=image.png&originHeight=1154&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8878292&status=done&style=none&taskId=u7a187f6d-4ea7-4b42-82f1-dfd99f39150&title=&width=561.88720703125" alt="image.png"></p><p><a name="aqMY6"></a></p><h1 id="服务端登录-1"><a href="#服务端登录-1" class="headerlink" title="服务端登录"></a>服务端登录</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670590163277-7ca5a6e3-8365-4933-bb82-d3d5ddde2f1f.png#averageHue=%23fdfdfc&clientId=u75fbedda-3b31-4&from=paste&height=369&id=u0a5003aa&name=image.png&originHeight=1440&originWidth=2079&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8997326&status=done&style=none&taskId=u5d3970a5-0cb2-4e18-8d1e-e0290d91cba&title=&width=532.88720703125" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670590166156-90d2a113-70a1-475c-aed0-2b7f0f4f10fe.png#averageHue=%23fcfcfb&clientId=u75fbedda-3b31-4&from=paste&height=453&id=ub172d61f&name=image.png&originHeight=1440&originWidth=1615&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6989596&status=done&style=none&taskId=uf8ffd96f-10e7-4417-8fbf-84b480ae7e8&title=&width=507.88720703125" alt="image.png"><br><a name="HDdCk"></a></p><h1 id="小程序登录"><a href="#小程序登录" class="headerlink" title="小程序登录"></a>小程序登录</h1><p>小程序可以通过微信官方提供的登录能力方便地获取微信提供的用户身份标识，快速建立小程序内的用户体系<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670590190158-4f4c32f9-4790-4cce-b30e-1f09416a589d.png#averageHue=%23f6f6f6&clientId=u75fbedda-3b31-4&from=paste&height=811&id=u1e25f4be&name=image.png&originHeight=1460&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6318944&status=done&style=none&taskId=u27290682-ad7c-4878-87aa-30ea2e9fe46&title=&width=800.0000211927631" alt="image.png"><br><a name="C1Qtk"></a></p><h1 id="微信登录获取token前后端"><a href="#微信登录获取token前后端" class="headerlink" title="微信登录获取token前后端"></a>微信登录获取token前后端</h1><p>js端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 微信登录</span><br>  <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// wx.login获取code码</span><br>    wx.<span class="hljs-title function_">login</span>(&#123;<br>      <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>,<br>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">let</span> &#123;code &#125; = res;<br>        <span class="hljs-comment">// 获取服务器端生成的token</span><br>        wx.<span class="hljs-title function_">request</span>(&#123;<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8000/login&#x27;</span>,<br>          <span class="hljs-attr">data</span>: &#123;<br>            code<br>          &#125;,<br>          <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>            <span class="hljs-comment">//登录成功,把token存入Storage</span><br>            <span class="hljs-comment">// console.log(res.data);</span><br>            wx.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&#x27;token&#x27;</span>, res.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>)<br>            wx.<span class="hljs-title function_">showToast</span>(&#123;<br>              <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>            &#125;)<br>          &#125;<br>        &#125;)<br>      &#125;,<br>      <span class="hljs-title function_">fail</span>(<span class="hljs-params">err</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      &#125;<br>    &#125;)<br>  &#125;,<br><br></code></pre></td></tr></table></figure><p>服务器后端   app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;axios&quot;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 微信登录</span><br><span class="hljs-comment"> */</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; code &#125; = req.<span class="hljs-property">query</span>;<br>    <span class="hljs-comment">// 小程序的AppSecret密钥</span><br>    <span class="hljs-keyword">let</span> secret = <span class="hljs-string">&quot;52c96ad50471c42db5715c7ea912e7aa&quot;</span><br>    <span class="hljs-keyword">let</span> appid = <span class="hljs-string">&quot;wxf7177a507a7fc69a&quot;</span><br><br>    <span class="hljs-keyword">let</span> url = <span class="hljs-string">`https://api.weixin.qq.com/sns/jscode2session?appid=<span class="hljs-subst">$&#123;appid&#125;</span>&amp;secret=<span class="hljs-subst">$&#123;secret&#125;</span>&amp;js_code=<span class="hljs-subst">$&#123;code&#125;</span>&amp;grant_type=authorization_code`</span><br><br>    <span class="hljs-comment">// 向微信的授权接口发送请求</span><br>    axios.<span class="hljs-title function_">get</span>(url)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res1</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> &#123; openid &#125; = res1.<span class="hljs-property">data</span>;<br>            <span class="hljs-keyword">let</span> token = <span class="hljs-string">&#x27;ererereteteterdvdgtgrtgrtrtrtrdfrdter&#x27;</span><br>                res.<span class="hljs-title function_">send</span>(&#123;<br>                    token,<br>                    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span><br>                &#125;)<br>        &#125;)<br>&#125;)<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">5000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务器开启在5000端口&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>7.常用组件和授权</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/7-%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8E%88%E6%9D%83/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/7-%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<p><a name="PKwOe"></a></p><h1 id="swiper组件"><a href="#swiper组件" class="headerlink" title="swiper组件"></a>swiper组件</h1><p>滑块视图容器。其中只可放置swiper-item组件<br />page.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">swiper</span> <span class="hljs-attr">indicator-dots</span>=<span class="hljs-string">&quot;&#123;&#123;indicatorDots&#125;&#125;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;&#123;&#123;autoplay&#125;&#125;&quot;</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;&#123;&#123;interval&#125;&#125;&quot;</span> <span class="hljs-attr">duration</span>=<span class="hljs-string">&quot;&#123;&#123;duration&#125;&#125;&quot;</span> <span class="hljs-attr">circular</span>=<span class="hljs-string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;imgUrls&#125;&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;slide-image&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;355&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;150&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">swiper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>page.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">imgUrls</span>: [<br>      <span class="hljs-string">&#x27;http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg&#x27;</span>,<br>      <span class="hljs-string">&#x27;http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg&#x27;</span>,<br>      <span class="hljs-string">&#x27;http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg&#x27;</span><br>    ],<br>    <span class="hljs-attr">indicatorDots</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">interval</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span><br>  &#125;,<br><br></code></pre></td></tr></table></figure><p><a name="y5XDT"></a></p><h1 id="scroll-view：-可滚动视图区域"><a href="#scroll-view：-可滚动视图区域" class="headerlink" title="scroll-view：    可滚动视图区域"></a>scroll-view：    可滚动视图区域</h1><p>可滚动视图区域。使用竖向滚动时，需要给scroll-view一个固定高度，通过 WXSS 设置 height。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;!-- 页面容器 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 左侧菜单 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">scroll-y</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;goodsClass&#125;&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&#123;&#123;activeIndex === index ?&#x27;active&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;toggle&quot;</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">&quot;&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 右侧 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">scroll-y</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scroll-into-view</span>=<span class="hljs-string">&quot;class&#123;&#123;curIndex&#125;&#125;&quot;</span> <span class="hljs-attr">scroll-with-animation</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">bindscroll</span>=<span class="hljs-string">&quot;scroll&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class-box&quot;</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;goodsClass&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;class&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-gouwuche&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-box&quot;</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;item.foods&#125;&#125;&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;food&quot;</span> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&quot;idx&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;idx&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>菜名:&#123;&#123;food.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>价格：&#123;&#123;food.price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>pages&#x2F;classify&#x2F;classify.wxss </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 页面容器 */</span><br><span class="hljs-selector-class">.container</span> &#123;<br>   <span class="hljs-attribute">position</span>: absolute;<br>   <span class="hljs-attribute">display</span>: flex;<br>   <span class="hljs-attribute">flex-direction</span>: row;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;<br>&#125;<br><span class="hljs-comment">/* 左侧菜单 */</span><br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1</span>rpx solid red;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200</span>rpx;<br>&#125;<br>scroll-view &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.left</span> view,<br><span class="hljs-selector-class">.right</span> <span class="hljs-selector-class">.item-box</span>&#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1</span>rpx solid <span class="hljs-number">#aaa</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200</span>rpx;<br>&#125;<br><span class="hljs-selector-class">.left</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.active</span>&#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0ff</span>;<br>&#125; <br><br><span class="hljs-comment">/* 右侧 */</span><br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1</span>rpx solid red;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> <span class="hljs-selector-class">.title</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10</span>rpx;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50</span>rpx;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：使用竖向滚动时，需要给scroll-view一个固定高度，通过 WXSS 设置 height。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> goodsClass <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../mock/data.js&#x27;</span><br><span class="hljs-title class_">Page</span>(&#123;<br><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">goodsClass</span>: [],<br>  <span class="hljs-attr">activeIndex</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">curIndex</span>:<span class="hljs-number">0</span>,<br>  <span class="hljs-attr">listHeight</span>: []<br>&#125;,<br><span class="hljs-comment">//页面初始化时，加载数据</span><br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//发起网络请求</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>    goodsClass<br>  &#125;)<br>&#125;,<br>   <br><br><span class="hljs-comment">//当页面渲染完毕，获取每一个类别top偏移值</span><br><span class="hljs-title function_">onReady</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> query = wx.<span class="hljs-title function_">createSelectorQuery</span>();<br>  query.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;.class-box&quot;</span>).<span class="hljs-title function_">boundingClientRect</span>();<br>  query.<span class="hljs-title function_">exec</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> tempArr = res[<span class="hljs-number">0</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>      <span class="hljs-keyword">return</span> item.<span class="hljs-property">top</span>-<span class="hljs-number">5.5</span><br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">listHeight</span>: tempArr<br>    &#125;)<br>  &#125;)<br>&#125;,<br><span class="hljs-comment">//当切换左侧菜单时</span><br><span class="hljs-title function_">toggle</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-keyword">let</span> index = e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">index</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>    <span class="hljs-attr">activeIndex</span>: index,<br>    <span class="hljs-attr">curIndex</span>: index<br>  &#125;)<br>&#125;,<br><br><br><span class="hljs-comment">// 当右侧滚动时</span><br><span class="hljs-title function_">scroll</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-keyword">let</span> scrollTop = e.<span class="hljs-property">detail</span>.<span class="hljs-property">scrollTop</span><br>  <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">let</span> index;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">listHeight</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (scrollTop &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">listHeight</span>[i] &amp;&amp; scrollTop &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">listHeight</span>[i + <span class="hljs-number">1</span>]) &#123;<br>      flag = <span class="hljs-literal">false</span>;<br>      index = i;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (flag) &#123;<br>    index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">listHeight</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>    <span class="hljs-attr">activeIndex</span>: index<br>  &#125;)<br>&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><a name="IFsJA"></a></p><h1 id="微信授权"><a href="#微信授权" class="headerlink" title="微信授权"></a>微信授权</h1><p>部分接口需要经过用户授权同意才能调用。我们把这些接口按使用范围分成多个 scope ，用户选择对 scope 来进行授权，当授权给一个 scope 之后，其对应的所有接口都可以直接使用。    <br />此类接口调用时：   </p><ol><li>如果用户未接受或拒绝过此权限，会弹窗询问用户，用户点击同意后方可调用接口；   </li><li>如果用户已授权，可以直接调用接口；    </li><li>如果用户已拒绝授权，则不会出现弹窗，而是直接进入接口 fail 回调。请开发者兼容用户拒绝授权的场景</li></ol><p>wx.getSetting(Object object)</p><ol><li>获取用户的当前设置。返回值中只会出现小程序已经向用户请求过的权限。 </li><li>示例代码        <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">getSetting</span>(&#123;<br>  success (res) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">authSetting</span>)<br>      <span class="hljs-comment">// res.authSetting = &#123;</span><br>      <span class="hljs-comment">//   &quot;scope.userInfo&quot;: true,</span><br>      <span class="hljs-comment">//   &quot;scope.userLocation&quot;: true</span><br>      <span class="hljs-comment">// &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>一旦用户明确同意或拒绝过授权，其授权关系会记录在后台，直到用户主动删除小程序。<br />在微信中把小程序删除掉，即删除授权关系<br><a name="p7HWP"></a></li></ol><h1 id="微信授权-（了解，有些需要权限）"><a href="#微信授权-（了解，有些需要权限）" class="headerlink" title="微信授权 （了解，有些需要权限）"></a>微信授权 （了解，有些需要权限）</h1><p>scope 列表       <br /><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html</a>    <br />scope对应接口描述    <br />scope.userInfowx.getUserInfo用户信息    <br />scope.userLocationwx.getLocation, wx.chooseLocation地理位置    <br />scope.userLocationBackgroundwx.startLocationUpdateBackground后台定位    <br />scope.addresswx.chooseAddress通讯地址    <br />scope.invoiceTitlewx.chooseInvoiceTitle发票抬头    <br />scope.invoicewx.chooseInvoice获取发票    <br />scope.werunwx.getWeRunData微信运动步数    <br />scope.recordwx.startRecord录音功能    <br />scope.writePhotosAlbumwx.saveImageToPhotosAlbum, wx.saveVideoToPhotosAlbum保存到相册    <br />scope.cameracamera 组件摄像头<br />注意：有些接口针对非个人开发者，且完成了认证的小程序开放（不包含海外主体）。<br />需谨慎使用，若用户举报较多或被发现在不必要场景下使用，微信有权永久回收该小程序的该接口权限。<br><a name="Svl4t"></a></p><h1 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h1><ol><li>通过下面代码，弹出授权弹窗，确定后，即可获取用户信息<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>  <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;onGetUserInfo&quot;</span>&gt;</span>获取用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- js代码: --&gt;</span><br>onGetUserInfo(e)&#123;<br>  wx.getUserProfile(&#123;<br>    desc: &#x27;用于完善会员资料&#x27;, // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写<br>    success: (res) =&gt; &#123;<br>      this.setData(&#123;<br>          userInfo: res.userInfo,<br>          hasUserInfo: true<br>      &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure>获取用户信息和授权用户信息的操作，从2022年11月9日起就被禁用了，现在官网推荐，获取头像昵称请使用<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/userProfile.html">头像昵称填写能力</a>手动添加的方式实现<br />并且添加的时候，可以将 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 组件 type 的值设置为 nickname，当用户在此 input 进行输入时，键盘上方会展示微信昵称。<br />参考链接：<a href="https://developers.weixin.qq.com/community/develop/doc/00022c683e8a80b29bed2142b56c01">https://developers.weixin.qq.com/community/develop/doc/00022c683e8a80b29bed2142b56c01</a><br><a name="kWRvK"></a></li></ol><h1 id="map地图的使用"><a href="#map地图的使用" class="headerlink" title="map地图的使用"></a>map地图的使用</h1><ol><li><p>在app.json中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;permission&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;scope.userLocation&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;你的位置信息将用于小程序位置接口的效果展示&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用地理定位接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">getLocation</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;gcj02&#x27;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 返回值</span><br><br><span class="hljs-attr">accuracy</span>: <span class="hljs-number">65</span><br><span class="hljs-attr">buildingId</span>: <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">direction</span>: -<span class="hljs-number">1</span><br><span class="hljs-attr">errMsg</span>: <span class="hljs-string">&quot;getLocation:ok&quot;</span><br><span class="hljs-attr">floorName</span>: <span class="hljs-string">&quot;1000&quot;</span><br><span class="hljs-attr">horizontalAccuracy</span>: <span class="hljs-number">65</span><br><span class="hljs-attr">latitude</span>: <span class="hljs-number">34.82350540161133</span><br><span class="hljs-attr">longitude</span>: <span class="hljs-number">113.64183807373047</span><br><span class="hljs-attr">provider</span>: <span class="hljs-string">&quot;gps&quot;</span><br><span class="hljs-attr">speed</span>: -<span class="hljs-number">1</span><br><span class="hljs-attr">verticalAccuracy</span>: <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p>地图组件 （需要用getLocation获取经纬度）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">longitude</span>=<span class="hljs-string">&quot;&#123;&#123;longitude&#125;&#125;&quot;</span> <span class="hljs-attr">latitude</span>=<span class="hljs-string">&quot;&#123;&#123;latitude&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="Bcwpb"></a></p></li></ol><h1 id="微信小程序之逆地址解析"><a href="#微信小程序之逆地址解析" class="headerlink" title="微信小程序之逆地址解析"></a>微信小程序之逆地址解析</h1><p>腾讯地图参考链接：<a href="https://lbs.qq.com/service/webService/webServiceGuide/webServiceOverview">https://lbs.qq.com/service/webService/webServiceGuide/webServiceOverview</a><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/22278242/1672802137137-a3c1fdb4-bc86-49c4-bf63-23b99612d6d5.png#averageHue=%23fefefe&clientId=uf6664770-8d22-4&from=paste&height=104&id=u0ccf3a99&name=image.png&originHeight=188&originWidth=1134&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45101&status=done&style=none&taskId=u5ff22d80-c418-4228-9bb1-80366588dab&title=&width=630.000016689301" alt="image.png"></p><ol><li>注册腾讯地图账号</li><li>添加key值</li></ol><p>注意：添加key值的时候，需要勾选webServeAPI<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/22278242/1672748776655-f5b73bc7-4d06-4d75-8a8b-4d115bf6882e.png#averageHue=%23fcfcfc&clientId=u01a0f796-752b-4&from=paste&height=339&id=uc84dcf84&name=image.png&originHeight=1178&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&size=150702&status=done&style=none&taskId=u586d3a4e-7acc-4441-bf00-ec4fb1661eb&title=&width=285" alt="image.png"><br />需要勾选微信小程序：添加自己的小程序的appid</p><ol start="3"><li>小程序服务器域名配置</li></ol><p>参考当前文章：<a href="https://lbs.qq.com/service/webService/webServiceGuide/miniprogram">https://lbs.qq.com/service/webService/webServiceGuide/miniprogram</a></p><ol start="4"><li>操作代码</li></ol><p>同地图的显示，需要配置app.json中的permission<br />如果真机测试获取不到效果，需要添加requiredPrivateInfos</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;permission&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;scope.userLocation&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;你的位置信息将用于小程序位置接口的效果展示&quot;</span><br>    &#125;<br>&#125;,<br><span class="hljs-string">&quot;requiredPrivateInfos&quot;</span>: [<span class="hljs-string">&quot;getLocation&quot;</span>, <span class="hljs-string">&quot;chooseLocation&quot;</span>] <span class="hljs-comment">// 在手机上获取地图的时候，需要添加</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span>;<br>    wx.<span class="hljs-title function_">getLocation</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;gcj02&#x27;</span>,<br>      <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-keyword">const</span> latitude = res.<span class="hljs-property">latitude</span><br>        <span class="hljs-keyword">const</span> longitude = res.<span class="hljs-property">longitude</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(latitude, longitude);<br>        <span class="hljs-keyword">let</span> key = <span class="hljs-string">&quot;FTHBZ-3FYRP-7OJDL-V42LI-VF5WS-KOFVM&quot;</span> <span class="hljs-comment">// 自己的腾讯地图key值</span><br>        self.<span class="hljs-title function_">getCityInfo</span>(latitude, longitude, key)<br>      &#125;,<br>      <span class="hljs-title function_">fail</span>(<span class="hljs-params">error</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;获取位置信息失败...&quot;</span>)<br>      &#125;<br>    &#125;)<br>  &#125;,<br><br><br><span class="hljs-title function_">getCityInfo</span>(<span class="hljs-params">lat, lng, mapKey, callback</span>) &#123;<br>    <span class="hljs-comment">// 逆位置解析：根据经纬度，获取地址名称</span><br>    <span class="hljs-comment">// 位置解析：根据地址名称，获取经纬度</span><br>    <span class="hljs-comment">// 逆位置解析</span><br>    <span class="hljs-comment">// https://lbs.qq.com/webservice_v1/guide-gcoder.html</span><br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`https://apis.map.qq.com/ws/geocoder/v1/?location=<span class="hljs-subst">$&#123;lat&#125;</span>,<span class="hljs-subst">$&#123;lng&#125;</span>&amp;key=<span class="hljs-subst">$&#123;mapKey&#125;</span>`</span>,<br>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">result</span>);<br>      &#125;<br>    &#125;)<br>  &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 解析结果：（一部分）</span><br><br><span class="hljs-attr">d_info</span>:<br><span class="hljs-attr">adcode</span>: <span class="hljs-string">&quot;410105&quot;</span><br><span class="hljs-attr">city</span>: <span class="hljs-string">&quot;郑州市&quot;</span><br><span class="hljs-attr">city_code</span>: <span class="hljs-string">&quot;156410100&quot;</span><br><span class="hljs-attr">district</span>: <span class="hljs-string">&quot;金水区&quot;</span><br><span class="hljs-attr">location</span>: &#123;<span class="hljs-attr">lat</span>: <span class="hljs-number">34.776218</span>, <span class="hljs-attr">lng</span>: <span class="hljs-number">113.625</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;中国,河南省,郑州市,金水区&quot;</span><br><span class="hljs-attr">nation</span>: <span class="hljs-string">&quot;中国&quot;</span><br><span class="hljs-attr">nation_code</span>: <span class="hljs-string">&quot;156&quot;</span><br><span class="hljs-attr">province</span>: <span class="hljs-string">&quot;河南省&quot;</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br><span class="hljs-attr">address</span>: <span class="hljs-string">&quot;河南省郑州市金水区金水东路&quot;</span><br><span class="hljs-attr">address_component</span>:<br><span class="hljs-attr">city</span>: <span class="hljs-string">&quot;郑州市&quot;</span><br><span class="hljs-attr">district</span>: <span class="hljs-string">&quot;金水区&quot;</span><br><span class="hljs-attr">nation</span>: <span class="hljs-string">&quot;中国&quot;</span><br><span class="hljs-attr">province</span>: <span class="hljs-string">&quot;河南省&quot;</span><br><span class="hljs-attr">street</span>: <span class="hljs-string">&quot;金水东路&quot;</span><br><span class="hljs-attr">street_number</span>: <span class="hljs-string">&quot;金水东路&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FileReader</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/45-FileReader/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/45-FileReader/</url>
    
    <content type="html"><![CDATA[<p>基于该对象，我们可以实现对选中的读取操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>()<br></code></pre></td></tr></table></figure><p>fileReader读取的文件需要从input中获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">input.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> file = <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>] <span class="hljs-comment">// 就是我们选中的文件</span><br><br>  fileReader.<span class="hljs-title function_">readAsDataURL</span>(file) <span class="hljs-comment">// 读是一个异步操作。需要在fileReader的onload事件中获取对应的结果</span><br>&#125;<br></code></pre></td></tr></table></figure><p>给fileReader绑定onload事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fileReader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// this.result 就是我们的读取的结果 是一个base64</span><br>  <span class="hljs-comment">// 然后我们把base64放到图片的src中，就可以在img上显示图片</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="e4ORD"></a></p><h2 id="限制上传类型"><a href="#限制上传类型" class="headerlink" title="限制上传类型"></a>限制上传类型</h2><p><a name="e9b3Y"></a></p><h3 id="html标签上的限制"><a href="#html标签上的限制" class="headerlink" title="html标签上的限制"></a>html标签上的限制</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;.png,.jpeg,.jpg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="TFsu7"></a></p><h3 id="js中的限制"><a href="#js中的限制" class="headerlink" title="js中的限制"></a>js中的限制</h3><p>file.type就是我们选择到的文件的类型，通过这样的操作，可以判断，符合某些类型时，我们才通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fileInput.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-comment">// 获取到我们选中的文件</span><br>  <span class="hljs-keyword">let</span> file = <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]<br><br>  <span class="hljs-keyword">if</span> (file.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;image/png&#x27;</span> || file.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;image/jpeg&quot;</span> || file.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;image/jpg&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 利用FileReader读文件</span><br>    reader.<span class="hljs-title function_">readAsDataURL</span>(file)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;格式不正确&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取到fileInput</span><br><span class="hljs-keyword">let</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[type=&quot;file&quot;]&#x27;</span>)<br><span class="hljs-keyword">let</span> imgList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.img-list&#x27;</span>)<br><br><span class="hljs-comment">// 生成一个fileReader</span><br><span class="hljs-keyword">let</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>()<br><br>reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;读取完成&quot;</span>)<br><br>  <span class="hljs-comment">// 从reader.result中获取到dataurl</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span>)<br><br>  <span class="hljs-comment">// 当读取到内容时，生成一个img的DOM对象，然后插入到</span><br>  <span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>  img.<span class="hljs-property">src</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span><br><br>  imgList.<span class="hljs-title function_">appendChild</span>(img)<br>&#125;<br><br>fileInput.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件状态修改成功&quot;</span>)<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>])<br>  <span class="hljs-comment">// console.log(this.value)</span><br>  <span class="hljs-comment">// console.log(this.files[0])</span><br>  <span class="hljs-comment">// 获取到我们选中的文件</span><br>  <span class="hljs-keyword">let</span> file = <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]<br><br>  <span class="hljs-keyword">if</span> (file.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;image/png&#x27;</span> || file.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;image/jpeg&quot;</span> || file.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;image/jpg&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 利用FileReader读文件</span><br>    reader.<span class="hljs-title function_">readAsDataURL</span>(file)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;格式不正确&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="riY5g"></a></p><h2 id="裁切图片的操作"><a href="#裁切图片的操作" class="headerlink" title="裁切图片的操作"></a>裁切图片的操作</h2><p>实现预览后裁切功能，需要用到canvas</p><ol><li>获取到图片需要裁切位置值，和需要裁切的大小</li><li>利用<code>ctx.drawImage</code>将图片裁切到canvas中</li><li>利用canvas.toDataURL 将canvas转成base64格式</li></ol><ul><li>base64需要上传给后台，进行提交 （没学过数据交互）</li><li>我们现在只需要能够在网页上显示一个img，src为生成的base64即可</li></ul><p>这个例子中涉及到了拖拽效果，通过拖拽，进行图片选择裁切的操作。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662348349382-90601c67-c243-4702-8f3f-f15e7c4e359f.png#clientId=ubb0bee2e-c158-4&from=paste&height=778&id=u2c4ef3ad&name=image.png&originHeight=778&originWidth=1023&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9035&status=done&style=none&taskId=ubf71dffb-d1f7-4640-90cd-a0ed9fd9606&title=&width=1023" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sliceImage</span> (img, x, y) &#123;<br>  <span class="hljs-keyword">let</span> xScale = img.<span class="hljs-property">naturalWidth</span> / img.<span class="hljs-property">width</span><br>  <span class="hljs-keyword">let</span> yScale = img.<span class="hljs-property">naturalHeight</span> / img.<span class="hljs-property">height</span><br>  <br>  <span class="hljs-keyword">let</span> iWidth = <span class="hljs-number">150</span> * xScale<br>  <span class="hljs-keyword">let</span> iHeight = <span class="hljs-number">150</span> * yScale<br><br>  <span class="hljs-keyword">let</span> _x = x * xScale<br>  <span class="hljs-keyword">let</span> _y = y * yScale <br><br>  ctx.<span class="hljs-title function_">drawImage</span>(img, _x, _y, iWidth, iHeight, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>canvas.toDataURL必须在服务器环境下才能使用。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662349378981-7472d227-f781-497f-b442-c1dcac922aaf.png#clientId=ubb0bee2e-c158-4&from=paste&height=28&id=u53d90b68&name=image.png&originHeight=28&originWidth=285&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2923&status=done&style=none&taskId=uccde8252-f63a-4464-a2d4-45dd8fae65f&title=&width=285" alt="image.png">这样的地址下才能使用<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662349391316-aefcf975-5994-4065-b086-f47bcbc1004f.png#clientId=ubb0bee2e-c158-4&from=paste&height=30&id=ud9806223&name=image.png&originHeight=30&originWidth=563&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4546&status=done&style=none&taskId=u6ed4469a-0c44-4dad-bc42-cf3ac52016b&title=&width=563" alt="image.png">这样的不能使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/图片格式&quot;</span>)<br><span class="hljs-comment">// 如果导出的格式jpeg还可以压缩图片。</span><br><span class="hljs-keyword">let</span> data = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/jpeg&quot;</span>, <span class="hljs-number">0.5</span>) <span class="hljs-comment">// 0 - 1 1是不压缩</span><br></code></pre></td></tr></table></figure><p>如果未来我们涉及到图片的裁切、图片格式的修改等操作，就需要用到canvas。<br><a name="Rf5S9"></a></p><h2 id="html2canvas"><a href="#html2canvas" class="headerlink" title="html2canvas"></a>html2canvas</h2><p><a href="http://html2canvas.hertzen.com/">http://html2canvas.hertzen.com/</a><br />在移动端分享海报时可以使用该插件进行绘图操作。绘制图片后，用户可以长按保存图片。<br />想要直接把一个html结构绘制成canvas</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">html2canvas(dom对象).then(canvas =&gt; &#123;<br>  // 这个canvas就是我们绘制出来的canvas，可以直接显示在页面上。<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>6.组件化开发</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/6-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/6-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p><a name="LTs1g"></a></p><h1 id="1-创建新组件"><a href="#1-创建新组件" class="headerlink" title="1.创建新组件"></a>1.创建新组件</h1><ol><li>在根目录创建components文件夹</li><li>创建对应页面的子文件夹 （例： indexpage—存放首页中相关的组件）</li><li>继续在indexpage内创建文件夹  (例： tab—定义tab组件的文件夹)</li><li>在tab上右击–&gt; 新建Component–&gt;输入名字–&gt;回车后会自动生成四个文件</li></ol><p>tab.js<br />tab.json<br />tab.wxml<br />tab.wxss<br><a name="FiVFC"></a></p><h1 id="2-在页面中引入组件"><a href="#2-在页面中引入组件" class="headerlink" title="2.在页面中引入组件"></a>2.在页面中引入组件</h1><p>以index为例， 在index页面中引入该组件</p><ol><li><p>在index.json中配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;x-tab&quot;</span>: <span class="hljs-string">&quot;/components/indexpage/tab/tab&quot;</span><br>  &#125;,<br></code></pre></td></tr></table></figure><p>“x-tab”: 为自定义组件的名称<br />“&#x2F;components&#x2F;indexpage&#x2F;tab&#x2F;tab”： 为组件文件的路径（注意第一个tab 为文件夹，第二个tab为文件名）</p></li><li><p>在index.wxml中使用组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;x-tab&gt;&lt;/x-tab&gt;<br></code></pre></td></tr></table></figure><p><a name="tlwR0"></a></p></li></ol><h1 id="3-编辑组件"><a href="#3-编辑组件" class="headerlink" title="3.编辑组件"></a>3.编辑组件</h1><ol><li>tab.json:  组件中也可引入自己的子组件</li><li>tab.wxml  组件的模板</li><li>tab.wxss  组件的样式 </li><li>重点：tab.js   可实现父子组件传值</li></ol><p>Component() :  创建自定义组件，接受一个 Object 类型的参数。<br />常用参数：<br />1、properties: { }   属性定义，即从父组件接收的数据<br />2、data: {}   私有数据，可用于模板渲染<br />3、 methods: {}  处理函数<br />4、 observer: { } 监听数据的改变   </p><p><a name="W81ey"></a></p><h1 id="4-页面向组件传值"><a href="#4-页面向组件传值" class="headerlink" title="4.页面向组件传值"></a>4.页面向组件传值</h1><ol><li>页面通过自定义属性向组件传值：    &lt;x-tab 自定义属性&#x3D;”值”&gt;</x-tab></li><li>组件通过properties接收页面传来的值  （可在组件的模板中直接使用）  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">properties</span>: &#123;<br>    <span class="hljs-attr">msg</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">goodsId</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-comment">// 数据类型</span><br>      <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> <span class="hljs-comment">// 默认值</span><br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><a name="bPo2Y"></a></li></ol><h1 id="5-自定义tab组件"><a href="#5-自定义tab组件" class="headerlink" title="5.自定义tab组件"></a>5.自定义tab组件</h1><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-bar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">text</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;id&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&#123;&#123;index === cur ?&#x27;active&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;toggle&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">data-index</span>=<span class="hljs-string">&quot;&#123;&#123;index&#125;&#125;&quot;</span></span><br><span class="hljs-tag">      &gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;cur&#125;&#125;----&#123;&#123;list[cur].id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">x-tab</span> <span class="hljs-attr">goodsId</span>=<span class="hljs-string">&quot;&#123;&#123;list[cur].id&#125;&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">x-tab</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">list</span>: [],<br>    <span class="hljs-attr">cur</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>)&#123;<br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:7001/category&#x27;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>      <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>          <span class="hljs-attr">list</span>: res.<span class="hljs-property">data</span><br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-title function_">toggle</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-keyword">let</span> index  = e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">index</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">cur</span>: index<br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="CM7BY"></a></p><h1 id="6-组件向页面传值"><a href="#6-组件向页面传值" class="headerlink" title="6.组件向页面传值"></a>6.组件向页面传值</h1><p>tab.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span>向页面传值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>tab.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">send</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">triggerEvent</span>(<span class="hljs-string">&quot;send&quot;</span>,<span class="hljs-string">&#x27;组件的值&#x27;</span>)<br>    &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>index.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">x-tab</span> <span class="hljs-attr">goodsId</span>=<span class="hljs-string">&quot;&#123;&#123;list[cur].id&#125;&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">bindsend</span>=<span class="hljs-string">&quot;getData&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">x-tab</span>&gt;</span><br></code></pre></td></tr></table></figure><p>html.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getData</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getData&#x27;</span>,e.<span class="hljs-property">detail</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p><a name="zjVoC"></a></p><h1 id="7-组件中生命周期函数"><a href="#7-组件中生命周期函数" class="headerlink" title="7.组件中生命周期函数"></a>7.组件中生命周期函数</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670588351198-71a2890a-034d-4a27-b043-3de041ec68af.png#averageHue=%23cebca2&clientId=u2cee9343-c7f8-4&from=paste&height=456&id=u33f8350f&name=image.png&originHeight=821&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6316373&status=done&style=none&taskId=ua1bd7d02-2e84-48d7-9b4f-80e62a24c29&title=&width=1422.2222598982455" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">lifetimes</span>: &#123;<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;created&#x27;</span>);<br>    &#125;,<br><br>    <span class="hljs-title function_">attached</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;attached&#x27;</span>);<br>    &#125;,<br>     <span class="hljs-comment">// 当组件在页面中用wx:if控制，销毁时可触发</span><br>    <span class="hljs-title function_">detached</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;detached&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mUjyj"></a></p><h1 id="8-组件中的数据监听器"><a href="#8-组件中的数据监听器" class="headerlink" title="8.组件中的数据监听器"></a>8.组件中的数据监听器</h1><p>数据监听器可以用于监听和响应任何属性和数据字段的变化。有时，在一些数据字段被 setData 设置时，需要执行一些操作。<br />例如， this.data.sum 永远是 this.data.numberA 与 this.data.numberB 的和。此时，可以使用数据监听器进行如下实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">attached</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">numberA</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">numberB</span>: <span class="hljs-number">2</span>,<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">observers</span>: &#123;<br>    <span class="hljs-string">&#x27;numberA, numberB&#x27;</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">numberA, numberB</span>) &#123;<br>      <span class="hljs-comment">// 在 numberA 或者 numberB 被设置时，执行这个函数</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">sum</span>: numberA + numberB<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="vNSRX"></a></p><h1 id="9-组件中的插槽"><a href="#9-组件中的插槽" class="headerlink" title="9.组件中的插槽"></a>9.组件中的插槽</h1><p>1.只有一个插槽</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 组件：</span><br><br>&lt;view&gt;<br>  .....<br>  &lt;slot&gt;&lt;/slot&gt;<br>&lt;/view&gt;<br>  <br><span class="hljs-comment">// 页面</span><br>&lt;组件标签&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>插入的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>&lt;/组件标签&gt;<br></code></pre></td></tr></table></figure><p>2.多个插槽<br />组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;view&gt;<br>   .....<br>  &lt;slot name=“c1”&gt;&lt;/slot&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">“c2”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/view&gt;<br></code></pre></td></tr></table></figure><p>页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;组件标签&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">”c1”</span>&gt;</span>插入的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">”c2”</span>&gt;</span>插入的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>&lt;/组件标签&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">options</span>: &#123;<br>    <span class="hljs-attr">multipleSlots</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 在组件定义时的选项中启用多slot支持</span><br>  &#125;,<br>  <span class="hljs-attr">properties</span>: &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>  <span class="hljs-attr">methods</span>: &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>5.常用API</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/5-%E5%B8%B8%E7%94%A8API/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/5-%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<p><a name="rWOLZ"></a></p><h1 id="1-界面"><a href="#1-界面" class="headerlink" title="1.界面"></a>1.界面</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//显示消息提示框</span><br>wx.<span class="hljs-title function_">showToast</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;成功&#x27;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span><br>  &#125;)<br><br><br><span class="hljs-comment">//显示模态对话框</span><br>wx.<span class="hljs-title function_">showModal</span>(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;提示&#x27;</span>,<br>      <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;这是一个模态弹窗&#x27;</span>,<br>      success (res) &#123;<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">confirm</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户点击确定&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">cancel</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户点击取消&#x27;</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br><br><span class="hljs-comment">//显示 loading 提示框。</span><br><span class="hljs-comment">//需主动调用 wx.hideLoading 才能关闭提示框</span><br>wx.<span class="hljs-title function_">showLoading</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;加载中&#x27;</span>,<br>&#125;)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  wx.<span class="hljs-title function_">hideLoading</span>()<br>&#125;, <span class="hljs-number">2000</span>)<br><br><span class="hljs-comment">// 显示操作菜单</span><br>wx.<span class="hljs-title function_">showActionSheet</span>(&#123;<br>  <span class="hljs-attr">itemList</span>: [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>],<br>  success (res) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">tapIndex</span>)<br>  &#125;,<br>  fail (res) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">errMsg</span>)<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><a name="rbqJO"></a></p><h1 id="2-网络"><a href="#2-网络" class="headerlink" title="2.网络"></a>2.网络</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670587600114-d54f58b5-a388-4d54-aa73-7ae5f744e3a1.png#averageHue=%23f8f7f5&clientId=uac8489e4-b98a-4&from=paste&height=343&id=uff197ba0&name=image.png&originHeight=617&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4746917&status=done&style=none&taskId=ua679d68f-64e7-493a-a05e-06a7f3c57d9&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670587603546-5e62cf64-b89e-4790-9b77-362d97a60c5d.png#averageHue=%23f8f6f4&clientId=uac8489e4-b98a-4&from=paste&height=272&id=u0ecd6642&name=image.png&originHeight=489&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3762159&status=done&style=none&taskId=u5a3cdd82-ac71-450f-8844-268efe1ed07&title=&width=1422.2222598982455" alt="image.png"></p><blockquote><p>注意：临时用本地服务器测试，可以在开发者工具右上–&gt;详情–&gt;本地设置，勾选下方即可</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670587615456-ab73fe64-e860-4a7b-8cab-8dec1d32ffba.png#averageHue=%23404040&clientId=uac8489e4-b98a-4&from=paste&height=169&id=uf1e995dc&name=image.png&originHeight=304&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2338883&status=done&style=none&taskId=ub10649e2-4863-4c36-98d5-00b9d8eef3b&title=&width=1422.2222598982455" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发起 HTTPS 网络请求。</span><br>wx.<span class="hljs-title function_">request</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost/api/getGoods&#x27;</span>, <br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;,<br> <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-attr">header</span>: &#123;<br>    <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span> <span class="hljs-comment">// 默认值</span><br>  &#125;,<br>  success (res) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><a name="mSllM"></a></p><h1 id="3-数据缓存（异步）"><a href="#3-数据缓存（异步）" class="headerlink" title="3.数据缓存（异步）"></a>3.数据缓存（异步）</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670587628895-b529c9dc-f8c2-48a1-a7ce-ca335ce91cf5.png#averageHue=%23f7f5f3&clientId=uac8489e4-b98a-4&from=paste&height=262&id=u9f85825a&name=image.png&originHeight=471&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3623677&status=done&style=none&taskId=ub81ebb5f-be11-4d23-9082-793933eb189&title=&width=1422.2222598982455" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670587631126-29934401-2fc6-48dc-af45-37b1be56681e.png#averageHue=%23fcfbfa&clientId=uac8489e4-b98a-4&from=paste&height=241&id=u80ea143c&name=image.png&originHeight=433&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3331334&status=done&style=none&taskId=udaa0924c-4c33-44d5-bbc9-dcb3f33b874&title=&width=1422.2222598982455" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">setStorage</span>(&#123;<br>  <span class="hljs-attr">key</span>:<span class="hljs-string">&quot;name&quot;</span>,<br>  <span class="hljs-attr">data</span>:<span class="hljs-string">&quot;value&quot;</span><br>&#125;)<br><span class="hljs-comment">//移除本地缓存</span><br>wx.<span class="hljs-title function_">removeStorage</span>(&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;key&#x27;</span>,<br>  success (res) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">//获取本地缓存</span><br>wx.<span class="hljs-title function_">getStorage</span>(&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;key&#x27;</span>,<br>  success (res) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">//清理本地缓存</span><br>wx.<span class="hljs-title function_">clearStorage</span>()<br><br></code></pre></td></tr></table></figure><p><a name="TtbPY"></a></p><h1 id="4-数据缓存（同步）"><a href="#4-数据缓存（同步）" class="headerlink" title="4.数据缓存（同步）"></a>4.数据缓存（同步）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//存储本地缓存</span><br> wx.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>)<br><br><span class="hljs-comment">//移除本地缓存</span><br> wx.<span class="hljs-title function_">removeStorageSync</span>(<span class="hljs-string">&#x27;key&#x27;</span>)<br><br><span class="hljs-comment">//获取本地缓存</span><br> <span class="hljs-keyword">var</span> value = wx.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;key&#x27;</span>)<br><br><span class="hljs-comment">//清除本地缓存</span><br>  wx.<span class="hljs-title function_">clearStorageSync</span>()<br><br></code></pre></td></tr></table></figure><blockquote><p>关于同步缓存和异步缓存的区别:<br>以Sync（同步，同时）结尾的都是同步缓存，二者的区别是，异步不会阻塞当前任务，同步缓存直到同步方法处理完才能继续往下执行。</p></blockquote><p><a name="PEUHp"></a></p><h1 id="5-路由跳转方法【编程式导航】"><a href="#5-路由跳转方法【编程式导航】" class="headerlink" title="5.路由跳转方法【编程式导航】"></a>5.路由跳转方法【编程式导航】</h1><ol><li><p>wx.navigateTo <br />用于保留当前页面、跳转到应用内的某个页面，使用 wx.navigateBack可以返回到原页面。<br />对于页面不是特别多的小程序，通常推荐使用 wx.navigateTo进行跳转， 以便返回原页面，以提高加载速度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>     <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/index/index?id=3&#x27;</span>,<br>&#125;)<br><br>在index中<br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params">options</span>)&#123;<br>    <span class="hljs-comment">//通过options获取数据</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>wx.redirectTo</p></li></ol><p>当页面过多时，被保留页面会挤占微信分配给小程序的内存，或是达到微信所限制的 5 层页面栈。这时，我们应该考虑选择 wx.redirectTo。wx.redirectTo()用于关闭当前页面，跳转到应用内的某个页面。这样的跳转，可以避免跳转前页面占据运行内存，但返回时页面需要重新加载，增加了返回页面的显示时间。 </p><ol start="3"><li>wx.reLaunch</li></ol><p>wx.reLaunch()与 wx.redirectTo()的用途基本相同， 只是 wx.reLaunch()先关闭了内存中所有保留的页面，再跳转到目标页面。</p><ol start="4"><li>wx.switchTab</li></ol><p>对于跳转到 tabbar 的页面，最好选择 wx.switchTab()，它会先关闭所有非 tab bar 的页面。<br />其次，也可以选择 wx.reLaunch()，它也能实现从非 tab bar 跳转到 tab bar，或在 tab bar 间跳转，效果等同 wx.switchTab()。<br />使用wx.navigateTo 来跳转到 tab bar，则会跳转失败。</p><ol start="5"><li>wx.navigateBack</li></ol><p>用于关闭当前页面，并返回上一页面或多级页面。<br />开发者可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层。<br />这个 API 需要填写的参数只有 delta，表示要返回的页面数。若 delta 的取值大于现有可返回页面数时，则返回到用户进入小程序的第一个页<br />面。当不填写 delta 的值时，就默认其为 1（注意，默认并非取 0），即返回上一页面。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">navigateBack</span>(&#123;<br>  <span class="hljs-attr">delta</span>:<span class="hljs-number">2</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="6"><li>跳转到某个小程序，需配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">navigateToMiniProgram</span>(&#123;<br>  <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;page/index/index?id=123&#x27;</span>,<br>  <span class="hljs-comment">//额外数据</span><br>  <span class="hljs-attr">extraData</span>: &#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">envVersion</span>: <span class="hljs-string">&#x27;develop&#x27;</span>,<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-comment">// 打开成功</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><a name="NS5Fw"></a></li></ol><h1 id="6-导航组件-navigator【声明式导航】"><a href="#6-导航组件-navigator【声明式导航】" class="headerlink" title="6.导航组件 navigator【声明式导航】"></a>6.导航组件 navigator【声明式导航】</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">//等同： wx.navigateTo（open-type=&quot;navigate&quot;可以省略)<br><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/pages/detail/detail?title=navigate&quot;</span>  <span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;navigate&quot;</span>&gt;</span>跳转到新页面<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br><br>//等同：wx.redirectTo<br><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/pages/detail/detail?title=navigate&quot;</span> <span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;redirect&quot;</span> &gt;</span>在当前页打开<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br><br>//等同：wx.relaunch<br><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/pages/detail/detail?title=navigate&quot;</span> <span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;reLaunch&quot;</span> &gt;</span>在当前页打开<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br><br>//等同：wx.switchTab<br><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/pages/index/index&quot;</span> <span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;switchTab&quot;</span> &gt;</span>切换 Tab<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br><br>//等同：wx.navigateToMiniProgram<br><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;miniProgram&quot;</span> <span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;navigate&quot;</span> <span class="hljs-attr">app-id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">extra-data</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;release&quot;</span>&gt;</span>打开绑定的小程序<br></code></pre></td></tr></table></figure><p><a name="vOUCg"></a></p><h1 id="7-微信小程序实现API封装"><a href="#7-微信小程序实现API封装" class="headerlink" title="7.微信小程序实现API封装"></a>7.微信小程序实现API封装</h1><p>参考链接：<a href="https://blog.csdn.net/DDYF0808/article/details/126380090">https://blog.csdn.net/DDYF0808/article/details/126380090</a></p><p><a name="n87wQ"></a></p><h1 id="8-微信小程序上传图片"><a href="#8-微信小程序上传图片" class="headerlink" title="8.微信小程序上传图片"></a>8.微信小程序上传图片</h1><p>参考链接：<a href="https://blog.csdn.net/BubbleABC/article/details/122962876">https://blog.csdn.net/BubbleABC/article/details/122962876</a></p><p><a name="fjYjX"></a></p><h1 id="9-设置TabBar角标"><a href="#9-设置TabBar角标" class="headerlink" title="9.设置TabBar角标"></a>9.设置TabBar角标</h1><p>当前案例中，是将数据放在了本地缓存中了，通过判断本地缓存的商品的数量，来确定商品的数量<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/22278242/1678259356090-a195bef7-dbdd-4e46-941f-3dd66af5995c.png#averageHue=%23fbfbfb&clientId=ue1f0cf22-2c5c-4&from=paste&height=646&id=uaefdab8a&name=image.png&originHeight=1162&originWidth=656&originalType=binary&ratio=1.7999999523162842&rotation=0&showTitle=false&size=69944&status=done&style=none&taskId=ucb09887d-1e96-4dd9-83b8-090e1f0b5f7&title=&width=364.44445409892546" alt="image.png"><br />语法格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 添加</span><br>wx.<span class="hljs-title function_">setTabBarBadge</span>(&#123;<br>  <span class="hljs-attr">index</span>:<span class="hljs-number">1</span>,<br>  <span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;2&#x27;</span><br>&#125;)<br><span class="hljs-comment">// 移除</span><br>wx.<span class="hljs-title function_">removeTabBarBadge</span>(&#123; <span class="hljs-comment">//移除taBar右上角的文本</span><br>   <span class="hljs-attr">index</span>: <span class="hljs-number">1</span>,<span class="hljs-comment">//tabBar下标</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>index.js文件<br />注意：角标默认为红色，目前官方暂不支持修改角标颜色，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;商品1&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;￥100&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;商品2&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;￥100&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;商品3&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;￥100&#x27;</span>&#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> cache = wx.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;_list&quot;</span>);<br>    <span class="hljs-keyword">if</span>(cache.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      wx.<span class="hljs-title function_">setTabBarBadge</span>(&#123;<br>        <span class="hljs-attr">index</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 表示给第几个tabbar添加角标</span><br>        <span class="hljs-attr">text</span>: cache.<span class="hljs-property">length</span> + <span class="hljs-string">&quot;&quot;</span>,<br>      &#125;)<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;index-onLoad&#x27;</span>);<br>  &#125;,<br>  <span class="hljs-attr">addOrder</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">// 获取点击元素的下表index值</span><br>    <span class="hljs-keyword">let</span> index = e.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">index</span>;<br>    <span class="hljs-comment">// 根据下标找到对应的数据</span><br>    <span class="hljs-keyword">let</span> item = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>[index];<br>    <span class="hljs-comment">// 判断缓存中是否有数据，没有数据创建空数据</span><br>    <span class="hljs-keyword">let</span> cache = wx.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;_list&quot;</span>) || [];<br>    <span class="hljs-comment">// 将商品信息添加到数组中</span><br>    cache.<span class="hljs-title function_">push</span>(item);<br>    wx.<span class="hljs-title function_">setTabBarBadge</span>(&#123;<br>      <span class="hljs-attr">index</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-comment">// 通过数组的长度获取购物车商品的数量</span><br>      <span class="hljs-attr">text</span>: cache.<span class="hljs-property">length</span>+<span class="hljs-string">&quot; &quot;</span>,<br>    &#125;)<br>    wx.<span class="hljs-title function_">setStorage</span>(&#123;<br>      <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;_list&#x27;</span>,<br>      <span class="hljs-attr">data</span>: cache,<br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>index.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-bottom:1px solid black;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;item.price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;addOrder&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:green;&quot;</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">&quot;&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span>添加到购物车<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>4.page页面的逻辑</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/4-page%E9%A1%B5%E9%9D%A2%E7%9A%84%E9%80%BB%E8%BE%91/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/4-page%E9%A1%B5%E9%9D%A2%E7%9A%84%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-3-wxml语法date-2020-10-30-20-30-26tags"><a href="#title-3-wxml语法date-2020-10-30-20-30-26tags" class="headerlink" title="title: 3.wxml语法date: 2020-10-30 20:30:26tags:"></a>title: 3.wxml语法<br>date: 2020-10-30 20:30:26<br>tags:</h2><p><a name="jc7j8"></a></p><h1 id="1-page页面"><a href="#1-page页面" class="headerlink" title="1.page页面"></a>1.page页面</h1><ol><li>在app.json的pages中可以添加或删除页面</li><li>每个页面由四个文件组件：</li></ol><p></p><p><em>.js ： 页面逻辑<br /></em>.json: 页面配置，可覆盖app.json中的配置<br /><em>.wxml:  页面结构<br /></em>.wxss:  页面样式</p><ol start="3"><li>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。<br><a name="O6vR6"></a></li></ol><h1 id="2-WXML中常用组件"><a href="#2-WXML中常用组件" class="headerlink" title="2.WXML中常用组件"></a>2.WXML中常用组件</h1><ol><li>视图组件：  <view></view></li><li>文本组件：  <text></text></li><li>按钮组件：  <button></button></li><li>图片组件：  <image src=””></image></li><li><block></block>并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。 </li><li>图标组件： <icon></li></ol><p>BUG：wran按钮不能显示红色背景的原因<br />新版中的<strong>button的type为warn时，只是改变了文字颜色，没有改变button背景色</strong><br />可以通过修改style:’v2’来解决<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1672279323903-ae8f778c-b0e2-42a0-8ffb-541483a7262a.png#averageHue=%23f8f8f8&clientId=u737da525-7691-4&from=paste&height=152&id=u6d29c521&name=image.png&originHeight=274&originWidth=1366&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59895&status=done&style=none&taskId=uc3a52226-e6a9-4e23-aa9b-f70635edcb5&title=&width=758.8889089925794" alt="image.png"><br><a name="JGg1m"></a></p><h1 id="3-数据绑定"><a href="#3-数据绑定" class="headerlink" title="3.数据绑定"></a>3.数据绑定</h1><p>WXML 中的动态数据均来自对应 Page 的 data。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575262668-b6377a6d-6126-4a3b-9f38-9192537289d5.png#averageHue=%23b2d9cb&clientId=ucf168e80-f40a-4&from=paste&height=374&id=u390a9a0f&name=image.png&originHeight=1440&originWidth=1839&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7958854&status=done&style=none&taskId=ub748fe1d-0ed8-416e-a57d-3c658b470d7&title=&width=476.99310302734375" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575265806-73c8ec0c-30d3-4cf6-a37e-d6ae4701d90e.png#averageHue=%239bb9cf&clientId=ucf168e80-f40a-4&from=paste&height=410&id=udd7faa8e&name=image.png&originHeight=1440&originWidth=1474&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6379498&status=done&style=none&taskId=u91f583cc-3d03-40c1-8d16-7156fde6cb1&title=&width=419.9930725097656" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575275038-2683fad8-1983-4da8-9e7d-86fe9550c01b.png#averageHue=%239bbad2&clientId=ucf168e80-f40a-4&from=paste&height=392&id=u8ff1affe&name=image.png&originHeight=1440&originWidth=1670&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7227584&status=done&style=none&taskId=u103668ff-2f2c-49c1-a324-ffb482687c4&title=&width=454.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575278535-12abaa12-d34b-4340-b1eb-9c8bd6303cb1.png#averageHue=%23d9dacb&clientId=ucf168e80-f40a-4&from=paste&height=229&id=u1144a4a3&name=image.png&originHeight=918&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7062637&status=done&style=none&taskId=uc2df528f-d282-44da-a140-14bd7c06817&title=&width=638.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575279474-63d65ccb-e55f-48da-9613-5e64e871435c.png#averageHue=%23d6c5a9&clientId=ucf168e80-f40a-4&from=paste&height=245&id=u321108b5&name=image.png&originHeight=986&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7585793&status=done&style=none&taskId=ud6478a65-8bf0-4a8b-846c-8fbc8ce5949&title=&width=636.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575279661-976c79b9-95a6-4b7e-9317-ab22bdf9a000.png#averageHue=%23c3d6d4&clientId=ucf168e80-f40a-4&from=paste&height=169&id=u381d7ea9&name=image.png&originHeight=869&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6685656&status=done&style=none&taskId=u1bbc02bd-3b9c-48d6-97af-75054f17bb7&title=&width=498.99481201171875" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575280291-5b382589-4660-49c8-86f5-2f533ca04d7f.png#averageHue=%23a1c3d5&clientId=ucf168e80-f40a-4&from=paste&height=447&id=u05be81d0&name=image.png&originHeight=1440&originWidth=1565&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6773254&status=done&style=none&taskId=u64c81f32-04b6-44e3-958e-b913782f452&title=&width=485.99481201171875" alt="image.png"><br><a name="TTobX"></a></p><h1 id="4-列表渲染"><a href="#4-列表渲染" class="headerlink" title="4.列表渲染"></a>4.列表渲染</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575282359-0e624513-a65c-4ff4-a165-53355359316a.png#averageHue=%23a4c1d2&clientId=ucf168e80-f40a-4&from=paste&height=381&id=u04f37d17&name=image.png&originHeight=1440&originWidth=1821&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7880969&status=done&style=none&taskId=u2776aa7e-75f1-4160-988e-fc8018dac8a&title=&width=481.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575283221-3b693236-2a90-4530-9ed5-c01404b5794b.png#averageHue=%23abc6d6&clientId=ucf168e80-f40a-4&from=paste&height=162&id=u871e88fb&name=image.png&originHeight=698&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5370085&status=done&style=none&taskId=ue142f3fd-7705-4571-a338-80d8c0aec2e&title=&width=593.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575288641-fab81d67-0024-4a54-878c-bf6ff3a4afa7.png#averageHue=%23ccdfe2&clientId=ucf168e80-f40a-4&from=paste&height=176&id=uf4988d48&name=image.png&originHeight=754&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5800922&status=done&style=none&taskId=u9101d246-d7f7-440c-b542-51aad091d86&title=&width=596.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575298216-c2820a36-9f8b-4686-a4fb-7b1f3afdbd71.png#averageHue=%23f6f4f2&clientId=ucf168e80-f40a-4&from=paste&height=228&id=u8b5749d5&name=image.png&originHeight=962&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7401155&status=done&style=none&taskId=u901977e3-f183-40bd-a207-625d51a5c07&title=&width=606.998291015625" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;view  <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">&quot;id&quot;</span> &gt; &#123;&#123;item.<span class="hljs-property">id</span>&#125;&#125; &lt;/view&gt;<br><br><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">arr</span>: [“a”,”b”,”c”]<br>&#125;<br>&lt;view  <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;arr&#125;&#125;&quot;</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">&quot;*this&quot;</span> &gt; &#123;&#123;item&#125;&#125; &lt;/view&gt;<br></code></pre></td></tr></table></figure><p><a name="CrDGt"></a></p><h1 id="5-条件渲染"><a href="#5-条件渲染" class="headerlink" title="5.条件渲染"></a>5.条件渲染</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575334568-7e154697-b783-4545-88f0-faf3c22e36e8.png#averageHue=%23cededd&clientId=ucf168e80-f40a-4&from=paste&height=340&id=u9d3bc29c&name=image.png&originHeight=1440&originWidth=1841&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7967506&status=done&style=none&taskId=ufa201707-cf01-42f1-9a8f-061d9baca23&title=&width=434.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575336698-50c8cae4-767c-4b3f-a13b-20d7455beff9.png#averageHue=%23c8d6d2&clientId=ucf168e80-f40a-4&from=paste&height=191&id=u4a61bcb1&name=image.png&originHeight=814&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6262524&status=done&style=none&taskId=u0d8d1724-6e26-4ad9-bf6e-acbdb9f764f&title=&width=601.998291015625" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;view hidden=<span class="hljs-string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;&#123;&#123;newNum&#125;&#125;&lt;/view&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575340271-975cc97e-da37-4064-a537-161aa37b9539.png#averageHue=%23f7f5f3&clientId=ucf168e80-f40a-4&from=paste&height=438&id=uf2d030e2&name=image.png&originHeight=789&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6070181&status=done&style=none&taskId=u98fd39bd-f286-4813-a6ae-963fe248d10&title=&width=1422.2222598982455" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>canvas</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/44-canvas/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/44-canvas/</url>
    
    <content type="html"><![CDATA[<p>在HTML5新增新的标签，名为画布，可以使用JS在上面完成对应的画的操作。正常情况我们可以把它当成一个img看待。<br><a name="waiqp"></a></p><h2 id="如何使用canvas"><a href="#如何使用canvas" class="headerlink" title="如何使用canvas"></a>如何使用canvas</h2><p><a name="p8Roi"></a></p><h3 id="HTML中使用canvas标签"><a href="#HTML中使用canvas标签" class="headerlink" title="HTML中使用canvas标签"></a>HTML中使用canvas标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>canvas默认的宽高是300x150的尺寸，如果想要修改这个值，不能使用css修改，需要直接设置对应的width和height属性，这个是html属性，不是css属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果我们想要设置要给全屏的canvas，需要使用js进行设置，设置为全屏的宽高</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>canvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span><br>canvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span><br></code></pre></td></tr></table></figure><p>当我们设置了全屏后，会有滚动条，原因和img标签一样，行内块元素默认下方会有空白。一定要记得去掉body的margin值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">canvas</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-comment">/* 或者 */</span><br><span class="hljs-selector-tag">canvas</span> &#123;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="v9hls"></a></p><h3 id="JavaScript中进行绘图"><a href="#JavaScript中进行绘图" class="headerlink" title="JavaScript中进行绘图"></a>JavaScript中进行绘图</h3><p>在画布上进行绘制需要使用canvas的方法获取一个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br><span class="hljs-comment">// 获取ctx</span><br><span class="hljs-keyword">let</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面两行代码是固定写法。几乎上所有的绘图操作，都是在ctx对象中的。<br><a name="fMXy4"></a></p><h2 id="如何画"><a href="#如何画" class="headerlink" title="如何画"></a>如何画</h2><p><a name="N3C3y"></a></p><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p>画布的左上角是0， 0的位置，x轴向右为正方向，y轴向下为正方向。<br><a name="c0Tpu"></a></p><h3 id="描边"><a href="#描边" class="headerlink" title="描边"></a>描边</h3><p>我们在绘制好路径后，可以通过<code>ctx.stroke()</code>进行描边操作<br><a name="tOlXp"></a></p><h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><p>我们在绘制好路径后，可以通过<code>ctx.fill()</code>进行填充操作<br><a name="GDoI2"></a></p><h3 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h3><p>可以使用moveTo和lineTo进行划线操作.<br /><code>ctx.moveTo(x, y)</code>指起始点，参数分别指起始点坐标<br /><code>ctx.lineTo(x, y)</code>指终点，参数为终点坐标。<br />设置后，我们还需要通过<code>ctx.stroke()</code>进行描边。<br />线可以跟着画很多条。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br>ctx.<span class="hljs-title function_">stroke</span>()<br></code></pre></td></tr></table></figure><p><a name="nixCY"></a></p><h3 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h3><p>画矩形有很多方法</p><ul><li>ctx.fillRect()</li><li>ctx.strokeRect()</li><li>ctx.rect() 再进行描边或者填充</li><li>clearRect()</li></ul><p>四个方法参数一致，都有四个参数，分别为<code>x, y, w, h</code><br />x, y表示矩形左上角点的坐标。w, h表示宽高</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>) <span class="hljs-comment">// 填充</span><br>ctx.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>) <span class="hljs-comment">// 描边</span><br><br>ctx.<span class="hljs-title function_">rect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>)<br>ctx.<span class="hljs-title function_">fill</span>()<br><span class="hljs-comment">// 或者 </span><br>ctx.<span class="hljs-title function_">rect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>)<br>ctx.<span class="hljs-title function_">stroke</span>()<br></code></pre></td></tr></table></figure><p>最后一个方法，是清除掉一块矩形区域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>清除画布在动画阶段有用。<br />坐标系<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661998891509-9b5153e2-e353-4d22-a8d7-eda5de42a56e.png#clientId=u564888cd-c8cf-4&from=paste&height=539&id=u0c982c0e&name=image.png&originHeight=539&originWidth=1122&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20275&status=done&style=none&taskId=u65ddc924-0563-444c-aace-fd5c0ff26df&title=&width=1122" alt="image.png"><br><a name="Cih6w"></a></p><h3 id="画圆弧"><a href="#画圆弧" class="headerlink" title="画圆弧"></a>画圆弧</h3><p>弧度单位 180deg &#x3D; Math.PI rad<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662003986138-2e19b8a0-c370-48be-a2dc-d328652d41f4.png#clientId=u564888cd-c8cf-4&from=paste&height=189&id=u030dfaef&name=image.png&originHeight=189&originWidth=203&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4355&status=done&style=none&taskId=uc51de5a0-d041-43df-840f-7e5c1777a81&title=&width=203" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">arc</span>(x, y, 半径, 开始弧度, 结束弧度, 是否逆时针)<br><br>ctx.<span class="hljs-title function_">stroke</span>() <span class="hljs-comment">// 描边</span><br>ctx.<span class="hljs-title function_">fill</span>() <span class="hljs-comment">// 填充</span><br></code></pre></td></tr></table></figure><p><a name="tn893"></a></p><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><p>把一个图片或者视频的一帧绘制到canvas上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">drawImage</span>(img或者video的dom对象, 很多参数)<br></code></pre></td></tr></table></figure><p>该方法有三种用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">drawImage</span>(对象, cx, cy)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1662105980949-8acee0c2-1059-40ef-8544-eaf71b7b6f51.png#clientId=u3a5663ea-f4fd-4&from=paste&height=662&id=u3f26fb59&name=image.png&originHeight=662&originWidth=887&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4795&status=done&style=none&taskId=u6021637a-5bdc-4645-8866-9dc0e1ee3db&title=&width=887" alt="image.png"><br />该操作不会对图片进行缩放，直接把原尺寸放在canvas对应的位置上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">drawImage</span>(image, cx, cy, cw, ch)<br></code></pre></td></tr></table></figure><p>cx、cy表示canvas上的位置<br />cw表示在canvas上绘制的图片宽度<br />ch表示在canvas上绘制的图片高度<br />这个操作会把图片完整绘制，进行缩放，如果canvas不够大，就只显示canvas的大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">drawImage</span>(image, sx, sy, sw, sh, cx, cy, cw, ch)<br></code></pre></td></tr></table></figure><p>这个操作，可以把图片上某个区域裁切，然后画到canvas上。</p><p><a name="xqS8R"></a></p><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p><a name="j9NH6"></a></p><h3 id="描边颜色"><a href="#描边颜色" class="headerlink" title="描边颜色"></a>描边颜色</h3><p>通过设置<code>ctx.strokStyle = &quot;颜色色值&quot;</code>就可以把当前path中的描边颜色修改<br><a name="fdrr6"></a></p><h3 id="填充颜色"><a href="#填充颜色" class="headerlink" title="填充颜色"></a>填充颜色</h3><p>通过设置<code>ctx.fillStyle = &quot;颜色色值&quot;</code>就可以把当前path中的填充颜色修改<br><a name="ebwLI"></a></p><h2 id="canvas中动画的原理是什么"><a href="#canvas中动画的原理是什么" class="headerlink" title="canvas中动画的原理是什么"></a>canvas中动画的原理是什么</h2><p>canvas中的动画原理和dom动画原理不一样，DOM动画是改变位置或者属性即可，canvas需要先清除画布内容再重新绘制。<br><a name="G2Pr1"></a></p><h2 id="QRCode-js"><a href="#QRCode-js" class="headerlink" title="QRCode.js"></a>QRCode.js</h2><p>利用一定的规则，把文本变成二维码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">QRCode</span>(要生成到哪个元素中, <span class="hljs-string">&quot;文本&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>3.wxml语法</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/3-wxml%E8%AF%AD%E6%B3%95/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/3-wxml%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><a name="jc7j8"></a></p><h1 id="1-page页面"><a href="#1-page页面" class="headerlink" title="1.page页面"></a>1.page页面</h1><ol><li>在app.json的pages中可以添加或删除页面</li><li>每个页面由四个文件组件：</li></ol><p></p><p><em>.js ： 页面逻辑<br /></em>.json: 页面配置，可覆盖app.json中的配置<br /><em>.wxml:  页面结构<br /></em>.wxss:  页面样式</p><ol start="3"><li>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。<br><a name="O6vR6"></a></li></ol><h1 id="2-WXML中常用组件"><a href="#2-WXML中常用组件" class="headerlink" title="2.WXML中常用组件"></a>2.WXML中常用组件</h1><ol><li>视图组件：  <view></view></li><li>文本组件：  <text></text></li><li>按钮组件：  <button></button></li><li>图片组件：  <image src=””></image></li><li><block></block>并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。 </li><li>图标组件： <icon></li></ol><p>BUG：wran按钮不能显示红色背景的原因<br />新版中的<strong>button的type为warn时，只是改变了文字颜色，没有改变button背景色</strong><br />可以通过修改style:’v2’来解决<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1672279323903-ae8f778c-b0e2-42a0-8ffb-541483a7262a.png#averageHue=%23f8f8f8&clientId=u737da525-7691-4&from=paste&height=152&id=u6d29c521&name=image.png&originHeight=274&originWidth=1366&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59895&status=done&style=none&taskId=uc3a52226-e6a9-4e23-aa9b-f70635edcb5&title=&width=758.8889089925794" alt="image.png"><br><a name="JGg1m"></a></p><h1 id="3-数据绑定"><a href="#3-数据绑定" class="headerlink" title="3.数据绑定"></a>3.数据绑定</h1><p>WXML 中的动态数据均来自对应 Page 的 data。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575262668-b6377a6d-6126-4a3b-9f38-9192537289d5.png#averageHue=%23b2d9cb&clientId=ucf168e80-f40a-4&from=paste&height=374&id=u390a9a0f&name=image.png&originHeight=1440&originWidth=1839&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7958854&status=done&style=none&taskId=ub748fe1d-0ed8-416e-a57d-3c658b470d7&title=&width=476.99310302734375" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575265806-73c8ec0c-30d3-4cf6-a37e-d6ae4701d90e.png#averageHue=%239bb9cf&clientId=ucf168e80-f40a-4&from=paste&height=410&id=udd7faa8e&name=image.png&originHeight=1440&originWidth=1474&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6379498&status=done&style=none&taskId=u91f583cc-3d03-40c1-8d16-7156fde6cb1&title=&width=419.9930725097656" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575275038-2683fad8-1983-4da8-9e7d-86fe9550c01b.png#averageHue=%239bbad2&clientId=ucf168e80-f40a-4&from=paste&height=392&id=u8ff1affe&name=image.png&originHeight=1440&originWidth=1670&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7227584&status=done&style=none&taskId=u103668ff-2f2c-49c1-a324-ffb482687c4&title=&width=454.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575278535-12abaa12-d34b-4340-b1eb-9c8bd6303cb1.png#averageHue=%23d9dacb&clientId=ucf168e80-f40a-4&from=paste&height=229&id=u1144a4a3&name=image.png&originHeight=918&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7062637&status=done&style=none&taskId=uc2df528f-d282-44da-a140-14bd7c06817&title=&width=638.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575279474-63d65ccb-e55f-48da-9613-5e64e871435c.png#averageHue=%23d6c5a9&clientId=ucf168e80-f40a-4&from=paste&height=245&id=u321108b5&name=image.png&originHeight=986&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7585793&status=done&style=none&taskId=ud6478a65-8bf0-4a8b-846c-8fbc8ce5949&title=&width=636.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575279661-976c79b9-95a6-4b7e-9317-ab22bdf9a000.png#averageHue=%23c3d6d4&clientId=ucf168e80-f40a-4&from=paste&height=169&id=u381d7ea9&name=image.png&originHeight=869&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6685656&status=done&style=none&taskId=u1bbc02bd-3b9c-48d6-97af-75054f17bb7&title=&width=498.99481201171875" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575280291-5b382589-4660-49c8-86f5-2f533ca04d7f.png#averageHue=%23a1c3d5&clientId=ucf168e80-f40a-4&from=paste&height=447&id=u05be81d0&name=image.png&originHeight=1440&originWidth=1565&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6773254&status=done&style=none&taskId=u64c81f32-04b6-44e3-958e-b913782f452&title=&width=485.99481201171875" alt="image.png"><br><a name="TTobX"></a></p><h1 id="4-列表渲染"><a href="#4-列表渲染" class="headerlink" title="4.列表渲染"></a>4.列表渲染</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575282359-0e624513-a65c-4ff4-a165-53355359316a.png#averageHue=%23a4c1d2&clientId=ucf168e80-f40a-4&from=paste&height=381&id=u04f37d17&name=image.png&originHeight=1440&originWidth=1821&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7880969&status=done&style=none&taskId=u2776aa7e-75f1-4160-988e-fc8018dac8a&title=&width=481.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575283221-3b693236-2a90-4530-9ed5-c01404b5794b.png#averageHue=%23abc6d6&clientId=ucf168e80-f40a-4&from=paste&height=162&id=u871e88fb&name=image.png&originHeight=698&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5370085&status=done&style=none&taskId=ue142f3fd-7705-4571-a338-80d8c0aec2e&title=&width=593.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575288641-fab81d67-0024-4a54-878c-bf6ff3a4afa7.png#averageHue=%23ccdfe2&clientId=ucf168e80-f40a-4&from=paste&height=176&id=uf4988d48&name=image.png&originHeight=754&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5800922&status=done&style=none&taskId=u9101d246-d7f7-440c-b542-51aad091d86&title=&width=596.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575298216-c2820a36-9f8b-4686-a4fb-7b1f3afdbd71.png#averageHue=%23f6f4f2&clientId=ucf168e80-f40a-4&from=paste&height=228&id=u8b5749d5&name=image.png&originHeight=962&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7401155&status=done&style=none&taskId=u901977e3-f183-40bd-a207-625d51a5c07&title=&width=606.998291015625" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;view  <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">&quot;id&quot;</span> &gt; &#123;&#123;item.<span class="hljs-property">id</span>&#125;&#125; &lt;/view&gt;<br><br><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">arr</span>: [“a”,”b”,”c”]<br>&#125;<br>&lt;view  <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;arr&#125;&#125;&quot;</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">&quot;*this&quot;</span> &gt; &#123;&#123;item&#125;&#125; &lt;/view&gt;<br></code></pre></td></tr></table></figure><p><a name="CrDGt"></a></p><h1 id="5-条件渲染"><a href="#5-条件渲染" class="headerlink" title="5.条件渲染"></a>5.条件渲染</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575334568-7e154697-b783-4545-88f0-faf3c22e36e8.png#averageHue=%23cededd&clientId=ucf168e80-f40a-4&from=paste&height=340&id=u9d3bc29c&name=image.png&originHeight=1440&originWidth=1841&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7967506&status=done&style=none&taskId=ufa201707-cf01-42f1-9a8f-061d9baca23&title=&width=434.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575336698-50c8cae4-767c-4b3f-a13b-20d7455beff9.png#averageHue=%23c8d6d2&clientId=ucf168e80-f40a-4&from=paste&height=191&id=u4a61bcb1&name=image.png&originHeight=814&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6262524&status=done&style=none&taskId=u0d8d1724-6e26-4ad9-bf6e-acbdb9f764f&title=&width=601.998291015625" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;view hidden=<span class="hljs-string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;&#123;&#123;newNum&#125;&#125;&lt;/view&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670575340271-975cc97e-da37-4064-a537-161aa37b9539.png#averageHue=%23f7f5f3&clientId=ucf168e80-f40a-4&from=paste&height=438&id=uf2d030e2&name=image.png&originHeight=789&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6070181&status=done&style=none&taskId=u98fd39bd-f286-4813-a6ae-963fe248d10&title=&width=1422.2222598982455" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2.注册小程序</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2-%E6%B3%A8%E5%86%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2-%E6%B3%A8%E5%86%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><a name="d1wjJ"></a></p><h1 id="一-注册小程序的步骤注册"><a href="#一-注册小程序的步骤注册" class="headerlink" title="一.注册小程序的步骤注册"></a>一.注册小程序的步骤注册</h1><p>注册注意事项：</p><ol><li>一个邮箱只能注册一个小程序</li><li>小程序注册成功后，需要进入邮箱进行激活。</li></ol><p>登录步骤：</p><ol><li>登录微信公众平台，<a href="https://mp.weixin.qq.com/2">https://mp.weixin.qq.com/</a></li><li>手机扫码后，在手机上确认登录</li><li>在开发设置中，存储AppID(小程序ID)<br><a name="rqHHU"></a></li></ol><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509725581-aab54fc9-5f50-4b6c-9718-606f805bbcbc.png#averageHue=%23bbe398&clientId=uf05408ed-6fa4-4&from=paste&height=137&id=uc7f38ccb&name=image.png&originHeight=553&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5672509&status=done&style=none&taskId=u35c52cf3-3dd3-496e-9d2f-2d3bf218cd4&title=&width=633.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509734931-65417cea-7435-44d4-908d-3953df644f6d.png#averageHue=%23fcfbfb&clientId=uf05408ed-6fa4-4&from=paste&height=390&id=u0ae64c78&name=image.png&originHeight=1440&originWidth=2228&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12855551&status=done&style=none&taskId=ue3df502e-2c2d-491f-aade-c7efb1aa5c2&title=&width=602.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509739091-1f0190a6-7bde-48bc-aaf9-264bb65cf87c.png#averageHue=%23fdfdfc&clientId=uf05408ed-6fa4-4&from=paste&height=496&id=uaaf989a5&name=image.png&originHeight=1440&originWidth=1700&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9809354&status=done&style=none&taskId=uc1205dd1-c280-4ff4-8a66-3aaf866252a&title=&width=584.998291015625" alt="image.png"><br />这里的邮箱一定不能跟公众号的邮箱重复，要创建一个新邮箱<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509750928-3781f918-d05d-4eba-aa80-cb292d5cb3c0.png#averageHue=%23fcfcfc&clientId=uf05408ed-6fa4-4&from=paste&height=575&id=u9ca20d78&name=image.png&originHeight=1440&originWidth=1462&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8436265&status=done&style=none&taskId=u6ec17998-cccf-408b-9759-d550a4f4538&title=&width=583.998291015625" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509760375-8bd4203d-966d-410b-b78d-1ed7dd6cf4bd.png#averageHue=%23fafafa&clientId=uf05408ed-6fa4-4&from=paste&height=455&id=u7bd37578&name=image.png&originHeight=1440&originWidth=1971&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11372846&status=done&style=none&taskId=u6e3c6c1e-faec-49de-abb7-f3fc93c96e3&title=&width=622.998291015625" alt="image.png"><br />注册国家就是默认的中国大陆；<br />主体类型是个人，需要填写个人信息；<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509776161-500c089b-f010-49ef-a65b-08f1046a016a.png#averageHue=%23fbfbfb&clientId=uf05408ed-6fa4-4&from=paste&height=708&id=u14086e7e&name=image.png&originHeight=1667&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9619200&status=done&style=none&taskId=u1ef8c7fb-5b26-4a46-ac27-5481ea24176&title=&width=611.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509781312-b8436fcc-6d93-4795-aafd-f415ca6a72d5.png#averageHue=%23fcfafa&clientId=uf05408ed-6fa4-4&from=paste&height=564&id=udec4d260&name=image.png&originHeight=1465&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8453594&status=done&style=none&taskId=u6228e967-73c9-4a34-890f-09ee0f97e44&title=&width=553.998291015625" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509789119-0ce322a1-4ed6-414f-a1e3-e8ac2db3dbc8.png#averageHue=%23fdfdfd&clientId=uf05408ed-6fa4-4&from=paste&height=464&id=ub522547a&name=image.png&originHeight=1440&originWidth=1848&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10663212&status=done&style=none&taskId=ud3730b93-6ca8-41df-865c-49ff1f4fea5&title=&width=595.998291015625" alt="image.png"><br><a name="KsCLi"></a></p><h2 id="获取AppID"><a href="#获取AppID" class="headerlink" title="获取AppID"></a>获取AppID</h2><p>是开发者唯一的身份验证，以后小程序的上线，发布，必须要这个ID；如果不发布，只是简单玩一下，就可以不用注册这个APPID，但是里面的一些高级功能还是不能使用，比如：获取用户信息，支付等不能使用；<br />点击登录<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509861189-941f8c7f-9730-450a-9765-7a681fd0ca97.png#averageHue=%238cc381&clientId=uf05408ed-6fa4-4&from=paste&height=359&id=u778340a0&name=image.png&originHeight=1440&originWidth=2540&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14655586&status=done&style=none&taskId=u77b549d7-b8df-4cbe-acb1-6a085888b68&title=&width=632.998291015625" alt="image.png"></p><p>选择账号登陆或者扫一扫二维码登陆<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509923586-9708f76c-691d-4e2e-947a-4282f205f2e2.png#averageHue=%2372b85e&clientId=uf05408ed-6fa4-4&from=paste&height=336&id=ufc100f37&name=image.png&originHeight=1415&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14514537&status=done&style=none&taskId=u2809957e-f5bf-4999-a641-deafcbbf3c3&title=&width=606.998291015625" alt="image.png"></p><p>登陆之后点击开发管理，找到开发设置<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509929212-5a0fcc2e-f571-46ce-ba8d-f477b3122597.png#averageHue=%23c4dfbf&clientId=uf05408ed-6fa4-4&from=paste&height=318&id=ufae8b731&name=image.png&originHeight=1368&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14032427&status=done&style=none&taskId=u0260dd50-b1ff-4f77-950a-1f29a3eb500&title=&width=594.998291015625" alt="image.png"></p><p><a name="GjebW"></a></p><h1 id="二-下载并安装微信开发者工具"><a href="#二-下载并安装微信开发者工具" class="headerlink" title="二.下载并安装微信开发者工具"></a>二.下载并安装微信开发者工具</h1><p>开发—&gt; 工具–&gt;下载<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509965930-4205a561-3df4-42e3-97e9-6a37e7e484f3.png#averageHue=%23b0d9b1&clientId=uf05408ed-6fa4-4&from=paste&height=335&id=u234e4b6f&name=image.png&originHeight=1440&originWidth=2544&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14678667&status=done&style=none&taskId=u01e70de2-f691-4231-a210-62d18f9ffef&title=&width=590.998291015625" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509967528-40fcb53e-942f-4159-94dd-d30bf71fc4f4.png#averageHue=%2373c681&clientId=uf05408ed-6fa4-4&from=paste&height=182&id=uc031e76f&name=image.png&originHeight=791&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8113806&status=done&style=none&taskId=ud544ee69-2204-4306-a0f9-09ffdee36f8&title=&width=587.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509973341-f4f13f4c-980d-4392-a8ae-87dab2ef637e.png#averageHue=%23faf9f9&clientId=uf05408ed-6fa4-4&from=paste&height=491&id=ub6e0a9e3&name=image.png&originHeight=1440&originWidth=1710&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9867048&status=done&style=none&taskId=u0c60cb47-96e3-4fb9-8af9-c2d7d73eac8&title=&width=582.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670509983707-a3633ca3-6f45-4756-9709-3b5aef255ffa.png#averageHue=%2324363c&clientId=uf05408ed-6fa4-4&from=paste&height=280&id=ue7473489&name=image.png&originHeight=1246&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12780999&status=done&style=none&taskId=u8e81dc33-5941-4fca-b337-3a417d8d065&title=&width=574.998291015625" alt="image.png"><br />安装成功之后就会在桌面上看到微信web开发者工具 这个快捷键了，mac和window的图标不太一样<br><a name="AQF6S"></a></p><h1 id="三-创建小程序项目"><a href="#三-创建小程序项目" class="headerlink" title="三.创建小程序项目"></a>三.创建小程序项目</h1><blockquote><ol><li>启动微信开发者工具</li><li>扫码</li><li>创建小程序</li><li>填写信息 （选择不使用云服务）</li></ol></blockquote><ol><li>打开微信开发者工具</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670510137524-2765215c-3e9f-4f73-bcf3-b1c7529a2fbc.png#averageHue=%23243533&clientId=uf05408ed-6fa4-4&from=paste&height=191&id=ua52346d4&name=image.png&originHeight=888&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9108797&status=done&style=none&taskId=u5c97f521-0f2c-4d6d-ac46-18c328e58a5&title=&width=549.998291015625" alt="image.png"></p><ol start="2"><li>第一次打开微信开发者工具的时候，需要进行扫码登陆</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670510158203-07539fa7-0f30-432e-b0e3-4ade1d46c720.png#averageHue=%23858686&clientId=uf05408ed-6fa4-4&from=paste&height=464&id=u99dd1396&name=image.png&originHeight=2081&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12008106&status=done&style=none&taskId=u7cba2137-58b2-4541-b609-53c535824bf&title=&width=320.9930725097656" alt="image.png"><br />3）添加小程序<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670510186332-ae93dde1-b6f8-4606-b21e-90a55ab90687.png#averageHue=%23313030&clientId=uf05408ed-6fa4-4&from=paste&height=390&id=u0a58181b&name=image.png&originHeight=1440&originWidth=1918&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11067065&status=done&style=none&taskId=u5981f119-cd1d-4cf1-b281-e7dad557bfb&title=&width=518.998291015625" alt="image.png"><br />4）创建小程序<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670510201941-8d8fb693-e106-4393-90c4-2d531caa50cb.png#averageHue=%23323131&clientId=uf05408ed-6fa4-4&from=paste&height=243&id=uaee43e97&name=image.png&originHeight=1195&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12257872&status=done&style=none&taskId=uf92970ad-2361-4a46-9415-49836d31af1&title=&width=520.998291015625" alt="image.png"><br />5）创建项目<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670510211864-d982487c-f41d-4aaf-b4fe-1bfe1229a26f.png#averageHue=%23353333&clientId=uf05408ed-6fa4-4&from=paste&height=345&id=u4b4b66eb&name=image.png&originHeight=1440&originWidth=1918&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11067065&status=done&style=none&taskId=u00c36ff4-89bc-41ca-95c7-270f68e0710&title=&width=458.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670510220921-30b54415-f9c1-4b88-ae51-cb166bee83ac.png#averageHue=%23565555&clientId=uf05408ed-6fa4-4&from=paste&height=303&id=u21f622c4&name=image.png&originHeight=1440&originWidth=2192&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12647861&status=done&style=none&taskId=ubede1822-154b-456c-add0-59fa75e4c1a&title=&width=460.998291015625" alt="image.png"><br />创建成功的页面就是这样的<br />最左边是小程序洁面，并且可以用你自己的微信来进行授权，我的默认就是我的微信，你们的可能需要点击进行授权<br><a name="kazFz"></a></p><h1 id="四-项目初始化目录结构"><a href="#四-项目初始化目录结构" class="headerlink" title="四.项目初始化目录结构"></a>四.项目初始化目录结构</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670510314515-0598b037-7f61-489f-8af1-f82311a3e592.png#averageHue=%232d2d22&clientId=uf05408ed-6fa4-4&from=paste&height=416&id=u841cb1f2&name=image.png&originHeight=1440&originWidth=1469&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6357857&status=done&style=none&taskId=u37c75ff5-7a15-44f3-aa31-0634e8bc4c2&title=&width=423.998291015625" alt="image.png"><br><a name="FcoK4"></a></p><h1 id="五-小程序全局配置-app-json"><a href="#五-小程序全局配置-app-json" class="headerlink" title="五.小程序全局配置 app.json"></a>五.小程序全局配置 app.json</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670508149270-603294f3-f8e6-4764-9ac9-6507d4bd8ac8.png#averageHue=%23f7f5f4&clientId=uf05408ed-6fa4-4&from=paste&height=65&id=ud6728ee4&name=image.png&originHeight=283&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2177317&status=done&style=none&taskId=u427b0e39-3aa1-4403-8bea-b6cdee30ac6&title=&width=589.998291015625" alt="image.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Weixin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;black&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sitemapLocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sitemap.json&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p><a name="O3o7m"></a></p><h1 id="六-小程序全局配置-app-json-—-window的配置"><a href="#六-小程序全局配置-app-json-—-window的配置" class="headerlink" title="六.小程序全局配置 app.json  —-window的配置"></a>六.小程序全局配置 app.json  —-window的配置</h1><blockquote><p>“backgroundTextStyle”:”light”,     下拉 loading 的样式，仅支持 dark &#x2F; light    “backgroundColor”:”#fff000”, 窗口的背景色<br>“navigationBarBackgroundColor”: “#fff”,   导航栏背景颜色，<br>“navigationBarTitleText”: “Weixin”, 导航栏标题文字内容<br>“navigationBarTextStyle”:”black”  导航栏标题颜色，仅支持 black &#x2F; white<br>“enablePullDownRefresh”:true 是否开启全局的下拉刷新。<br>“onReachBottomDistance”: 100   页面上拉触底事件触发时距页面底部距离，单位为 px。<br>注意：</p><ol><li>json文件中不能写注释           </li><li>前两条配置都必须开启下拉刷新才有效果</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670508181489-079cadf5-67fa-4362-ae27-26943be1a123.png#averageHue=%23ecd8d5&clientId=uf05408ed-6fa4-4&from=paste&height=286&id=u179e2075&name=image.png&originHeight=1440&originWidth=2209&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9559839&status=done&style=none&taskId=ub766b485-daf1-4305-87d2-a4c93e14b5e&title=&width=438.998291015625" alt="image.png"><br><a name="TQgnN"></a></p><h1 id="七-小程序全局配置-app-json-—-tabBar的配置"><a href="#七-小程序全局配置-app-json-—-tabBar的配置" class="headerlink" title="七. 小程序全局配置 app.json  —-tabBar的配置"></a>七. 小程序全局配置 app.json  —-tabBar的配置</h1><p>如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p><blockquote><p>“tabBar”和”window”是并列关系<br>有一些配置项的颜色只接收十六进制<br>tabBar最少设置2个，最 多5个<br>color:   tab 上的文字默认颜色，仅支持十六进制颜色<br>selectedColor: tab 上的文字选中时的颜色，仅支持十六进制颜色<br>backgroundColor:   tab 的背景色，仅支持十六进制颜色<br>borderStyle: tabbar 上边框的颜色， 仅支持 black &#x2F; white<br>position:   tabBar 的位置，仅支持 bottom &#x2F; top<br>list中的iconPath:  图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，不支持网络图片。当 position 为 top 时，不显示 icon。<br>list中的selectedIconPath： 选中时的图片路径</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#f96677&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;selectedColor&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#567788&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;首页&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/images/icon1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/images/icon2.jpg&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/list/list&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;列表&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/detail/detail&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;详情&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/logs/logs&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;日志&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><a name="d9r5u"></a></p><h1 id="八-小程序其它配置文件-（了解）"><a href="#八-小程序其它配置文件-（了解）" class="headerlink" title="八.小程序其它配置文件 （了解）"></a>八.小程序其它配置文件 （了解）</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670508220419-d54e23ee-f39d-41f5-a6a0-e1e8c3c33d80.png#averageHue=%23f4f2ef&clientId=uf05408ed-6fa4-4&from=paste&height=162&id=uc7550e16&name=image.png&originHeight=678&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5216212&status=done&style=none&taskId=ue02a2e11-13bf-4b53-a754-07b529e7e87&title=&width=611.998291015625" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670508225094-86adc238-6c26-4628-9ef3-0b3563dc1542.png#averageHue=%23fbfbfa&clientId=uf05408ed-6fa4-4&from=paste&height=225&id=uc0e0ef3c&name=image.png&originHeight=1012&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7785829&status=done&style=none&taskId=ub7ae41d1-6f16-4f20-bee6-509a9badf12&title=&width=568.998291015625" alt="image.png"><br><a name="u1j0a"></a></p><h1 id="九-小程序app-js"><a href="#九-小程序app-js" class="headerlink" title="九.小程序app.js"></a>九.小程序app.js</h1><ol><li>App() :  注册小程序。接受一个 Object 参数，其指定小程序的生命周期回调等。</li><li>App() 必须在 app.js 中调用，必须调用且只能调用一次。</li><li>常用生命周期函数：</li></ol><p>onLaunch ： 监听小程序初始化。<br />onShow： 监听小程序启动或切前台。<br />onHide： 监听小程序切后台。</p><ol start="4"><li>globalData: 定义全局数据</li><li>getApp() : 只用在page页中，获取到小程序全局唯一的 App 实例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取： </span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getApp</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(app.<span class="hljs-property">globalData</span>.属性)<br><br><span class="hljs-comment">// 设置：  </span><br>app.<span class="hljs-property">globalData</span>.属性 = 新值<br><br></code></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670508250070-8935491c-1eaa-4398-8803-50c83273c4df.png#averageHue=%2330302f&clientId=uf05408ed-6fa4-4&from=paste&height=272&id=u435b1141&name=image.png&originHeight=1440&originWidth=2024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8759338&status=done&style=none&taskId=u17e4e06f-c77a-419c-9a07-e858811ca1f&title=&width=382.9913330078125" alt="image.png"><br><a name="URwWh"></a></li></ol><h1 id="十-小程序app-wxss"><a href="#十-小程序app-wxss" class="headerlink" title="十.小程序app.wxss"></a>十.小程序app.wxss</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22278242/1670686834876-93fc8e86-d454-4b21-8bc3-18b352a76354.png#averageHue=%23f6f4f1&clientId=ued9b807c-419f-4&from=paste&height=174&id=u931548f5&name=image.png&originHeight=313&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2408118&status=done&style=none&taskId=ud102a037-56db-4413-946a-db4823bc50a&title=&width=1422.2222598982455" alt="image.png"><br />WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式。</p><ol><li>全局样式</li><li>与 CSS 相比，WXSS 扩展的特性有： （1）尺寸单位（2）样式导入</li><li>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。</li><li>使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束。 （iconfont.css要改为iconfont.wxss）</li></ol><p>注意：引入iconfont的时候，如果样式中有引入ttf的路径地址【相对的路径】，不能使用的；需要引入在线的ttf【字体】的路径地址</p><ol start="5"><li>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。</li></ol><p><view style="color:;" />     <br /><view class="normal_view" /></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** app.wxss **/</span><br>@<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;common.wxss&quot;</span>;<br>.<span class="hljs-property">middle</span>-p &#123;<br>  <span class="hljs-attr">padding</span>:15px;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2.注册小程序</title>
    <link href="/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <url>/%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>手写代码</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/43-%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/43-%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><a name="h5wxd"></a></p><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><p>浅拷贝只拷贝第一层，深层的引用值只拷贝地址。深拷贝会拷贝所有的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy</span> (obj) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 直接就不执行后面的拷贝代码</span><br>    <span class="hljs-keyword">return</span> obj<br>  &#125;<br><br>  <span class="hljs-comment">// 生成一个新的变量，这个是个数组还是对象取决于obj是个数组还是对象</span><br>  <span class="hljs-keyword">let</span> newObj = obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-comment">// obj是数组 key表示下标 obj是对象key是属性名</span><br>    <span class="hljs-comment">// 判断key是不是obj下的原生属性</span><br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>      <span class="hljs-comment">// 遍历一个属性，就把对应的值添加到新的newObj中</span><br>      newObj[key] = obj[key]<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> newObj<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">  下面的操作有小bug，不能识别Date等特殊对象</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span> (obj) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 直接就不执行后面的拷贝代码</span><br>    <span class="hljs-keyword">return</span> obj<br>  &#125;<br><br>  <span class="hljs-comment">// 生成一个新的变量，这个是个数组还是对象取决于obj是个数组还是对象</span><br>  <span class="hljs-keyword">let</span> newObj = obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-comment">// obj是数组 key表示下标 obj是对象key是属性名</span><br>    <span class="hljs-comment">// 判断key是不是obj下的原生属性</span><br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>      <span class="hljs-comment">// 遍历一个属性，就把对应的值添加到新的newObj中</span><br>      newObj[key] = <span class="hljs-title function_">deepCopy</span>(obj[key])<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> newObj<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="EsKBv"></a></p><h2 id="函数节流和函数防抖"><a href="#函数节流和函数防抖" class="headerlink" title="函数节流和函数防抖"></a>函数节流和函数防抖</h2><p>函数节流：间隔单位时间执行一次<br />函数防抖：在单位事件内执行n次，只有最后一次生效<br />函数防抖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span> (callback, wait = <span class="hljs-number">100</span>) &#123;<br>  <span class="hljs-keyword">let</span> t = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (t) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(t)<br>    &#125;<br><br>    t = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 执行代码</span><br>      callback &amp;&amp; <span class="hljs-title function_">callback</span>()<br>    &#125;, wait)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数节流</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span> (callback, wait = <span class="hljs-number">100</span>) &#123;<br>  <span class="hljs-keyword">let</span> t = <span class="hljs-literal">null</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (t) &#123;<br>      <span class="hljs-keyword">return</span> <br>    &#125;<br><br>    t = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// callback &amp;&amp; callback()</span><br>      <span class="hljs-keyword">if</span> (callback) &#123;<br>        <span class="hljs-title function_">callback</span>()<br>      &#125;<br>      t = <span class="hljs-literal">null</span><br>    &#125;, wait)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>函数中的this指向</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/42-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/42-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>函数在调用时this指向可以随意的进行修改。通过使用call apply bind可以修改对应的this指向<br><a name="xjgw7"></a></p><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>调用函数时使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数.<span class="hljs-title function_">call</span>()<br></code></pre></td></tr></table></figure><p>有n个参数，第一个参数是this指向，设置后，函数内部的this就会指向对应的我们设置的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数.<span class="hljs-title function_">call</span>([]) <span class="hljs-comment">// 这个函数的this指向就是[]</span><br></code></pre></td></tr></table></figure><p>如果函数本身有自己的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数 (参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>) &#123;&#125;<br><br>函数.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>指向, 实参<span class="hljs-number">1</span>, 实参<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><a name="ekZUO"></a></p><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>调用函数时使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数.<span class="hljs-title function_">apply</span>()<br></code></pre></td></tr></table></figure><p>有两个参数，第一个参数是this指向，设置后，函数内部的this就会指向对应的我们设置的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数.<span class="hljs-title function_">apply</span>([]) <span class="hljs-comment">// 这个函数的this指向就是[]</span><br></code></pre></td></tr></table></figure><p>如果函数本身有自己的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数 (参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>) &#123;&#125;<br><br>函数.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>指向, [实参<span class="hljs-number">1</span>, 实参<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p><a name="wuPPf"></a></p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>在声明函数时使用，该方法调用后，会得到一个新的函数，这个函数中的this指向被改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数 () &#123;&#125;<br><br><span class="hljs-keyword">let</span> 新函数 = 函数.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>指向) <span class="hljs-comment">// 这个操作不会调用函数，会返回一个新的函数体</span><br></code></pre></td></tr></table></figure><p>bind一般用在事件绑定时使用，因为事件绑定时，函数内部的this指向绑定的元素，如果函数中不需要用到这个this，但是要用到其他this，我们就可以进行绑定时修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">onclick</span> = 函数.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>指向)<br>dom.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, 函数.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>指向))<br></code></pre></td></tr></table></figure><p><a name="hs1kA"></a></p><h2 id="借助this指向的改变实现的一些功能"><a href="#借助this指向的改变实现的一些功能" class="headerlink" title="借助this指向的改变实现的一些功能"></a>借助this指向的改变实现的一些功能</h2><p><a name="I66ct"></a></p><h3 id="精确判断类型"><a href="#精确判断类型" class="headerlink" title="精确判断类型"></a>精确判断类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;<br>obj.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// [object Object]</span><br></code></pre></td></tr></table></figure><p>因为Object.prototype.toString这个方法中的this 在 通过obj.toString调用时指向obj，所以我们得到[object Object]<br />数组调用toString时调用自己的toString，没办法调用到Object的toString方法，所以我们如果想要让其他类型调用Object.prototype.toString方法。我们就需要使用.call</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(其他值) <span class="hljs-comment">// [object 其他类型]</span><br></code></pre></td></tr></table></figure><p><a name="X1FL9"></a></p><h3 id="把一个类数组对象转数组"><a href="#把一个类数组对象转数组" class="headerlink" title="把一个类数组对象转数组"></a>把一个类数组对象转数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(类数组对象)<br><span class="hljs-comment">// 这个变量就是一个数组</span><br></code></pre></td></tr></table></figure><p>上面的写法只支持主流浏览器，是ES6的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(类数组对象)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">toArray</span> (obj) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(obj)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/41-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/41-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>JS是一个基于对象的语言。既能面向过程又能面向对象。</p><ul><li>封装</li><li>继承</li><li>多态<br><a name="bL4od"></a></li></ul><h2 id="JS已有的对象的理解"><a href="#JS已有的对象的理解" class="headerlink" title="JS已有的对象的理解"></a>JS已有的对象的理解</h2><p>new Array() , new String(), new Date(), new Number(), new Boolean(), new Function()<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661830832787-55d20eaa-d4bd-407f-a549-9f2a3dae49aa.png#clientId=u012f818b-0630-4&from=paste&height=441&id=ue9711996&name=image.png&originHeight=441&originWidth=369&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34228&status=done&style=none&taskId=u16fa6f97-9bb0-4b6c-a632-819cf9b2c0a&title=&width=369" alt="image.png"><br />不管是什么对象，这个对象下一定有一个属性叫<code>__proto__</code>现在大部分浏览器显示的都是<code>[[Prototype]]</code>但是这个属性不能用，还是得用<code>__proto__</code>是前后各两个杠</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">__proto__</span>)<br><br><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">__proto__</span>)<br><br><span class="hljs-keyword">let</span> str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">__proto__</span>)<br></code></pre></td></tr></table></figure><p><a name="uWL5s"></a></p><h3 id="由引用值改变引出Prototype"><a href="#由引用值改变引出Prototype" class="headerlink" title="由引用值改变引出Prototype"></a>由引用值改变引出Prototype</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj2 = &#123;&#125;<br><br><span class="hljs-keyword">let</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">c</span>: obj2<br>&#125;<br><br>obj2.<span class="hljs-property">key</span> = <span class="hljs-string">&quot;value&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1) <span class="hljs-comment">// &#123;a: 1, b: 2, c: &#123;key: &quot;value&quot;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661831173105-fca9bc5d-b21c-471a-8db7-bb2fb4c0acea.png#clientId=u012f818b-0630-4&from=paste&height=643&id=u902f53bc&name=image.png&originHeight=643&originWidth=1022&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16126&status=done&style=none&taskId=u5024677c-5344-4d16-bda9-ee390fa6445&title=&width=1022" alt="image.png"><br><a name="FpbGj"></a></p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>原型对象，因为原型对象在对应的构造函数中，只有一个<br />所有对象的<code>__proto__</code>都指向其对应的构造函数的<code>prototype</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [] <span class="hljs-comment">// 他的构造函数Array</span><br><span class="hljs-comment">// 就可以得到</span><br>arr.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>上面这个例子就像更上面您的obj1和obj2的关系一样<br />arr就是obj1, Array.prototype就是obj2<br><a name="p5PvT"></a></p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>这个指的是构造函数，所有的通过new 得到的对象的prototype里都有这个属性，这个属性就是你new的时候后面的跟着的构造函数<br />这个属性在原型对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> <span class="hljs-comment">// Array</span><br></code></pre></td></tr></table></figure><p><a name="ND1rE"></a></p><h3 id="为什么要设计-proto-和prototype"><a href="#为什么要设计-proto-和prototype" class="headerlink" title="为什么要设计__proto__和prototype"></a>为什么要设计__proto__和prototype</h3><p>正常情况下，我们如果给每个对象都添加相同的方法，会导致相同的方法在堆内存中占用大量的内容。其实没有必要，但是我们又没有办法解决这个问题。<img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661831786128-e8f36650-1032-4e8d-9d98-549e38ac9bd3.png#clientId=u012f818b-0630-4&from=paste&height=443&id=u17f00ac8&name=image.png&originHeight=443&originWidth=825&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12701&status=done&style=none&taskId=ua35cf519-3444-4595-b3ae-7354b14b39d&title=&width=825" alt="image.png"><br />js提出了原型对象的概念，可以把所有的公共方法全部放在一个对象，然后让原型对象和实例对象产生关联，然后可以节省内容<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661831922183-a0ef888c-1f7d-461b-a741-e522391f96d2.png#clientId=u012f818b-0630-4&from=paste&height=448&id=u92c20f3a&name=image.png&originHeight=448&originWidth=826&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12841&status=done&style=none&taskId=u5e4b3012-1a8e-495d-bbb9-20ad93317dc&title=&width=826" alt="image.png">特性！！！当我们调用实例对象下的方法时，js会去实例对象中找方法，找到就调用。没找到就去对应的构造函数的原型对象中找。找到就调用，找不到继续往下找对应的构造函数的原型对象的构造函数的原型对象。直到没有找到，才会报错。<br><a name="G99Td"></a></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>拿JS中自带的对象举例：<br />当我们生成一个数组时，数组是实例对象，Array是构造函数，Object构造函数<br />数组.__proto__就是Array.prototype<br />Array.prototype.__proto__就是Object.prototype<br />Object.__proto__就是null<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661832323715-6fa61f2d-e5a1-48db-bccb-0f9d1031cde3.png#clientId=u012f818b-0630-4&from=paste&height=618&id=ud7f7dbdf&name=image.png&originHeight=618&originWidth=1463&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29294&status=done&style=none&taskId=u63f6dc6d-941c-417b-a90a-91464bd2adf&title=&width=1463" alt="image.png"><br />特性！！！只要在原型链上的对象有某个方法，那么实例对象就能调用。<br><a name="VqUoj"></a></p><h3 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf"></a>instanceOf</h3><p> [] 通过 new Array得到，所以我们可以说 [] 是 Array的实例对象，Array是[]的构造函数，就会有以下关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> <span class="hljs-comment">// true</span><br>&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>instanceof可以用来判断某个值是不是数组<br><a name="Dm6ZP"></a></p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>假设我们想要当所有的数组都可以调用某个方法，我们需要怎么做。<br />可以把对应的方法设置到原型对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.方法名 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p><a name="p34SJ"></a></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>在面向对象的操作中，我们有完全不同的一些写法，需要学习。<br />想要封装我们的对象，就要用到构造函数。我们需要创建构造函数，构造函数和函数一致，都是通过function创建的</p><ul><li>首字母大写（规范，为了和普通函数进行区分）</li><li>通过new调用的函数叫构造函数，new完之后得到的结果叫实例对象</li></ul><p>属性写在实例对象中，方法写在原型对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 构造函数名 (参数, 参数n) &#123;<br>  <span class="hljs-variable language_">this</span>.属性 = 参数<br>  <span class="hljs-variable language_">this</span>.属性 = 值<br>&#125;<br><br>构造函数.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.方法名 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <br>&#125;<br><br>构造函数.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.方法名<span class="hljs-number">2</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <br>&#125;<br><br>构造函数.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.方法名n = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>构造函数中的this指向new之后的实例对象。构造函数的原型对象中的方法里的this也指向实例对象。<br />我们可以在原型对象的方法中，直接通过this调用属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span> (name, age) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  <br>  <span class="hljs-comment">// 方法写在构造函数中，每生成一个实例对象，都会在实例对象中生成一个新的方法，浪费内存。</span><br>  <span class="hljs-comment">/* this.say = function () &#123;</span><br><span class="hljs-comment">    console.log(`我叫$&#123;this.name&#125;，今年$&#123;this.age&#125;岁`)</span><br><span class="hljs-comment">  &#125; */</span><br>&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;人&quot;</span><br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 原型对象的方法中，可以通过this调用其他方法 也可以通过this实现属性</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我叫<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.getName()&#125;</span>，今年<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>岁`</span>)<br>&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="pbhNN"></a></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>JS中一个对象a可以调用另外一个对象b中的属性和方法。表示对象a继承对象b<br />继承的目的就是为了复用公共代码，不需要每次生成新的对象后重新写相关的方法。<br />JS官方的继承：把要继承的对象放在子对象的原型链上。把子构造函数的原型对象的__proto__指向父构造函数的原型对象<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661909968846-c0451063-2d1e-4c0e-8aa9-73c66b1a26b0.png#clientId=u1ad338d6-d4dd-4&from=paste&height=713&id=u618ef738&name=image.png&originHeight=713&originWidth=1031&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16307&status=done&style=none&taskId=u57e6d2a7-46dc-4a91-80d1-4463bc107d6&title=&width=1031" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, 参数<span class="hljs-number">3</span>, 参数n) &#123;<br>  <span class="hljs-variable language_">this</span>.属性<span class="hljs-number">1</span> = 参数<span class="hljs-number">1</span><br>  <span class="hljs-variable language_">this</span>.属性<span class="hljs-number">2</span> = 参数<span class="hljs-number">2</span><br>  <span class="hljs-variable language_">this</span>.属性<span class="hljs-number">3</span> = 参数<span class="hljs-number">3</span><br>  <span class="hljs-variable language_">this</span>.属性n= 参数n<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fn1</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fn2</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnn</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p>创建一个子对象继承Parent</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, 参数<span class="hljs-number">3</span>, 参数n, 子独有的参数<span class="hljs-number">1</span>, 子独有的参数<span class="hljs-number">2</span>, 子独有的参数n) &#123;<br>  <span class="hljs-comment">// 继承属性</span><br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, 参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, 参数<span class="hljs-number">3</span>, 参数n)<br>  <span class="hljs-variable language_">this</span>.子属性<span class="hljs-number">1</span> = 子独有的参数<span class="hljs-number">1</span><br>  <span class="hljs-variable language_">this</span>.子属性<span class="hljs-number">2</span> = 子独有的参数<span class="hljs-number">2</span><br>  <span class="hljs-variable language_">this</span>.子属性n = 子独有的参数n<br>&#125;<br><br><span class="hljs-comment">// 方法继承</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><br><span class="hljs-comment">// 子对象的方法</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.子fn1 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.子fn2 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.子fnn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p><a name="mX8rH"></a></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>同一个方法，在不同的对象中，有不同的表现，就是多态。<br />打印机都有<code>打印方法</code>彩色打印机的打印是彩色的，普通打印机是黑白的。</p><ul><li>必须要有继承</li><li>必须要有方法的重写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-title function_">constructor</span> (name) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br><br>  eat () &#123;<br><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>  <span class="hljs-title function_">constructor</span> (name) &#123;<br>    <span class="hljs-variable language_">super</span>(name)<br>  &#125;<br><br>  eat () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;吃鱼&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>  <span class="hljs-title function_">constructor</span> (name) &#123;<br>    <span class="hljs-variable language_">super</span>(name)<br>  &#125;<br><br>  eat () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;吃骨头&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;猫&quot;</span>)<br><span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;狗&#x27;</span>)<br></code></pre></td></tr></table></figure><a name="TiUs8"></a></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>ES6中新增的写法，是构造函数写法的语法糖，只是为了填补js中类的缺失，在ES6中就有了这种写法，更简单，更好用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> 类名 &#123;<br>  <span class="hljs-title function_">constructor</span> (参数) &#123;<br>    <span class="hljs-variable language_">this</span>.属性 = 参数<br>  &#125;<br><br>  方法 () &#123;<br>    <br>  &#125;<br><br>  方法<span class="hljs-number">2</span> () &#123;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类的继承很简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Parent</span> &#123;<br>  <span class="hljs-title function_">constructor</span> (参数, 子参数) &#123;<br>    <span class="hljs-variable language_">super</span>(参数)<br>    <span class="hljs-variable language_">this</span>.属性 = 子参数<br>  &#125;<br><br>  子方法 () &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>new的子类得到的实例对象可以直接使用parent中的方法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM节点的操作</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/40-DOM%E8%8A%82%E7%82%B9%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/40-DOM%E8%8A%82%E7%82%B9%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p><a name="0b6e32d3"></a></p><h2 id="1-DOM-对象简介"><a href="#1-DOM-对象简介" class="headerlink" title="1 DOM 对象简介"></a>1 DOM 对象简介</h2><p><a name="388a74fd"></a></p><h3 id="1-1-什么是-DOM"><a href="#1-1-什么是-DOM" class="headerlink" title="1.1 什么是 DOM"></a>1.1 什么是 DOM</h3><p>DOM：Document Object Model，文档对象模型。</p><p>作用：是一套规范文档内容的通用型标准。</p><p>1998年10月，DOM正式成为W3C的推荐标准。</p><p>第1级DOM（DOM Level 1，或DOM1）。为XML和HTML文档中的元素、节点、属性等提供了必备的属性和方法。结合了Netscape及微软公司开发的DHTML（动态HTML）思想。</p><p>2000年11月，发布了第2级DOM（DOM Level 2，或DOM2）。在DOM1的基础上增加了样式表对象模型。</p><p>第3级DOM（DOM Level 3，或DOM3） 。在DOM2基础上增加了内容模型、文档验证以及键盘鼠标事件等功能。</p><p>直到目前为止，DOM几乎被所有浏览器所支持。</p><p><a name="0adc6841"></a></p><h3 id="1-2-DOM-HTML-节点树"><a href="#1-2-DOM-HTML-节点树" class="headerlink" title="1.2 DOM HTML 节点树"></a>1.2 DOM HTML 节点树</h3><p>DOM HTML指的是DOM中为操作HTML文档提供的属性和方法。</p><ul><li>文档（Document）表示HTML文件。</li><li>文档中的标签称为元素（Element）。</li><li>文档中的所有内容称为节点（Node）。</li></ul><p>因此，一个HTML文件可以看作是所有元素组成的一个节点树，各元素节点之间有级别的划分 。</p><p><img src="https://gitee.com/rawait/rwpicgo/raw/master/teaching/2022-01-09/202201091652734.png#alt=image-20220109165211655#id=ayamx&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>HTML文档根据节点作用，分为标签节点、文本节点、属性节点和注释节点。 </li><li>各节点之间的关系，又可分为以下几个方面： <ul><li>根节点：<code>&lt;html&gt;</code> 标签是整个文档的根节点，有且仅由一个。</li><li>子节点：指的是某一个节点的下级节点。</li><li>父节点：指的是某一个节点的上级节点。</li><li>兄弟节点：两个节点同属于一个父节点。</li></ul></li></ul><p><a name="99abc2a3"></a></p><h3 id="1-3-DOM-对象的继承关系"><a href="#1-3-DOM-对象的继承关系" class="headerlink" title="1.3 DOM 对象的继承关系"></a>1.3 DOM 对象的继承关系</h3><p>在JavaScript中要对网页中的元素进行操作，可以利用document对象的getElementById()方法实现，但是此方法的返回值类型是什么？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> test = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test);            <span class="hljs-comment">// 输出结果：&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-property">__proto__</span>);  <span class="hljs-comment">// 输出结果：HTMLDivElement &#123; …… &#125;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/rawait/rwpicgo/raw/master/teaching/2022-01-09/202201091705245.png#alt=image-20220109170510166#id=iBJD3&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>document和Element是两种不同类型的节点（Node）对象。</li><li>它们不仅能够使用Node对象的一系列属性和方法完成节点操作。</li><li>也可以使用特有的属性和方法完成不同类型节点的操作。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> test = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-property">nodeName</span>);      <span class="hljs-comment">// 通过节点方式获取节点名，输出结果：DIV</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-property">tagName</span>);       <span class="hljs-comment">// 通过元素方式获取标签名，输出结果：DIV</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">nodeName</span>);  <span class="hljs-comment">// document属于节点，输出结果：#document</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">tagName</span>);   <span class="hljs-comment">// document不属于元素，输出结果：undefined</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除了document和Element对象，还有其他几种类型的节点对象也继承Node对象，如文本（Text）、注释（Comment）等。</p><table><thead><tr><th>Node.属性名</th><th>值</th><th>相应的对象</th><th>说明</th></tr></thead><tbody><tr><td>ELEMEN_NODE</td><td>1</td><td>Element</td><td>元素节点</td></tr><tr><td>ATTRIBUTE_NODE</td><td>2</td><td>Attr</td><td>属性节点</td></tr><tr><td>TEXT_NODE</td><td>3</td><td>Text</td><td>文本节点</td></tr><tr><td>COMMENT_NODE</td><td>8</td><td>Comment</td><td>注释节点</td></tr><tr><td>DOCUMENT_NODE</td><td>9</td><td>Document</td><td>文档节点</td></tr></tbody></table><p><a name="9eacf727"></a></p><h2 id="2-HTML-元素操作"><a href="#2-HTML-元素操作" class="headerlink" title="2 HTML 元素操作"></a>2 HTML 元素操作</h2><p><a name="e2ed5008"></a></p><h3 id="2-1-获取操作的元素"><a href="#2-1-获取操作的元素" class="headerlink" title="2.1 获取操作的元素"></a>2.1 获取操作的元素</h3><ul><li>document对象的方法和属性</li><li>Element对象的方法和属性</li></ul><p><a name="6c530df6"></a></p><h4 id="document对象的方法和属性"><a href="#document对象的方法和属性" class="headerlink" title="document对象的方法和属性"></a>document对象的方法和属性</h4><p>document对象提供了一些用于查找元素的方法，利用这些方法可以根据元素的id、name和class属性以及标签名称的方式获取操作的元素。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>返回对拥有指定id的第一个对象的引用</td></tr><tr><td>document.getElementsByName()</td><td>返回带有指定名称的对象集合</td></tr><tr><td>document.getElementsByTagName()</td><td>返回带有指定标签名的对象集合</td></tr><tr><td>document.getElementsByClassName()</td><td>返回带有指定类名的对象集合（不支持IE6~8）</td></tr></tbody></table><p>注意：除了document.getElementById()方法返回的是拥有指定id的元素外，其他方法返回的都是符合要求的一个集合。若要获取其中一个对象，可以通过下标的方式获取，默认从0开始。</p><p>document对象提供一些属性，可用于获取文档中的元素。例如，获取所有表单标签、图片标签等。</p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>document.body</td><td>返回文档的body元素</td></tr><tr><td>document.documentElement</td><td>返回文档的html元素</td></tr><tr><td>document.forms</td><td>返回对文档中所有Form对象引用</td></tr><tr><td>document.images</td><td>返回对文档中所有Image对象引用</td></tr></tbody></table><p><img src="https://gitee.com/rawait/rwpicgo/raw/master/teaching/2022-01-09/202201091711852.png#alt=image-20220109171113772#id=zS0Vv&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>document对象的body属性用于返回body元素。</li><li>document对象的documentElement属性用于返回HTML文档的根节点html元素。</li></ul><p>通过document对象的方法与document对象的属性获取的操作元素表示的都是同一对象。</p><p>如document.getElementsByTagName(‘body’)[0]与document.body全等。</p><p><a name="c005f23f"></a></p><h4 id="HTML5新增的document对象方法"><a href="#HTML5新增的document对象方法" class="headerlink" title="HTML5新增的document对象方法"></a>HTML5新增的document对象方法</h4><p>HTML5中为更方便获取操作的元素，为document对象新增了两个方法，分别为querySelector()和querySelectorAll()。</p><ul><li>querySelector()方法用于返回文档中匹配到指定的元素或CSS选择器的第1个对象的引用。</li><li>querySelectorAll()方法用于返回文档中匹配到指定的元素或CSS选择器的对象集合。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这两个方法的使用方式相同</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>));        <span class="hljs-comment">// 获取匹配到的第1个div</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#box&#x27;</span>));       <span class="hljs-comment">// 获取id为box的第1个div</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.bar&#x27;</span>));       <span class="hljs-comment">// 获取class为bar的第1个div</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div[name]&#x27;</span>));  <span class="hljs-comment">// 获取含有name属性的第1个div</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div.bar&#x27;</span>));    <span class="hljs-comment">// 获取文档中class为bar的第1个div</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div#box&#x27;</span>));    <span class="hljs-comment">// 获取文档中id为box的第1个div</span><br></code></pre></td></tr></table></figure><p><a name="e198fd2b"></a></p><h4 id="Element对象的方法和属性"><a href="#Element对象的方法和属性" class="headerlink" title="Element对象的方法和属性"></a>Element对象的方法和属性</h4><p>在DOM操作中，元素对象也提供了获取某个元素内指定元素的方法，常用的两个方法分别为getElementsByClassName()和getElementsByTagName()。它们的使用方式与document对象中同名方法相同。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis);<span class="hljs-comment">// 输出结果：(3) [li, li, li]</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除此之外，元素对象还提供了children属性用来获取指定元素的子元素。例如，获取上述示例中ul的子元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-property">children</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis);<span class="hljs-comment">// 输出结果：(3) [li, li, ul]</span><br></code></pre></td></tr></table></figure><ul><li>元素对象的children属性返回的也是对象集合，若要获取其中一个对象，也需通过下标的方式获取，默认从0开始。</li><li>另外，document对象中也有children属性，它的第一个子元素通常是html元素。</li></ul><p><a name="b4ddf126"></a></p><h4 id="HTMLCollection对象"><a href="#HTMLCollection对象" class="headerlink" title="HTMLCollection对象"></a>HTMLCollection对象</h4><ul><li>HTMLCollection对象：通过document对象或Element对象调用getElementsByClassName()方法、getElementsByTagName()方法、children属性等返回的对象集。</li><li>NodeList对象：document对象调用getElementsByName()方法在Chrome和FireFox浏览器中返回的是NodeList对象，IE11返回的是HTMLCollection对象。</li></ul><p><strong>HTMLCollection与NodeList对象的区别：</strong></p><ul><li>HTMLCollection对象用于元素操作。</li><li>NodeList对象用于节点操作。</li></ul><blockquote><p>对于getElementsByClassName()方法、getElementsByTagName()方法和children属性返回的集合中可以将id和name自动转换为一个属性。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> lis1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);  <span class="hljs-comment">// 获取标签名为li的对象集合</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> test = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>);      <span class="hljs-comment">// 获取id为test的li元素对象</span></span><br><span class="language-javascript">    lis1.<span class="hljs-property">test</span> === test;                              <span class="hljs-comment">// 比较结果：true</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> lis2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;test&#x27;</span>);   <span class="hljs-comment">// 获取name名为test的对象集合</span></span><br><span class="language-javascript">    lis1.<span class="hljs-property">test</span> === lis2[<span class="hljs-number">0</span>];                           <span class="hljs-comment">// 比较结果：true</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="4b270681"></a></p><h3 id="2-2-元素内容"><a href="#2-2-元素内容" class="headerlink" title="2.2 元素内容"></a>2.2 元素内容</h3><p>JavaScript中，若要对获取的元素内容进行操作，则可以利用DOM提供的属性和方法实现。</p><table><thead><tr><th>分类</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>属性</td><td>innerHTML</td><td>设置或返回元素开始和结束标签之间的HTML</td></tr><tr><td>属性</td><td>innerText</td><td>设置或返回元素中去除所有标签的内容</td></tr><tr><td>属性</td><td>textContent</td><td>设置或者返回指定节点的文本内容</td></tr><tr><td>方法</td><td>document.write()</td><td>向文档写入指定的内容</td></tr><tr><td>方法</td><td>document.writeln()</td><td>向文档写入指定的内容后并换行</td></tr></tbody></table><ul><li>属性属于Element对象，方法属于document对象。</li><li>innerHTML在使用时会保持编写的格式以及标签样式。</li><li>innerText则是去掉所有格式以及标签的纯文本内容。</li><li>textContent属性在去掉标签后会保留文本格式。</li></ul><blockquote><p>innerText属性在使用时可能会出现浏览器兼容的问题。因此，推荐在开发时尽可能的使用innerHTML获取或设置元素的文本内容。</p></blockquote><blockquote><p>同时，innerHTML属性和document.write()方法在设置内容时有一定的区别，前者作用于指定的元素，后者则是重构整个HTML文档页面。因此，读者在开发中要根据实际的需要选择合适的实现方式</p></blockquote><p><a name="8bbab09b"></a></p><h3 id="2-3-练习作业"><a href="#2-3-练习作业" class="headerlink" title="2.3 练习作业"></a>2.3 练习作业</h3><ul><li>改变盒子大小 <ul><li>编写HTML，设置div的大小。</li><li>根据用户的点击次数完成盒子大小的改变。</li><li>单击的次数为奇数时，盒子都变大，单击次数为偶数时，盒子都变小。</li></ul></li></ul><p><a name="911a56e6"></a></p><h3 id="2-4-元素属性"><a href="#2-4-元素属性" class="headerlink" title="2.4 元素属性"></a>2.4 元素属性</h3><p>在DOM中，为了方便JavaScript获取、修改和遍历指定HTML元素的相关属性，提供了操作的属性和方法。</p><table><thead><tr><th>分类</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>属性</td><td>attributes</td><td>返回一个元素的属性集合</td></tr><tr><td>方法</td><td>setAttribute(name, value)</td><td>设置或者改变指定属性的值</td></tr><tr><td>方法</td><td>getAttribute(name)</td><td>返回指定元素的属性值</td></tr><tr><td>方法</td><td>removeAttribute(name)</td><td>从元素中删除指定的属性</td></tr></tbody></table><p>利用attributes属性可以获取一个HTML元素的所有属性，以及所有属性的个数length。</p><p><a name="99b2cba3"></a></p><h3 id="2-5-元素样式"><a href="#2-5-元素样式" class="headerlink" title="2.5 元素样式"></a>2.5 元素样式</h3><p>通过元素属性的操作修改样式。</p><p>元素样式语法：style.属性名称。</p><ul><li>需要去掉CSS样式名里的中横线“-”，并将第二个英文首字母大写。</li><li>设置背景颜色的background-color，在style属性操作中，需要修改为backgroundColor。<br />| 名称 | 说明 |<br />| — | — |<br />| background | 设置或返回元素的背景属性 |<br />| backgroundColor | 设置或返回元素的背景色 |<br />| display | 设置或返回元素的显示类型 |<br />| height | 设置或返回元素的高度 |<br />| left | 设置或返回定位元素的左部位置 |<br />| listStyleType | 设置或返回列表项标记的类型 |<br />| overflow | 设置或返回如何处理呈现在元素框外面的内容 |<br />| textAlign | 设置或返回文本的水平对齐方式 |<br />| textDecoration | 设置或返回文本的修饰 |<br />| textIndent | 设置或返回文本第一行的缩进 |<br />| transform | 向元素应用2D或3D转换 |</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ele = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>);  <span class="hljs-comment">// 获取元素对象</span></span><br><span class="language-javascript">    ele.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;100px&#x27;</span>;</span><br><span class="language-javascript">    ele.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&#x27;100px&#x27;</span>;</span><br><span class="language-javascript">    ele.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">    ele.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">&#x27;rotate(7deg)&#x27;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>CSS中的float样式与JavaScript的保留字冲突，在解决方案上不同的浏览器存在分歧。IE98则使用“styleFloat”。</p></blockquote><p>一个元素的类选择器可以有多个，在开发中如何对选择器列表进行操作？</p><ul><li>原来的解决方案：利用元素对象的className属性获取，获取的结果是字符型，然后再根据实际情况对字符串进行处理。</li><li>HTML5提供的办法：新增的classList（只读）元素的类选择器列表。</li></ul><p>若一个div元素的class值为“box header navlist title”，如何删除header？</p><ul><li>HTML5解决方案：div元素对象.classList.toggle(“header”);</li></ul><p>除此之外，classList属性还提供了许多其他相关操作的方法和属性。</p><table><thead><tr><th>分类</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>属性</td><td>length</td><td>可以获取元素类名的个数</td></tr><tr><td>方法</td><td>add()</td><td>可以给元素添加类名，一次只能添加一个</td></tr><tr><td>方法</td><td>remove()</td><td>可以将元素的类名删除，一次只能删除一个</td></tr><tr><td>方法</td><td>toggle()</td><td>切换元素的样式，若元素之前没有指定名称的样式则添加，如果有则移除</td></tr><tr><td>方法</td><td>item()</td><td>根据接收的数字索引参数，获取元素的类名</td></tr><tr><td>方法</td><td>contains</td><td>判断元素是否包含指定名称的样式，若包含则返回true，否则返回false</td></tr></tbody></table><p><a name="6f7fffa0"></a></p><h3 id="2-6-练习作业"><a href="#2-6-练习作业" class="headerlink" title="2.6 练习作业"></a>2.6 练习作业</h3><ul><li><br /></li></ul><p>标签栏切换效果</p><ul><li><br /></li></ul><p>编写HTML，实现标签栏的结构与样式的设计，其中class等于current表示当前显示的标签，默认是第一个标签。</p><ul><li><br /></li></ul><p>获取所有的标签与标签对应的显示内容。</p><ul><li><br /></li></ul><p>遍历并为每个标签添加鼠标滑过事件，在事件的处理函数中，遍历标签对应的所有显示内容，当鼠标滑过标签时，通过classList的add()方法添加current，否则通过remove()方法移出current。</p><p><img src="https://gitee.com/rawait/rwpicgo/raw/master/teaching/2022-01-09/202201091729646.png#alt=image-20220109172926540#id=p0lyl&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><img src="https://gitee.com/rawait/rwpicgo/raw/master/teaching/2022-01-09/202201091729415.png#alt=image-20220109172935351#id=BQTU3&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><a name="3b869c70"></a></p><h2 id="3-DOM-节点操作"><a href="#3-DOM-节点操作" class="headerlink" title="3 DOM 节点操作"></a>3 DOM 节点操作</h2><p><a name="c33fc1fb"></a></p><h3 id="3-1-获取节点"><a href="#3-1-获取节点" class="headerlink" title="3.1 获取节点"></a>3.1 获取节点</h3><p>由于HTML文档可以看做是一个节点树，因此，可以利用操作节点的方式操作HTML中的元素。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>firstChild</td><td>访问当前节点的首个子节点</td></tr><tr><td>lastChild</td><td>访问当前节点的最后一个子节点</td></tr><tr><td>nodeName</td><td>访问当前节点名称</td></tr><tr><td>nodeValue</td><td>访问当前节点的值</td></tr><tr><td>nextSibling</td><td>返回同一树层级中指定节点之后紧跟的节点</td></tr><tr><td>previousSibling</td><td>返回同一树层级中指定节点的前一个节点</td></tr><tr><td>parentNode</td><td>访问当前元素节点的父节点</td></tr><tr><td>childNodes</td><td>访问当前元素节点的所有子节点的集合</td></tr></tbody></table><p><strong>childNodes属性与前面学习过的children属性的区别。</strong></p><ul><li>相同点：都可以获取某元素的子元素。</li><li>不同点： childNodes属性用于节点操作，返回值中还会包括文本节点等其他类型的节点，是一个NodeList对象的集合。 children属性用于元素操作，返回的是HTMLCollection对象的集合</li></ul><blockquote><p>childNodes属性在IE6~8不会获取文本节点，在IE9及以上版本和主流浏览器中则可以获取文本节点。</p></blockquote><p>此外，由于document对象继承自Node节点对象，因此document对象也可以进行以上的节点操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 访问document节点的第1个子节点</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">firstChild</span>;              <span class="hljs-comment">// 访问结果：&lt;!DOCTYPE html&gt;</span><br><span class="hljs-comment">// 访问document节点的第2个子节点</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">firstChild</span>.<span class="hljs-property">nextSibling</span>;  <span class="hljs-comment">// 访问结果：&lt;html&gt;……&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p><a name="57dc09fa"></a></p><h3 id="3-2-节点追加"><a href="#3-2-节点追加" class="headerlink" title="3.2 节点追加"></a>3.2 节点追加</h3><p>在获取元素的节点后，还可以利用DOM提供的方法实现节点的添加，如创建一个li元素节点，为li元素节点创建一个文本节点等。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>document.createElement()</td><td>创建元素节点</td></tr><tr><td>document.createTextNode()</td><td>创建文本节点</td></tr><tr><td>document.createAttribute()</td><td>创建属性节点</td></tr><tr><td>appendChild()</td><td>在指定元素的子节点列表的末尾添加一个节点</td></tr><tr><td>insertBefore()</td><td>为当前节点增加一个子节点（插入到指定子节点之前）</td></tr><tr><td>getAttributeNode()</td><td>返回指定名称的属性节点</td></tr><tr><td>setAttributeNode()</td><td>设置或者改变指定名称的属性节点</td></tr></tbody></table><p>create系列的方法是由document对象提供的，与Node对象无关。</p><p><a name="29af0a69"></a></p><h3 id="3-3-节点删除"><a href="#3-3-节点删除" class="headerlink" title="3.3 节点删除"></a>3.3 节点删除</h3><p>语法：removeChild()和removeAttributeNode()方法实现。</p><p>返回值：是被移出的元素节点或属性节点。</p><p><a name="731e4447"></a></p><h3 id="3-4-练习作业"><a href="#3-4-练习作业" class="headerlink" title="3.4 练习作业"></a>3.4 练习作业</h3><ul><li>列表的增删和移动 <ul><li>编写HTML代码，设计列表的结构与显示样式。</li><li>编写SmartList对象，用于实现列表的生成。</li><li>编写Find对象，用于获取指定前缀的元素，查找移动列表项的前后元素。</li><li>编写List对象，用于创建列表对象，处理上移、下移、删除按钮的单击事件。</li><li>编写add对象，控制添加区域是否显示、添加到列表内的操作或取消添加操作。</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661221049750-ab20edda-3032-4b6b-b7f6-398e42288761.png#clientId=u458cc838-c42c-4&from=paste&height=559&id=uf791ca5c&name=image.png&originHeight=559&originWidth=532&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36158&status=done&style=none&taskId=u988d6f4a-1c4b-4019-8f92-c86969990b9&title=&width=532" alt="image.png"></p><p><a name="488a881b"></a></p><h2 id="4-练习作业"><a href="#4-练习作业" class="headerlink" title="4 练习作业"></a>4 练习作业</h2><ul><li>商品购物车 <ul><li>编写HTML代码，设计购物车的结构与显示样式。</li><li>编写ShopCart对象，用于完成购物车的所有功能。</li><li>编写Find对象，用于获取指定前缀的元素。</li><li>编写Cart对象，用来创建购物车，实现商品的添加、完成购物车的统计、全选以及商品删除功能。</li><li>编写Item对象，创建购物车中的一件商品及商品的小计，商品的选择、商品数量的修改以及删除操作。</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>事件</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/39-%E4%BA%8B%E4%BB%B6/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/39-%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>DOM中的事件是一个很中要的东西，它可以让用户和浏览器之间进行交互，以此来实现人机交互效果。<br><a name="eLkgZ"></a></p><h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><p>DOM事件分为DOM0级事件和DOM2级事件。DOM0级其实不存在，我们把DOM最初的版本叫0级。在DOM2级的时候更新了一种新的事件绑定的方式，所以才有了所谓DOM0级和DOM2级事件。</p><ul><li>click</li><li>keyup keydown keypress</li><li>scroll</li><li>mouseover</li></ul><p>DOM事件在去使用的过程中，语法很简单。<br><a name="Hm2qc"></a></p><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><p>DOM0级事件绑定：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">on</span>事件名 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <br>&#125;<br><br><span class="hljs-comment">// 该方法绑定时无法同时给同一个元素绑定多个相同的事件</span><br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">// 这个会覆盖上面的</span><br></code></pre></td></tr></table></figure><p>DOM2级事件绑定:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;事件名&quot;</span>, 事件句柄, isCapture)<br><br><span class="hljs-comment">// 一般这么写</span><br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;事件名&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>IE8及以下版本需要使用<code>attachEvent()</code>了解即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on事件类型&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;)<br></code></pre></td></tr></table></figure><p><a name="WrLhC"></a></p><h3 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h3><p>DOM0级事件移除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">onclick</span> = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>DOM2级事件移除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;事件名&quot;</span>, 事件句柄, isCapture)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handler</span> () &#123;&#125;<br><br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;事件名&#x27;</span>, handler, <span class="hljs-literal">false</span>)<br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;事件名&#x27;</span>, handler, <span class="hljs-literal">false</span>)<br><br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;事件名&#x27;</span>, handler, <span class="hljs-literal">true</span>)<br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;事件名&#x27;</span>, handler, <span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><p><a name="Yt57O"></a></p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>最早的时候，浏览器市场被网景公司netscape占据，后来微软推出了IE抢占市场，后来网景就倒闭了。<br />两个浏览器有不同的思想。netScape浏览器，在事件执行操作上，推崇事件捕获。而IE浏览器推崇事件冒泡<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1661131976626-5f6b4055-d840-4260-b354-881ab15956e5.png#clientId=u1fdf6eb0-b2d7-4&from=paste&height=742&id=u15cf8ac2&name=image.png&originHeight=742&originWidth=1048&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27061&status=done&style=none&taskId=u32605a83-a259-48d5-b27c-2b458b9a94c&title=&width=1048" alt="image.png"><br />事件流在最早有两种相对的事件流：冒泡事件流和捕获事件流。<br><a name="S5hKW"></a></p><h3 id="冒泡事件流"><a href="#冒泡事件流" class="headerlink" title="冒泡事件流"></a>冒泡事件流</h3><p>当我们触发一个元素的事件时，会从这个这个元素沿着DOM树向上冒泡，有相同事件的元素会执行对应元素上的事件，没有则继续冒泡，直到到document结束。图中红色部分。<br><a name="ixagK"></a></p><h3 id="捕获事件流"><a href="#捕获事件流" class="headerlink" title="捕获事件流"></a>捕获事件流</h3><p>当我们触发一个元素的事件时，会从document沿着DOM树向下捕获， 直到找到这个元素位置，途径的元素有对应事件，则执行，和冒泡顺序相反<br><a name="s5aOF"></a></p><h3 id="DOM2级事件有了标准事件流"><a href="#DOM2级事件有了标准事件流" class="headerlink" title="DOM2级事件有了标准事件流"></a>DOM2级事件有了标准事件流</h3><p>在标准的事件流中，先捕获，到达事件源元素，再冒泡。具体实在捕获阶段执行事件还是在冒泡阶段执行事件，需要看第三个参数是true还是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;事件&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-literal">false</span>) <span class="hljs-comment">// 在冒泡阶段执行事件</span><br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;事件&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-literal">true</span>) <span class="hljs-comment">// 在捕获阶段执行事件</span><br></code></pre></td></tr></table></figure><p><a name="gUJRE"></a></p><h3 id="事件流带来的好处和坏处"><a href="#事件流带来的好处和坏处" class="headerlink" title="事件流带来的好处和坏处"></a>事件流带来的好处和坏处</h3><p><a name="OaVs9"></a></p><h4 id="事件委托（事件代理）"><a href="#事件委托（事件代理）" class="headerlink" title="事件委托（事件代理）"></a>事件委托（事件代理）</h4><p>使用js添加到页面上的内容，可以用事件委托。如果要给一大堆相同的元素添加相同的事件，也可以使用事件委托。<br />把本该自己执行的事件添加到自己的父元素或者祖先元素上，然后利用事件对象限制执行的条件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">e.<span class="hljs-property">target</span> <span class="hljs-comment">// 具体的事件作用的元素</span><br></code></pre></td></tr></table></figure><ul><li>可以给后续添加的元素绑定事件</li><li>节省内存<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">祖先元素.<span class="hljs-property">on</span>事件类型 = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">xxx</span> === <span class="hljs-string">&quot;xxx&quot;</span>) &#123;<br>    <span class="hljs-comment">// 执行对应的操作</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 当元素代理的事件过多时，可以使用switch</span><br>祖先元素.<span class="hljs-property">on</span>事件类型 = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">switch</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">xxx</span>) &#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>: <br>      <br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">3</span>:<br><br>      <span class="hljs-keyword">break</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><a name="yAuMY"></a></li></ul><h4 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h4><p>冒泡在有些时候需要被阻止，当元素本身和内部元素有相同类型的事件执行时，一般需要阻止冒泡</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">stopPropagation</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>阻止冒泡在IE低版本浏览器中，可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">e.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure><p>现在无所谓了，记住第一种方式即可。<br><a name="wQRxg"></a></p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>事件对象是在所有的事件中都会自动生成的一个对象。这个对象叫事件对象Event<br><a name="Z7jI4"></a></p><h3 id="如何获取到事件对象？"><a href="#如何获取到事件对象？" class="headerlink" title="如何获取到事件对象？"></a>如何获取到事件对象？</h3><p>直接在事件函数中，填入形参<code>e</code>即可在函数中把e当成事件对象使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">on</span>事件名 = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// 给事件函数写一个形参一般用 e evt event 都可以</span><br>  <span class="hljs-comment">// 在函数内部就可以使用这个参数了</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">// 千万不要考虑，这个e哪来的。</span><br>&#125;<br><br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;事件名&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;&#125;, <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>IE8的时候，是不能用这个e的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">on</span>事件名 = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// 直接获取window.event</span><br>  e = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span> <span class="hljs-comment">// 现在无所谓了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>事件对象中，包含了很多我们有用的属性，后续我们慢慢讲解。<br><a name="vDELk"></a></p><h3 id="阻止浏览器默认行为"><a href="#阻止浏览器默认行为" class="headerlink" title="阻止浏览器默认行为"></a>阻止浏览器默认行为</h3><p>诸如a标签跳转，表单提交，鼠标右键打开菜单，这些操作都是浏览器的默认行为。<br />a标签跳转，在网页中，有很多时候，我们需要借助a标签的特性，但是又不想发生任何跳转，我们就需要取消浏览器默认行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">on</span>事件 = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以直接返回false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">on</span>事件 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 其他代码</span><br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">on</span>事件 = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br><br>  e.<span class="hljs-property">returnValue</span> = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>一般a标签不会用这个方式，我们会使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="klqql"></a></p><h3 id="事件对象中的位置信息"><a href="#事件对象中的位置信息" class="headerlink" title="事件对象中的位置信息"></a>事件对象中的位置信息</h3><p><a name="tdRXN"></a></p><h4 id="e-screenX-x2F-e-screenY"><a href="#e-screenX-x2F-e-screenY" class="headerlink" title="e.screenX &#x2F; e.screenY"></a>e.screenX &#x2F; e.screenY</h4><p>鼠标点击的位置距离屏幕左侧&#x2F;顶部的距离<br><a name="kfr0M"></a></p><h4 id="e-clientX-x2F-e-clientY"><a href="#e-clientX-x2F-e-clientY" class="headerlink" title="e.clientX &#x2F; e.clientY"></a>e.clientX &#x2F; e.clientY</h4><p>鼠标点击的位置，距离浏览器窗口左侧&#x2F;顶部的距离<br><a name="yuyuS"></a></p><h4 id="e-layerX-x2F-e-layerY"><a href="#e-layerX-x2F-e-layerY" class="headerlink" title="e.layerX &#x2F; e.layerY"></a>e.layerX &#x2F; e.layerY</h4><p>默认情况下，和clientX一样，如果元素中有定位属性，则基于该元素offsetParent的距离，如果元素自身有定位属性，则距离自身左侧&#x2F;顶部的距离。<br><a name="F0HJd"></a></p><h4 id="e-offsetX-x2F-e-offsetY"><a href="#e-offsetX-x2F-e-offsetY" class="headerlink" title="e.offsetX &#x2F; e.offsetY"></a>e.offsetX &#x2F; e.offsetY</h4><p>距离border内侧的距离</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>定时器</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/38-%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/38-%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在网页上我们有相关需求</p><ul><li>延迟多少秒后执行代码</li><li>每隔多少秒执行一次代码</li></ul><p>在我们使用定时器时，我们想要带代码去执行，需要放在一个函数中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">定时器(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, 延迟时间)<br></code></pre></td></tr></table></figure><p>js执行代码，优先执行同步代码，然后才执行异步代码。<br />延迟时间单位为毫秒。1000 是 1s<br><a name="KQGvn"></a></p><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, 延迟时间)<br></code></pre></td></tr></table></figure><p>如果想要结束计时器的计时，需要使用<code>clearTimeout</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">clearTimeout</span>(数字) <span class="hljs-comment">// 数字指的是第几个计时器 这个数字不好分辨。每个计时器在生成时，返回值就是对应的数</span><br><br><span class="hljs-keyword">let</span> t = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">let</span> t2 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// 我们可以通过写变量清除计时器</span><br><span class="hljs-title function_">cleartTimeout</span>(t)<br><span class="hljs-title function_">cleartTimeout</span>(t2)<br></code></pre></td></tr></table></figure><p><a name="llLgZ"></a></p><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h2><p>每隔固定的时间执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, 时间间隔)<br></code></pre></td></tr></table></figure><p>如果我们想要结束对应的计时器，需要使用<code>clearInterval</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> t = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-number">1000</span>)<br><br><span class="hljs-built_in">clearInterval</span>(t)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js元素的常见尺寸</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/37-js%E5%85%83%E7%B4%A0%E7%9A%84%E5%B8%B8%E8%A7%81%E5%B0%BA%E5%AF%B8/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/37-js%E5%85%83%E7%B4%A0%E7%9A%84%E5%B8%B8%E8%A7%81%E5%B0%BA%E5%AF%B8/</url>
    
    <content type="html"><![CDATA[<p>我们在网页上通常要获取到元素的尺寸，可以从样式入手，用getComputedStyle获取。但是因为带的有单位，并且获取时不方便。所以我们可以使用其他操作<br><a name="zQCeD"></a></p><h2 id="常见尺寸获取"><a href="#常见尺寸获取" class="headerlink" title="常见尺寸获取"></a>常见尺寸获取</h2><p><a name="rJ4h2"></a></p><h3 id="clientWidth-x2F-clientHeight"><a href="#clientWidth-x2F-clientHeight" class="headerlink" title="clientWidth &#x2F; clientHeight"></a>clientWidth &#x2F; clientHeight</h3><p>元素padding + width &#x2F; padding + height<br><a name="uZto5"></a></p><h3 id="clientLeft-x2F-clientTop"><a href="#clientLeft-x2F-clientTop" class="headerlink" title="clientLeft &#x2F; clientTop"></a>clientLeft &#x2F; clientTop</h3><p>元素本身边框大小<br><a name="bxBV5"></a></p><h3 id="offsetWidth-x2F-offsetHeight"><a href="#offsetWidth-x2F-offsetHeight" class="headerlink" title="offsetWidth &#x2F; offsetHeight"></a>offsetWidth &#x2F; offsetHeight</h3><p>获取元素的border + padding + width &#x2F; border + padding + height<br />能够最精确的获取到元素所占的空间<br><a name="cEE5B"></a></p><h3 id="offsetLeft-x2F-offsetTop"><a href="#offsetLeft-x2F-offsetTop" class="headerlink" title="offsetLeft &#x2F; offsetTop"></a>offsetLeft &#x2F; offsetTop</h3><p>元素距离其offsetParent的边框内部的距离<br><a name="XixA8"></a></p><h3 id="scrollWidth-x2F-scrollHeight"><a href="#scrollWidth-x2F-scrollHeight" class="headerlink" title="scrollWidth &#x2F; scrollHeight"></a>scrollWidth &#x2F; scrollHeight</h3><p>整体内容高度包含padding值，不包含border，内容溢出才会有所改变，不溢出，则和clientWidth &#x2F; clientHeight一样。前者不常用。<br><a name="ArYcA"></a></p><h3 id="scrollLeft-x2F-scrollTop"><a href="#scrollLeft-x2F-scrollTop" class="headerlink" title="scrollLeft &#x2F; scrollTop"></a>scrollLeft &#x2F; scrollTop</h3><p>滚动距离<br><a name="g01vS"></a></p><h2 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h2><p>绝对定位元素的祖先元素中，最近哪个元素有定位属性，这个元素就是它的offsetParent<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660872068710-aee90090-eea9-49c1-931f-e90187df14de.png#clientId=u0af68590-dccb-4&from=paste&id=u60efaa9c&name=image.png&originHeight=602&originWidth=609&originalType=url&ratio=1&rotation=0&showTitle=false&size=34615&status=done&style=none&taskId=udb842e94-7cab-4028-b3c4-7d925becf50&title=" alt="image.png"></p><p><a name="ONIG4"></a></p><h2 id="display-none-和-visibility-hidden的区别"><a href="#display-none-和-visibility-hidden的区别" class="headerlink" title="display:none 和 visibility:hidden的区别"></a>display:none 和 visibility:hidden的区别</h2><p>前者消失，无法用js获取其尺寸，后者不可见，还占位，但不会遮盖其他元素。js可以正常获取对应的尺寸。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/36-DOM/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/36-DOM/</url>
    
    <content type="html"><![CDATA[<p><a name="cH1Wo"></a></p><h2 id="DOM是什么？"><a href="#DOM是什么？" class="headerlink" title="DOM是什么？"></a>DOM是什么？</h2><p>DOM的全称叫Document Object Model（文档对象模型）。他提供了js一个能力：获取网页上的元素并且操作它们。<br><a name="vhEdT"></a></p><h3 id="复习一下对象的操作"><a href="#复习一下对象的操作" class="headerlink" title="复习一下对象的操作"></a>复习一下对象的操作</h3><p>对象中的方法怎么调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">对象.方法名()<br></code></pre></td></tr></table></figure><p>对象中的方法怎么变成新的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">对象.方法名 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p>对象中的属性怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(对象.属性名)<br></code></pre></td></tr></table></figure><p>对象中的属性怎么覆盖变成新的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj.属性名 = 新的值<br></code></pre></td></tr></table></figure><p>为什么我们要复习对象的用法，因为DOM皆为对象。所谓操作元素，就是在调用对象的方法和属性，覆盖原有的属性值。<br><a name="a0OxU"></a></p><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p>我们把一个网页抽象为DOM树，在DOM树上的元素我们成为DOM元素，都是有互相之间的关系。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660786019368-3fe671cf-7214-4261-8d82-4b3348d95c88.png#clientId=ue08a58c2-3013-4&from=paste&height=475&id=ue44a9732&name=image.png&originHeight=475&originWidth=851&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16484&status=done&style=none&taskId=uc715959c-9e5e-4a5a-9d0f-a06c3a4bf35&title=&width=851" alt="image.png"><br><a name="NOozm"></a></p><h2 id="如何使用DOM"><a href="#如何使用DOM" class="headerlink" title="如何使用DOM"></a>如何使用DOM</h2><p><a name="I01pf"></a></p><h3 id="获取DOM"><a href="#获取DOM" class="headerlink" title="获取DOM"></a>获取DOM</h3><p>在之前的方法中，获取DOM需要用不同的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;id值&#x27;</span>) <span class="hljs-comment">// 单个DOM对象</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;name属性&#x27;</span>) <span class="hljs-comment">// 下面三个全是集合</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;标签名&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;class值&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这些方法在现在不推荐使用，不好用。现在一般使用下面的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;选择器&#x27;</span>) <span class="hljs-comment">// 得到的是第一个DOM对象</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;选择器&quot;</span>) <span class="hljs-comment">// 得到符合条件的所有的DOM对象的集合</span><br></code></pre></td></tr></table></figure><p>在控制台上打印获取到的DOM，展示出来的是对应元素的标签<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660786395445-24fb8b19-19f3-4b69-9e44-9e1d6698bc34.png#clientId=ue08a58c2-3013-4&from=paste&height=19&id=u7856ca72&name=image.png&originHeight=19&originWidth=224&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1877&status=done&style=none&taskId=u5929b4a7-d434-47cd-8d6d-f580eb99d27&title=&width=224" alt="image.png"><br />但是实际上，这个东西是个对象。怎么样才能看到对应的对象中的属性和方法呢？？？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([<span class="hljs-variable constant_">DOM</span>])<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660786458643-ce98d167-385e-4cf5-8d8d-0c4ae9cd84df.png#clientId=ue08a58c2-3013-4&from=paste&height=774&id=u1ad6cf6e&name=image.png&originHeight=774&originWidth=452&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36853&status=done&style=none&taskId=u1549cc74-fe8b-4d70-a502-3b6523dda36&title=&width=452" alt="image.png"><br />DOM对象就是一个对象，里面包含了属性和方法。<br><a name="TtcEl"></a></p><h3 id="改变网页元素的内容"><a href="#改变网页元素的内容" class="headerlink" title="改变网页元素的内容"></a>改变网页元素的内容</h3><ul><li>innerHTML</li><li>innerText</li></ul><p>既然这两个是DOM的属性，那么是不是可以通过<code>DOM.innerText</code>获取到网页上的内容。同理，我们可以通过<code>DOM.innerText = &quot;新的值&quot;</code>来修改网页上的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量名 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;选择器&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(变量名.<span class="hljs-property">innerText</span>) <span class="hljs-comment">// 获取到对应元素上的内容</span><br><br>变量名.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;值&quot;</span> <span class="hljs-comment">// 设置DOM对象上的内容，因为这个DOM对象和网页有关联，所以网页上对应的内容改变。</span><br></code></pre></td></tr></table></figure><p>innerText和innerHTML的区别<br />在获取内容过程，前者只会获取到文本，后者可以获取到内部的标签。<br />在设置内容过程，前者会把文本中的标签直接展示在页面上，后者会渲染称真实的标签。<br />注意！！！！！！！！！！！！！！！！！！！！！！！！！不是受我们信任的带HTML标签的字符串，不要用innerHTML。innerHTML会有XSS攻击风险<br />除了inner还是有outer</p><ul><li>outerHTML</li><li>outerText</li></ul><p>不常用，和前者的区别在于，带的有父元素的标签。<br><a name="yPpHt"></a></p><h3 id="表单元素中的内容"><a href="#表单元素中的内容" class="headerlink" title="表单元素中的内容"></a>表单元素中的内容</h3><ul><li>value</li></ul><p>value属性表示表单中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(input.<span class="hljs-property">value</span>) <span class="hljs-comment">// 获取到最初的value值</span><br><br>input.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;新的value值&quot;</span> <span class="hljs-comment">// 将input中的内容设置成新的值</span><br></code></pre></td></tr></table></figure><p>设置value的操作，一般只在可输入框中进行设置。比如：把输入框中的内容清空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)<br>input.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 清空输入框</span><br></code></pre></td></tr></table></figure><p> textarea元素虽然是个双标签，同时内容也是出现在标签中，但是获取到对应的值还是要用<code>.value</code>获取。<br><a name="lqXFo"></a></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>HTML属性分为两种：原生属性和自定义属性<br />DOM对象会对HTML中原生属性有对应的映射，如果原生属性名不是关键字或者保留字，则直接用对应属性名，例如<code>id</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">id</span> <span class="hljs-comment">// 获取到对应元素的id值</span><br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;新的值&quot;</span> <span class="hljs-comment">// html的id属性就会变成新的值</span><br></code></pre></td></tr></table></figure><p>如果原生属性是关键字或者保留字，则会提供新的名字进行映射，例如：class变成了className</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">className</span> <span class="hljs-comment">// 获取到对应的元素的class值</span><br><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;新的值&quot;</span> <span class="hljs-comment">// 设置新的class</span><br></code></pre></td></tr></table></figure><p>例如：label的 for 变成了 htmlFor<br />当我们对这些DOM对象中的属性进行修改时，就会改变HTML上的原属性。<br />DOM对象对于自定义属性不会使其出现在DOM对象（在DOM对象上，没有自定义属性的映射）。我们就需要借助想关的方法</p><ul><li><p>getAttribute(属性名)  获取对应的属性的属性值</p></li><li><p>setAttribute(属性名, 值) 添加&#x2F;修改对应的属性的值</p></li><li><p>removeAttribute(属性名) 删除对应的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;选择器&quot;</span>)<br>dom.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;x&quot;</span>)<br>dom.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">10</span>)<br>dom.<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&#x27;x&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果我们直接给DOM上添加要给属性值，这个值会不会映射到HTML上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-property">aaa</span> = <span class="hljs-string">&quot;值&quot;</span> <span class="hljs-comment">// 这个属性就是DOM对象上的属性，和HTML无关</span><br></code></pre></td></tr></table></figure></li><li><p>html上有的原生属性，在DOM也会有对应的属性名</p></li><li><p>原生属性在js是关键子或者保留字，DOM中有替代属性名</p></li><li><p>html上有自定义属性，DOM可以通过getAttribute获取</p></li><li><p>给DOM添加一个随意的属性，只能在JS中获取，HTML上没有<br><a name="PXVFW"></a></p></li></ul><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>我们css可以设置HTML的样式，我们可以用js来设置CSS，依靠js对样式的抽象的对象<code>dom.style</code><br />dom.style中包含了对应dom的所有的css样式，是一个对象。</p><ul><li>复合属性例如background-color在js中要用驼峰命名 backgroundColor</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660794433424-e603fc91-23c7-4656-9579-f32f8998d088.png#clientId=u137732ea-c008-4&from=paste&height=243&id=ua5020577&name=image.png&originHeight=243&originWidth=174&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6359&status=done&style=none&taskId=ua59494e0-e3a6-4b11-974a-d7c4c3874c0&title=&width=174" alt="image.png"><br />利用DOM.style只能获取到行内的样式，设置也只能设置到行内。<br />设置到行内无所谓，但是因为写css的时候不建议写到行内，所以获取操作在大部分情况下，使用这个操作不合适。<br />如果我们想要用这个属性获取样式，需要确保已经用js设置过了。<br><a name="OJA4w"></a></p><h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">style</span>.样式名 = <span class="hljs-string">&quot;值&quot;</span><br></code></pre></td></tr></table></figure><p><a name="ZMN8c"></a></p><h4 id="获取样式"><a href="#获取样式" class="headerlink" title="获取样式"></a>获取样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">style</span>.样式名 <span class="hljs-comment">// 不一定能获取到，得看行内有没有对应的样式</span><br></code></pre></td></tr></table></figure><p>既然上面的操作不能获取到我们想要的样式，js提供了一个全局方法叫<code>getComputedStyle</code></p><blockquote><p>获取样式的操作不常用，最多用的获取宽高，获取宽高我们会用其他的属性，不会用样式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getComputedStyle</span>(<span class="hljs-variable constant_">DOM</span>对象) <span class="hljs-comment">// 计算后的样式对象</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量名 = <span class="hljs-title function_">getComputedStyle</span>(dom)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(变量名.<span class="hljs-property">css</span>属性名)<br></code></pre></td></tr></table></figure><p>getComputedStyle可以用来获取伪元素样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量 = <span class="hljs-title function_">getComputedStyle</span>(dom, <span class="hljs-string">&#x27;after&#x27;</span>)<br><span class="hljs-comment">// 变量就是一个对象，after伪元素所有的样式 after可以换成before</span><br></code></pre></td></tr></table></figure><p>我们能不能封装一个函数getStyle，用来获取某个元素的某个样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getStyle</span> (ele, style) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getComputedStyle</span>(ele)[style]<br>&#125;<br></code></pre></td></tr></table></figure><p>未来我们会学习很多的属性用来获取特定的css值。<br><a name="F7ewY"></a></p><h4 id="可以同时设置多个样式的操作"><a href="#可以同时设置多个样式的操作" class="headerlink" title="可以同时设置多个样式的操作"></a>可以同时设置多个样式的操作</h4><p>cssText<br />通过<code>DOM.style.cssText</code>进行获取和设置操作，它用来获取到style中的文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px; height: 200px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> <span class="hljs-comment">// width: 200px; height: 200px;</span><br><br>dom.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">&quot;height: 300px;&quot;</span> <span class="hljs-comment">// 直接把所有的style都给覆盖</span><br><span class="hljs-comment">// 如果要在原有基础上增加对应的样式，需要使用 +=</span><br>dom.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> += <span class="hljs-string">&quot;新的样式&quot;</span><br></code></pre></td></tr></table></figure><p>如果有相同属性，则新属性会覆盖旧属性。<br><a name="cee5F"></a></p><h3 id="类名的设置和获取"><a href="#类名的设置和获取" class="headerlink" title="类名的设置和获取"></a>类名的设置和获取</h3><p>如果想要获取到所有的类名，需要通过<code>dom.className</code>通过这样的方式获取到className之后，我们也可以设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dom.<span class="hljs-property">className</span>) <span class="hljs-comment">// 对应元素上所有的类名</span><br>dom.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;类名&quot;</span> <span class="hljs-comment">// 把元素之前类名全部删除，设置为新的类名</span><br><span class="hljs-comment">// 如果不想覆盖</span><br>dom.<span class="hljs-property">className</span> += <span class="hljs-string">&quot; 类名&quot;</span><br></code></pre></td></tr></table></figure><p>但是这种操作很容易出现问题所以在后续js更新中，推出了新的方法<code>dom.classList</code></p><ul><li>add</li><li>remove</li><li>toggle</li><li>replace</li><li>contains<br><a name="S99CU"></a></li></ul><h4 id="如果我们想要添加相关的类名"><a href="#如果我们想要添加相关的类名" class="headerlink" title="如果我们想要添加相关的类名"></a>如果我们想要添加相关的类名</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;类名&#x27;</span>, <span class="hljs-string">&quot;类名2&quot;</span>, <span class="hljs-string">&quot;类名n&quot;</span>)<br></code></pre></td></tr></table></figure><p>会依次给对应的元素上添加对应的类名。<br><a name="XRrLZ"></a></p><h4 id="如果我们想要移除相关类名"><a href="#如果我们想要移除相关类名" class="headerlink" title="如果我们想要移除相关类名"></a>如果我们想要移除相关类名</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;类名&#x27;</span>, <span class="hljs-string">&quot;类名2&quot;</span>, <span class="hljs-string">&quot;类名n&quot;</span>)<br></code></pre></td></tr></table></figure><p>会删除对应元素上对应的类名<br><a name="Q4sfc"></a></p><h4 id="切换类名有无"><a href="#切换类名有无" class="headerlink" title="切换类名有无"></a>切换类名有无</h4><p>当一个元素上有对应的类名时，就删除，如果没有，就添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&quot;类名&quot;</span>)<br></code></pre></td></tr></table></figure><p><a name="xwDMf"></a></p><h4 id="替换类名"><a href="#替换类名" class="headerlink" title="替换类名"></a>替换类名</h4><p>把旧的类名替换为新的类名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">classList</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;已有的类名&quot;</span>, <span class="hljs-string">&quot;新的类名&quot;</span>)<br></code></pre></td></tr></table></figure><p><a name="uqTMc"></a></p><h4 id="有没有类名"><a href="#有没有类名" class="headerlink" title="有没有类名"></a>有没有类名</h4><p>用于判断元素中有没有某个类名，一般在判断条件中用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&quot;类名&quot;</span>) <span class="hljs-comment">// true 或者 false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组和字符串方法</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/35-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/35-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在JS中内置了很多的方法，不同的对象有不同的方法（方法其实就是对象中的函数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  方法名: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br>obj.方法名()<br></code></pre></td></tr></table></figure><p><a name="jsxpw"></a></p><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><p>数组方法是属于数组中的一些函数，可以对数组进行操作。使用的方式是：<code>数组.方法名(参数)</code><br />数组方法只能被数组调用<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660622595287-82cd0f6b-b2ac-4c02-91bb-46f1b7a294fc.png#clientId=uf1662ecd-eaab-4&from=paste&height=596&id=uffc72309&name=image.png&originHeight=596&originWidth=679&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51401&status=done&style=none&taskId=u29aaa375-a314-4fdb-a23e-43d305e52d9&title=&width=679" alt="image.png"><br><a name="RPDU9"></a></p><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>向数据的末尾插入新的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = []<br>arr.<span class="hljs-title function_">push</span>(值) <br><span class="hljs-comment">// 数组就会变成 [值]</span><br><br><span class="hljs-comment">// 也可以同时插入多个值</span><br>arr.<span class="hljs-title function_">push</span>(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>, 值n)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660622072404-83b42c4d-8764-4b95-9fad-e986d10e6dbc.png#clientId=uf1662ecd-eaab-4&from=paste&height=143&id=u264c98b2&name=image.png&originHeight=143&originWidth=454&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11571&status=done&style=none&taskId=u1122c653-41b2-46ac-9a0a-3ee129f9cde&title=&width=454" alt="image.png"><br />以后记住，VSCode提示这种写法，表示可以写很多个参数。<br />push方法有返回值，一般不用，返回值是插入新元素之后的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">8</span>， <span class="hljs-number">9</span>， <span class="hljs-number">7</span>]<br><span class="hljs-keyword">let</span> length = arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">5</span>) <span class="hljs-comment">// 一般不会没事获取到它的返回值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(length) <span class="hljs-comment">// 4 </span><br></code></pre></td></tr></table></figure><p><a name="jvdJE"></a></p><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>删除数组的末尾最后一个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">pop</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, 2]</span><br></code></pre></td></tr></table></figure><p>pop有返回值，是被删除的那个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> item = arr.<span class="hljs-title function_">pop</span>() <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p><a name="Ikbsh"></a></p><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p>在数组的首位添加一个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = []<br>arr.<span class="hljs-title function_">unshift</span>(值)<br>arr.<span class="hljs-title function_">unshift</span>(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>, 值n)<br></code></pre></td></tr></table></figure><p>他的返回值和push一致，是插入后的数组长度<br><a name="E4GjQ"></a></p><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>删除数组首位的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">shift</span>() <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [2, 3]</span><br></code></pre></td></tr></table></figure><p>他的返回值是被删除的值。<br><a name="VQUy8"></a></p><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>根据目标值查找数组中对应的值的下标。如果有返回下标，如果没有返回-1<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660622671935-d50fd255-0f43-4e7a-88ea-774f5dae379f.png#clientId=uf1662ecd-eaab-4&from=paste&height=110&id=ua0058f76&name=image.png&originHeight=110&originWidth=455&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7804&status=done&style=none&taskId=u25c8bd49-2282-431f-98c9-f8d23feab4a&title=&width=455" alt="image.png"><br />fromIndex ?: number 表示第二个参数是数字，？表示可选（可写可不写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">3</span>)) <span class="hljs-comment">// 2 找到第一个出现的3 就结束</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 5 跳1 2 3 4 的遍历直接从下标为4的元素开始</span><br></code></pre></td></tr></table></figure><p><a name="tRkdO"></a></p><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><p>和indexOf功能相同，找到最后一个出现的目标值的下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">5</span>)) <span class="hljs-comment">// 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>和indexOf的方向刚好相反，所以第二个参数写好之后，表示向前查找。<br><a name="SRlH5"></a></p><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>ES6中新增的方法，兼容性差，IE浏览器不支持，用来判断数组中是否存在某个值，返回结果为布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">includes</span>(<span class="hljs-number">3</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">includes</span>(<span class="hljs-number">6</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>该属性也支持第二个参数，和indexOf的第二个参数一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">includs</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// false 从下标为3的元素开始往后找。没有2，所以为false</span><br></code></pre></td></tr></table></figure><p><a name="k31Rd"></a></p><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>想要把两个数组拼接成一个数组时，可以使用concat。concat的返回值是拼接后的数组，原数组不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]) <span class="hljs-comment">// 这个操作的返回值就是拼接后的数组 [1,2,3,4,5,6]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1,2,3] 不变</span><br><br>arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], <span class="hljs-number">10</span>) <span class="hljs-comment">// 这个操作的返回值就是拼接后的数组 [1,2,3,4,5,6,7,8,9,10] 里边的值可以直接是数字</span><br><br></code></pre></td></tr></table></figure><p><a name="IiiTP"></a></p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>forEach可以替代for循环进行数组的遍历。个人建议使用forEach替代for循环进行正序的数组遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>  <span class="hljs-comment">// arr[i] 是数组中的每一个值 i是下标</span><br>&#125;<br><br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) &#123;<br>  <span class="hljs-comment">// 这里的item index arr三个参数的名字可以随便改</span><br>  <span class="hljs-comment">// item表示对应的值 index表示下标 arr表示遍历的数组本身</span><br>  <span class="hljs-comment">// 一般这里的参数只需要写 item 最多再写index arr基本不用</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>疑问？为什么我们声明的函数<code>function (item, index, arr) &#123;&#125;</code>我们没有调用也执行了？<br />因为js的内部帮我们进行了调用了。不需要我们自己调用。<br />下面是forEach的原理，因为涉及到了一些高级的用法，所以看看就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">forEach</span>(<span class="hljs-params">arr, callbackfn</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">callbackfn</span>(arr[i], i, arr)<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">forEach</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) &#123;<br>  <br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="s5DHK"></a></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>他和forEach类似，也会产生一个遍历，但是，他有自己固定的功能，在我们想要从一个数组中遍历出某些数据时使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;<br>]<br><br><span class="hljs-comment">// 获取到对应的一个新的数组 [&quot;张三&quot;, &quot;李四&quot;]</span><br><span class="hljs-keyword">let</span> names = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-keyword">return</span> item.<span class="hljs-property">name</span><br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(names) <span class="hljs-comment">// [&#x27;张三&#x27;, &#x27;李四&#x27;]</span><br></code></pre></td></tr></table></figure><p>map的语法和forEach一致。不一样的在于return，map在对应的函数中return会作为新数组中的值。<br />map的返回值是一个和原数组长度一致的数组，通过改变map内部的函数的返回值，可以得到不同的数组。<br />应用场景：在一个数组中，获取到我们想要的数据信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> potatoes = [&#123;<span class="hljs-attr">weight</span>: <span class="hljs-number">400</span>&#125;, &#123;<span class="hljs-attr">weight</span>: <span class="hljs-number">300</span>&#125;, &#123;<span class="hljs-attr">weight</span>: <span class="hljs-number">599</span>&#125;]<br><br><span class="hljs-comment">// [400, 300, 599]</span><br><span class="hljs-keyword">let</span> weights = potatoes.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">potato</span>) &#123;<br>  <span class="hljs-keyword">return</span> potato.<span class="hljs-property">weight</span><br>&#125;)<br><br><br><span class="hljs-keyword">let</span> arr = [&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>&#125;]<br><br><span class="hljs-comment">// 只要数组中的a和c属性 [&#123;a: 1, c: 3&#125;, &#123;a: 1, c: 3&#125;, &#123;a: 1, c: 3&#125;, &#123;a: 1, c: 3&#125;]</span><br>arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">a</span>: item.<span class="hljs-property">a</span>, <span class="hljs-attr">c</span>: item.<span class="hljs-property">c</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="jxShm"></a></p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>把数组按照规则转换为字符串，不会改变原数组，返回值是一个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;字符串&quot;</span>) <span class="hljs-comment">// 1字符串2字符串3字符串4字符串5字符串6</span><br></code></pre></td></tr></table></figure><p><code>arr.join(&quot;&quot;)</code>表示直接讲数组中的值连接在一起变成字符串<br /><code>arr.join()</code>表示用<code>,</code>连接，和toString效果一致。<br><a name="rR6vG"></a></p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>反向，将数组直接变成一个倒序排列的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br>arr.<span class="hljs-title function_">reverse</span>() <span class="hljs-comment">// 返回值为倒序的数组 </span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// 原数组也会变成倒序的数组</span><br></code></pre></td></tr></table></figure><p><a name="JaD0I"></a></p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>用于数组中的值的排序，升序或者降序。返回值是排序后的数组，原数组也会改变。<br />默认的排序规则按照对应的查词典的方式，首位先比较大小（按ASCII码进行比较）小的在前，大的在后，相同则比较下一位。依次类推。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 对数字进行排序</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">24235</span>,<span class="hljs-number">5</span>,<span class="hljs-number">264</span>,<span class="hljs-number">3</span>,<span class="hljs-number">532</span>,<span class="hljs-number">56</span>,<span class="hljs-number">4367</span>,<span class="hljs-number">34</span>,<span class="hljs-number">65324</span>]<br><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a - b <span class="hljs-comment">// 升序排列</span><br>&#125;)<br><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> b - a <span class="hljs-comment">// 降序排列</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>函数中，我们的核心代码，就是在判断a和b中的值谁大谁小的问题。<br />我们要判断谁大的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>    <span class="hljs-keyword">return</span> 负数 <span class="hljs-comment">// 如果是负数 b放前面 a放后面  如果是正数相反</span><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (a &lt; b) &#123;<br>    <span class="hljs-keyword">return</span> 正数 <span class="hljs-comment">// b放在前面 a在后面</span><br>  &#125;<br>  <br>  <span class="hljs-keyword">if</span> (a === b) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-comment">// 位置不动</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> stus = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span><br>  &#125;, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span><br>  &#125;, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span><br>  &#125;, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小花&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span><br>  &#125;<br>]<br><br><span class="hljs-comment">// 请对学生进行排序，按照年龄从小到大进行排列</span><br>stus.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a.<span class="hljs-property">age</span> - b.<span class="hljs-property">age</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="PmmgH"></a></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 编写方法，实现冒泡</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">29</span>,<span class="hljs-number">45</span>,<span class="hljs-number">51</span>,<span class="hljs-number">68</span>,<span class="hljs-number">72</span>,<span class="hljs-number">97</span>];<br><span class="hljs-comment">//外层循环，控制趟数，每一次找到一个最大值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>  <span class="hljs-comment">// 内层循环,控制比较的次数，并且判断两个数的大小</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> - i; j++) &#123;<br>    <span class="hljs-comment">// 白话解释：如果前面的数大，放到后面(当然是从小到大的冒泡排序)</span><br>    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>      <span class="hljs-keyword">var</span> temp = arr[j];<br>      arr[j] = arr[j + <span class="hljs-number">1</span>];<br>      arr[j + <span class="hljs-number">1</span>] = temp;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<span class="hljs-comment">//[2, 4, 5, 12, 31, 32, 45, 52, 78, 89]</span><br></code></pre></td></tr></table></figure><p><a name="NTjgB"></a></p><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>用来裁切数组，我们如果想要获取到数组中某一部分的数组片段，可以使用slice方法<br /><code>[1,2,3,4,5,6,7,8]</code>想要得到<code>[4,5,6]</code> <br />slice不会改变原数组，slice返回值为裁切下来的数组片段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br>arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// [3]</span><br>arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// [3, 4, 5, 6, 7]</span><br>arr.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">3</span>) <span class="hljs-comment">// -1指最后一位，-3指倒数第三位 [5, 6, 7]</span><br></code></pre></td></tr></table></figure><p><a name="oFzWy"></a></p><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>会改变原数组，将原数组中的值进行修改，有三个功能：插入，删除，修改<br><a name="ttqLI"></a></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>使用两个参数即可，得到的返回值，是删除的值组成的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>arr.<span class="hljs-title function_">splice</span>(下标, 数量) <br></code></pre></td></tr></table></figure><p><a name="cqWcf"></a></p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>需要使用三个参数，第一个参数为下标，表示插入到这个下标的前面，第二个参数为固定的0，后面的参数为要插入的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><br>arr.<span class="hljs-title function_">splice</span>(下标, <span class="hljs-number">0</span>, 插入的值<span class="hljs-number">1</span>, 插入的值<span class="hljs-number">2</span>, 插入的值n) <span class="hljs-comment">// [] 返回值为空，因为没有删除</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// arr改变了</span><br></code></pre></td></tr></table></figure><p><a name="lha5T"></a></p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>所谓修改就是删除原本的值，然后再添加的新的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-comment">// arr.splice(1, 1, 5)</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p><a name="Lkwse"></a></p><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660701048359-2d6b3d79-b87d-4f13-85ce-77ef4170651c.png#clientId=u946b5c09-e22e-4&from=paste&height=785&id=ucce83165&name=image.png&originHeight=785&originWidth=314&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53913&status=done&style=none&taskId=uf44522e6-5357-4cb8-be95-e3dd373b960&title=&width=314" alt="image.png"><br />可以通过打印<code>new String()</code>查看所有的字符串方法<br><a name="SraPW"></a></p><h3 id="split"><a href="#split" class="headerlink" title="split *"></a>split *</h3><p>把字符串按照规则转成数组。和数组方法join刚好相反</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;字符串&quot;</span><br>str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment">// [&quot;字&quot;, &quot;符&quot;, &quot;串&quot;]</span><br><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;1&amp;2&amp;3&quot;</span><br>str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>) <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><p><a name="l42t9"></a></p><h3 id="slice-substr-substring"><a href="#slice-substr-substring" class="headerlink" title="slice substr substring *"></a>slice substr substring *</h3><p>裁切字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;字符串&quot;</span><br>str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 字符</span><br>str.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">2</span>) <span class="hljs-comment">// 符串</span><br>str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 符串</span><br>str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 字符</span><br></code></pre></td></tr></table></figure><p>slice 既支持正数，右支持负数下标<br />substring 正数和slice效果相同，负数不支持<br />substr 第一个参数开始裁切的下标 第二个参数表示要裁切的长度<br><a name="DyVDx"></a></p><h3 id="replace"><a href="#replace" class="headerlink" title="replace *"></a>replace *</h3><p>将一个字符串中指定的字符进行替换，替换成新的字符。没有正则表达式支持的情况下，只能替换第一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;123&quot;</span><br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-comment">// 223</span><br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/值/g</span>, <span class="hljs-string">&quot;替换后的值&quot;</span>)<br><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;aaaaab&quot;</span><br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment">// baaaab</span><br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/a/g</span>, <span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment">// bbbbbb</span><br></code></pre></td></tr></table></figure><p><a name="ZgydM"></a></p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>用于查询某个字符串对应的下标，没有则返回-1。支持正则表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">search</span>(<span class="hljs-string">&#x27;3&#x27;</span>)) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p><a name="UAQwO"></a></p><h3 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf lastIndexOf"></a>indexOf lastIndexOf</h3><p>可以获取到对应的值在字符串中的下标，不支持正则表达式，和数组类似<br />前者正序查找，后者倒序查找。只会找到第一个<br><a name="sgUPu"></a></p><h3 id="toLowerCase-toUpperCase"><a href="#toLowerCase-toUpperCase" class="headerlink" title="toLowerCase toUpperCase"></a>toLowerCase toUpperCase</h3><p>把英文变成纯小写或者纯大写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;AaBb&quot;</span><br>str.<span class="hljs-title function_">toLowerCase</span>() <span class="hljs-comment">// aabb</span><br>str.<span class="hljs-title function_">toUpperCase</span>() <span class="hljs-comment">// AABB</span><br></code></pre></td></tr></table></figure><p><a name="A5CmC"></a></p><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>去除字符串左右两侧的空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;   jfdis  fdkasgjd   &quot;</span><br>str.<span class="hljs-title function_">trim</span>() <span class="hljs-comment">// &quot;jfdis  fdkasgjd&quot;</span><br></code></pre></td></tr></table></figure><p>我们也可以单独清楚前和后的空格，可以利用下面的方法。兼容性很差</p><ul><li>trimStart trimLeft 清除左侧（前面）的空格</li><li>trimEnd trimRight 清除右侧（后面）的空格</li></ul><p>之前我们如果想清除空格，可以使用这样一个操作，前期了解即可</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clojure">function trim (<span class="hljs-name"><span class="hljs-built_in">str</span></span>) &#123;<br>  return str.replace(/^<span class="hljs-character">\s</span>*|<span class="hljs-character">\s</span>*$/g<span class="hljs-punctuation">,</span> &#x27;&#x27;)<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="zgWpN"></a></p><h3 id="includes-1"><a href="#includes-1" class="headerlink" title="includes"></a>includes</h3><p>和数组的includes方法类似，用来判断字符串中是否有指定的字符串，有则返回true，无返回false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;123456&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;2&#x27;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><a name="Q9l4h"></a></p><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h3><p>没有参数<code>str.charCodeAt()</code>会得到对应的字符的ASCII码，如果有多个值，则得到字符串中第一个值的ascii码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;A&quot;</span><br>str.<span class="hljs-title function_">charCodeAt</span>() <span class="hljs-comment">// 65</span><br></code></pre></td></tr></table></figure><p><a name="IkWyO"></a></p><h3 id="String-fromCharCode-ASCII码"><a href="#String-fromCharCode-ASCII码" class="headerlink" title="String.fromCharCode(ASCII码)"></a>String.fromCharCode(ASCII码)</h3><p>我们填入对应的ascii，就会得到对应的字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">65</span>) <span class="hljs-comment">// A</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">65</span>; i &lt;= <span class="hljs-number">91</span>; i++) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(i))<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="QF0b5"></a></p><h2 id="数值方法"><a href="#数值方法" class="headerlink" title="数值方法"></a>数值方法</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660784049598-aa37735a-3d29-4327-a3b6-0b68af39af4c.png#clientId=u2a3d062a-5f5f-4&from=paste&height=73&id=ube9ad356&name=image.png&originHeight=73&originWidth=265&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6300&status=done&style=none&taskId=u270fc15b-9d06-478f-a082-41568ba2fb2&title=&width=265" alt="image.png"><br><a name="Lyw7S"></a></p><h3 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed"></a>toFixed</h3><p>保留小数位，四舍五入，返回的字符串，精确数字不要用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1.2345</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>)) <span class="hljs-comment">// 1.23</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">3</span>)) <span class="hljs-comment">// 1.235</span><br><br></code></pre></td></tr></table></figure><p><a name="Fmw3w"></a></p><h3 id="toPrecision"><a href="#toPrecision" class="headerlink" title="toPrecision"></a>toPrecision</h3><p>返回科学计数法的字符串，参数为科学计数法前面的总位数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-string">&quot;123432654251&quot;</span><br>num.<span class="hljs-title function_">toPrecision</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// 1.23e+11</span><br></code></pre></td></tr></table></figure><p><a name="bh5Ge"></a></p><h3 id="toExponential"><a href="#toExponential" class="headerlink" title="toExponential"></a>toExponential</h3><p>同上，参数指的是小数位<br><a name="AboOY"></a></p><h3 id="在Number中提供了很多的常量"><a href="#在Number中提供了很多的常量" class="headerlink" title="在Number中提供了很多的常量"></a>在Number中提供了很多的常量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Number</span>.<span class="hljs-property">xxx</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">EPSILON</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_SAFE_INTEGER</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">MIN_SAFE_INTEGER</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">MIN_VALUE</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">Number</span>.<span class="hljs-property">NEGATIVE_INFINITY</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">NaN</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">POSITIVE_INFINITY</span><br></code></pre></td></tr></table></figure><ol><li>EPSILON: 2.220446049250313e-16</li><li>MAX_SAFE_INTEGER: 9007199254740991</li><li>MAX_VALUE: 1.7976931348623157e+308</li><li>MIN_SAFE_INTEGER: -9007199254740991</li><li>MIN_VALUE: 5e-324</li><li>NEGATIVE_INFINITY: -Infinity</li><li>NaN: NaN</li><li>POSITIVE_INFINITY: Infinity<br><a name="Ly8AX"></a></li></ol><h2 id="一些全局方法"><a href="#一些全局方法" class="headerlink" title="一些全局方法"></a>一些全局方法</h2><p><a name="qtdOx"></a></p><h3 id="isNaN-值"><a href="#isNaN-值" class="headerlink" title="isNaN(值)"></a>isNaN(值)</h3><p>判断对应的值是否是NaN<br><a name="iy6CX"></a></p><h3 id="Array-isArray-值"><a href="#Array-isArray-值" class="headerlink" title="Array.isArray(值)"></a>Array.isArray(值)</h3><p>用来判断某个值是否是数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>([]) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(&#123;&#125;) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><a name="iZN8j"></a></p><h3 id="获取到精确的数据类型"><a href="#获取到精确的数据类型" class="headerlink" title="获取到精确的数据类型"></a>获取到精确的数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(值) <span class="hljs-comment">// [object 值类型]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>作用域</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/34-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/34-%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>什么是作用域，通俗讲，作用域内部的变量无法被外部获取。用来产生一个封闭的空间，防止外部的变量污染内部的变量。作用域中的变量名允许和外部或者其他作用域中的变量重名，不会受到任何影响。<br />比如，一个班级有两个叫张三的，是会影响到提问问题的。但是两个张三如果分散在不同的组里，就不会影响了。<br><a name="kbM6e"></a></p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>在script中有一个作用域叫全局作用域。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 这里就是全局作用域  </span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>全局作用域中声明的变量函数等有一个特定，所有的其他作用域都能访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1 函数中可以获取到全局中的变量</span><br>&#125;<br><br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><p><a name="nQZMZ"></a></p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>每个函数内部都有独立的作用域，函数中的变量只能被函数内部的作用域获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> () &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在函数内部，函数作用域中的变量优先被访问，只有没有这个变量的时才会向作用域外访问。直到都没有就报错。（函数中变量优先级高于全局作用域）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> () &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br>   <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br>  &#125;<br>  <br>  <span class="hljs-title function_">fn</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// 报错</span><br>&#125;<br></code></pre></td></tr></table></figure><p>参数也是变量，叫参数变量，属于函数内部。参数变量的优先级低于函数内部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (x, y) &#123;<br>  x = <span class="hljs-number">10</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">// 10</span><br>&#125;<br><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">20</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>参数变量在使用时就是一个声明变量的过程，所能不能重复声明（针对let和const），非必要，尽量避免参数变量和函数内部变量名冲突。<br />外部变量能不能和参数变量冲突呢？？？函数内部的变量的可以和全局变量相同名称，内部优先，因为参数变量页属于函数，所以可以冲突，优先获取参数变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> year = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFulleYear</span>()<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isLeapYear</span> (year) &#123;<br>  <span class="hljs-comment">// year用的是参数变量year，而不是全局year</span><br>&#125;<br><br><span class="hljs-title function_">isLeapYear</span>(year) <span class="hljs-comment">// 这个year是全局中的year</span><br></code></pre></td></tr></table></figure><p><a name="DAVKb"></a></p><h3 id="函数作用域的应用"><a href="#函数作用域的应用" class="headerlink" title="函数作用域的应用"></a>函数作用域的应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// function () &#123;&#125; // 匿名函数</span><br><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;()<br><br><br><br></code></pre></td></tr></table></figure><p><a name="TSBs2"></a></p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>js最初没有所谓的块级作用域，就是在代码块中的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (条件) &#123;<br>  <span class="hljs-comment">// 这个就是代码块</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>ES6中提出了<code>let</code>和<code>const</code>这两个声明变量的方式赋予了js块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (条件) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>那么如果我们确实要在代码块内部对变量赋值，又想在外部获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a <br><span class="hljs-keyword">if</span> (条件) &#123;<br>  a = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>当我们使用for循环时，let和var声明的i最终表现不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-comment">// 可以正确的获取到i的值</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>一个应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btn.<span class="hljs-property">length</span>; i++) &#123;<br>  btn[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 如果使用let声明，则点击不同的按钮，出现不同的下标，如果使用var，则都是btn.length</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="jSN4T"></a></p><h2 id="var存在的问题"><a href="#var存在的问题" class="headerlink" title="var存在的问题"></a>var存在的问题</h2><p><a name="Maxvi"></a></p><h3 id="不存在块级作用域"><a href="#不存在块级作用域" class="headerlink" title="不存在块级作用域"></a>不存在块级作用域</h3><p>var没有块级作用域，所以在代码块中声明的变量，外部可以直接获取<br><a name="pcEMv"></a></p><h3 id="var变量提升"><a href="#var变量提升" class="headerlink" title="var变量提升"></a>var变量提升</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// undefined </span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>上面代码相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>let const都不会有这个情况。<br><a name="S0HqO"></a></p><h3 id="函数中声明变量的话，如果不屑声明的关键字，则会变成全局变量"><a href="#函数中声明变量的话，如果不屑声明的关键字，则会变成全局变量" class="headerlink" title="函数中声明变量的话，如果不屑声明的关键字，则会变成全局变量"></a>函数中声明变量的话，如果不屑声明的关键字，则会变成全局变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> () &#123;<br>  x = <span class="hljs-number">10</span><br>&#125;<br><br><span class="hljs-title function_">fn</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/33-%E5%87%BD%E6%95%B0/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/33-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>函数的作用是为了封装代码，让代码多次执行的更容易。函数中有参数和返回值。<br><a name="zWl4Z"></a></p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名 () &#123;<br>  <br>&#125;<br><br><span class="hljs-keyword">function</span> 函数名 (参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, 参数n) &#123;<br><br>&#125;<br><br><span class="hljs-keyword">function</span> 函数名 () &#123;<br>  <span class="hljs-keyword">return</span> 返回值<br>&#125;<br><br><span class="hljs-keyword">function</span> 函数名 (参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, 参数n) &#123;<br>  <span class="hljs-keyword">return</span> 返回值<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们再设计函数时，要考虑到函数的复用性以及可用性。<br />函数需要被调用。函数中的代码是不会自己执行，需要我们进行调用才能执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名 () &#123;&#125;<br><br>函数名()<br></code></pre></td></tr></table></figure><p><a name="KHjpv"></a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数有返回的操作，使用return</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名 () &#123;<br>  <span class="hljs-comment">// return前代码正常执行</span><br>  <br>  <span class="hljs-keyword">return</span> 返回值<br>  <span class="hljs-comment">// return 后直接跳转到函数外，结束执行</span><br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>！！！！！！！重要，如果一个函数没有返回值，则调用该函数后，会得到undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名 () &#123;&#125;<br><br><span class="hljs-keyword">let</span> 变量 = 函数名() <span class="hljs-comment">// 这个操作就是获取到函数调用后的结果 这个结果是undefined，因为函数没有返回值</span><br></code></pre></td></tr></table></figure><p>如果一个函数有返回值，则会得到return后面的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名 () &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;值&quot;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> 变量 = 函数名() <span class="hljs-comment">// 这个变量就是我们函数的返回值 就是那个 &quot;值&quot;</span><br></code></pre></td></tr></table></figure><p>返回值一般不是固定的值，都是要根据对应的函数中的参数进行相关的计算得到的结果。<br><a name="D5HYI"></a></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>所谓参数就是函数的括号中的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名 (形参) &#123;&#125;<br><br>函数名(实参)<br></code></pre></td></tr></table></figure><p>所谓形参就是你写的变量名，是什么名字都行，所谓实参是具体的值，必须根据要求写值。本质上来讲，所谓的传参，就是把变量声明的过程写到了两个步骤里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名 (参数名) &#123;&#125;<br><br>函数名 (具体的值)<br><br><span class="hljs-comment">// 相当于 let 参数名 = 具体的值</span><br></code></pre></td></tr></table></figure><p>以前我们写代码，是利用具体的值在写代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">100</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * num) <span class="hljs-comment">// 这个num就是上面的变量，就是个具体的值</span><br></code></pre></td></tr></table></figure><p>到函数里，我们要给函数的参数假象的一个实际的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名 (num) &#123;<br>  <span class="hljs-comment">// 未来调用该函数时，需要传进来一个数字，传错就不能正常得到结果</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * num)<br>&#125;<br><br><span class="hljs-keyword">let</span> 随机数<span class="hljs-number">100</span> = 函数名(<span class="hljs-number">100</span>)<br><span class="hljs-keyword">let</span> 随机数<span class="hljs-number">10</span> = 函数名(<span class="hljs-number">10</span>)<br><br><span class="hljs-keyword">let</span> 变量 = 函数名(<span class="hljs-string">&quot;字符串&quot;</span>) <span class="hljs-comment">// 这个就不能正常返回结果</span><br></code></pre></td></tr></table></figure><p>声明函数时括号中写的参数叫形参，调用函数时，写的值叫实参，需要根据函数的要求写。<br><a name="F4ypb"></a></p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数就是没有函数名的函数，匿名函数有几个常见的使用位置<br><a name="zVAZw"></a></p><h4 id="函数表达式声明函数"><a href="#函数表达式声明函数" class="headerlink" title="函数表达式声明函数"></a>函数表达式声明函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> () &#123;&#125; <span class="hljs-comment">// 函数声明式，函数也会提升到作用域的最顶端</span><br><br><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">// 函数表达式，这个函数需要先声明再使用。个人推荐用这种写法</span><br><span class="hljs-title function_">fn</span>() <span class="hljs-comment">// 调用时和函数声明式相同</span><br><br><span class="hljs-keyword">let</span> 变量名 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p><a name="rCdI4"></a></p><h4 id="对象或者事件中"><a href="#对象或者事件中" class="headerlink" title="对象或者事件中"></a>对象或者事件中</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">fn</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="oJM6u"></a></p><h4 id="自执行函数（自调用函数）IIFE"><a href="#自执行函数（自调用函数）IIFE" class="headerlink" title="自执行函数（自调用函数）IIFE"></a>自执行函数（自调用函数）IIFE</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;())<br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;)()<br>!<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; ()<br></code></pre></td></tr></table></figure><p>使用自执行函数的目的是为了产生一个函数作用域，我们的代码都卸载自执行函数内部，就不会和外界的变量冲突了。<br />未来写代码，先写一个自执行函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 代码写在大括号中，他的作用就是防止其他人写的代码影响到我们的代码。</span><br>&#125; ())<br></code></pre></td></tr></table></figure><p><a name="zqVAu"></a></p><h2 id="到底该怎么确认形参"><a href="#到底该怎么确认形参" class="headerlink" title="到底该怎么确认形参"></a>到底该怎么确认形参</h2><p>在我们描述函数功能时，其实已经能够确定形参了。<br><a name="YKtpv"></a></p><h3 id="封装一个函数，请求两个数的和"><a href="#封装一个函数，请求两个数的和" class="headerlink" title="封装一个函数，请求两个数的和"></a>封装一个函数，请求两个数的和</h3><p>封装函数时，形参就像是一个没有赋值的变量，我们想叫什么名字就叫什么名字（得符合语法规定）<br />未知的值就是我们的形参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span> (x, y) &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 这样写不会有任何反应</span><br><br><span class="hljs-comment">// 一般情况下，有返回值，需要获取并且赋值给变量</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment">// num就是3</span><br></code></pre></td></tr></table></figure><p><a name="Hibuj"></a></p><h3 id="封装一个函数，判断一个数是否是偶数"><a href="#封装一个函数，判断一个数是否是偶数" class="headerlink" title="封装一个函数，判断一个数是否是偶数"></a>封装一个函数，判断一个数是否是偶数</h3><p>一个数是谁，这就是形参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isEven</span> (x) &#123;<br>  <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> === <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">let</span> res = <span class="hljs-title function_">isEven</span>(<span class="hljs-number">10</span>) <br><span class="hljs-comment">// res就是true</span><br></code></pre></td></tr></table></figure><p><a name="QStSb"></a></p><h3 id="封装一个函数，判断某个值在某个数组中的下标"><a href="#封装一个函数，判断某个值在某个数组中的下标" class="headerlink" title="封装一个函数，判断某个值在某个数组中的下标"></a>封装一个函数，判断某个值在某个数组中的下标</h3><p>两个参数，某个值target，某个数组arr</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">indexOf</span> (arr, target) &#123;<br>  <br>&#125;<br><br><span class="hljs-title function_">indexOf</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], <span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">indexOf</span> (target, arr) &#123;<br><br>&#125;<br><br><span class="hljs-title function_">indexOf</span>(<span class="hljs-number">1</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>实参就是在调用函数时写在括号中的具体值。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对象的本质</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/32-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/32-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<p>为什么数字字符串布尔值不是对象，却可以调用一些方法，使用一些属性呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br>num.<span class="hljs-title function_">toString</span>()<br></code></pre></td></tr></table></figure><p>因为我们JS中提供很多对象。就像数组，我们可以直接通过<code>[]</code>声明数组，也可以通过<code>new Array()</code><br />我们的字符串数字布尔值等，他们再调用方法时，js会帮助我们。通过new Number new String new Boolean来把对应的原始值，转换为对象，然后再调用相关的属性或方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br>num.<span class="hljs-title function_">toString</span>()<br><br><span class="hljs-comment">// 本质上</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(num).<span class="hljs-title function_">toString</span>()<br></code></pre></td></tr></table></figure><p><a name="QL33H"></a></p><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><p>这个是获取到某写对象的原始值。这个方法我们不会主动使用，这是给JS内部自己使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">valueOf</span>()) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>new String new Number new Boolean他们生成的对象的valueOf都是对应的原始值。<br />数组，对象的valueOf得到的还是自身。<br />在我们进行相关的比较时，会将对应的内容转换为原始值进行比较</p><ol><li>先通过valueOf转为原始值，如果成功则比较</li><li>如果不成功，则再通过toString转成字符串进行比较<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[] == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>数组转字符串，会变成 去掉中括号后的字符串 <code>[1,2,3]</code>&#x3D;&gt;<code>&quot;1,2,3&quot;</code><br />对象转字符串，会变成<code>[object Object]</code></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内置对象和方法</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/31-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/31-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><a name="SArO4"></a></p><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>Math、Array、String、Number、Date<br />内置对象不需要重新声明，最多需要我们new 一下<br><a name="LTPg9"></a></p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math不需要new，包含了一些常量属性和方法<br><a name="PRYpp"></a></p><h3 id="PI"><a href="#PI" class="headerlink" title="PI"></a>PI</h3><p>圆周率PI，不是一个精确值，用于JS计算已经足够了。<br><a name="gPANz"></a></p><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><ul><li>Math.sin()</li><li>Math.cos()</li><li>Math.tan()</li><li>Math.asin()</li><li>Math.acos()</li><li>Math.atan()</li><li>Math.atan2()</li></ul><p>sin cos tan里边写的参数是弧度单位.<br />1弧度 &#x3D; 180 &#x2F; PI 度<br />1度 &#x3D; PI &#x2F; 180 弧度<br />asin acos atan 根据正弦余弦正切值求出对应的角的弧度.<br />atan2(x, y) 指的是对边长度和临边长度.<br><a name="McHIc"></a></p><h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h3><p>随机数生成 0 - 1的随机数，包含0 不包含1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量 = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()<br></code></pre></td></tr></table></figure><p>如果我们想生成0-n的随机数，可以通过下面的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量 = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * n<br></code></pre></td></tr></table></figure><p>如果我们想生成0-n的随机整数数，可以通过下面的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量 = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * n)<br><span class="hljs-keyword">let</span> 变量 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * n)<br></code></pre></td></tr></table></figure><p>如果我们想生成m - n的随机数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量  = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (n - m + <span class="hljs-number">1</span>) + m)<br></code></pre></td></tr></table></figure><p><a name="AZOQG"></a></p><h3 id="Math-max-Math-min"><a href="#Math-max-Math-min" class="headerlink" title="Math.max Math.min"></a>Math.max Math.min</h3><p>可以通过对应的方法获取多个数中的最大值或者最小值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> maxNum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, 参数n) <span class="hljs-comment">// 返回的值为最大值</span><br><span class="hljs-keyword">let</span> minNum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, 参数n) <span class="hljs-comment">// 返回的值为最小值</span><br></code></pre></td></tr></table></figure><p><a name="hzY95"></a></p><h3 id="获取约等数"><a href="#获取约等数" class="headerlink" title="获取约等数"></a>获取约等数</h3><ul><li>Math.round(num) 四舍五入</li><li>Math.floor(num) 去尾取整</li><li>Math.ceil(num) 进一取整<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>) <span class="hljs-comment">// 0 - 100 不包含100</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>) <span class="hljs-comment">// 0 - 100 包含100</span><br></code></pre></td></tr></table></figure><a name="bkvEV"></a></li></ul><h3 id="Math-abs-num"><a href="#Math-abs-num" class="headerlink" title="Math.abs(num)"></a>Math.abs(num)</h3><p>获取到一个数的绝对值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">1</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p><a name="umHg7"></a></p><h3 id="求次方开方"><a href="#求次方开方" class="headerlink" title="求次方开方"></a>求次方开方</h3><ul><li>Math.sqrt</li><li>Math.cbrt</li><li>Math.pow</li><li>Math.hypot<br><a name="McL3H"></a></li></ul><h4 id="Math-pow"><a href="#Math-pow" class="headerlink" title="Math.pow"></a>Math.pow</h4><p>求一个数的几次方</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(数字, 幂)<br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 8</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>/<span class="hljs-number">2</span>) <span class="hljs-comment">// 1.414</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">2</span>) <span class="hljs-comment">// 0.25</span><br></code></pre></td></tr></table></figure><p><a name="dTNhD"></a></p><h4 id="Math-sqrt"><a href="#Math-sqrt" class="headerlink" title="Math.sqrt"></a>Math.sqrt</h4><p>求一个数的平方根</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// 2</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-number">16</span>) <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p><a name="Dnkst"></a></p><h4 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt"></a>Math.cbrt</h4><p>求一个数的立方根</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cbrt</span>(<span class="hljs-number">8</span>) <span class="hljs-comment">// 2 </span><br></code></pre></td></tr></table></figure><p><a name="Wo3vC"></a></p><h4 id="Math-hypot"><a href="#Math-hypot" class="headerlink" title="Math.hypot"></a>Math.hypot</h4><p>所有参数的平方和求平方根, 勾股定理中,可以直接帮我们计算斜边.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">hypot</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 5  3 * 3 + 4 * 4 = 25  5 * 5 = 25</span><br></code></pre></td></tr></table></figure><p><a name="hfRGh"></a></p><h2 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h2><p>下面的对象都需要new <br />Date用来获取计算机上时间.使用前需要先生成日期对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660288870835-2a60658c-6bca-42ff-980e-6032b3b5a855.png#clientId=u4840162c-0084-4&from=paste&height=24&id=u10f63a12&name=image.png&originHeight=24&originWidth=322&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2094&status=done&style=none&taskId=u41814581-5144-4cf3-8dd0-03414f4babb&title=&width=322" alt="image.png"><br />打印出来的这个日期是一个字符串,但实际上是一个对象.想要看到这个对象的原本面目,打印时使用数组包裹.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([date])<br></code></pre></td></tr></table></figure><p>new Date可以自己生成对应的自定义的时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">5000</span>) <span class="hljs-comment">// 在1970年1月1日0点0分0秒0毫秒 + 5000毫秒 </span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2000&quot;</span>) <span class="hljs-comment">// 2000年</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2019-12-2&quot;</span>) <span class="hljs-comment">// 2019年12月2日</span><br></code></pre></td></tr></table></figure><p><a name="jUKNM"></a></p><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><p><a name="wG2Gx"></a></p><h4 id="getYear-getFullYear"><a href="#getYear-getFullYear" class="headerlink" title="getYear getFullYear"></a>getYear getFullYear</h4><p>一般用getFullYear获取固定的年份, getYear获取到的是距离1900年的年数.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getFullYear</span>()) <span class="hljs-comment">// 2022</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getYear</span>()) <span class="hljs-comment">// 122</span><br></code></pre></td></tr></table></figure><p><a name="UxXve"></a></p><h4 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth"></a>getMonth</h4><p>获取到的值从0开始,到11结束,0-11分别代表 1-12月.在进行月份的计算时,要+1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> month = date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><a name="apFji"></a></p><h4 id="getDay"><a href="#getDay" class="headerlink" title="getDay"></a>getDay</h4><p>表示当天是一周中的第几天,从0开始到6结束.0表示周日,其他数字表示对应周一到周六</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> day = date.<span class="hljs-title function_">getDay</span>() <br></code></pre></td></tr></table></figure><p><a name="VdFhs"></a></p><h4 id="getDate"><a href="#getDate" class="headerlink" title="getDate"></a>getDate</h4><p>获取到当天的日期,几号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> d = date.<span class="hljs-title function_">getDate</span>() <span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><p><a name="ZKriA"></a></p><h4 id="getHours"><a href="#getHours" class="headerlink" title="getHours"></a>getHours</h4><p>获取小时<br><a name="ItCpY"></a></p><h4 id="getMiuntes"><a href="#getMiuntes" class="headerlink" title="getMiuntes"></a>getMiuntes</h4><p>获取分钟<br><a name="agb9q"></a></p><h4 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds"></a>getSeconds</h4><p>获取秒数<br><a name="W6jvs"></a></p><h4 id="getMilliseconds"><a href="#getMilliseconds" class="headerlink" title="getMilliseconds"></a>getMilliseconds</h4><p>获取毫秒数<br><a name="C6eNR"></a></p><h4 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h4><p>时间戳:严格意义上来讲,时间戳表示当前时间距离1970年1月1日0点0分0秒的秒数.但是,js获取到的是毫秒数.<br />我们可以通过 new Date().getTime() 获取到距离1970年1月1日0点0分0秒的毫秒数.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>date.<span class="hljs-title function_">getTime</span>()<br></code></pre></td></tr></table></figure><p>我们一般不用它,一般使用新的用法<code>Date.now()</code><br><a name="apPuO"></a></p><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><p>所有的日期对象中设置时间的方法叫<code>setXXX</code>.设置时，我们可以超出对应的上限，超出后，会跑到下一个时间<br><a name="IbOrU"></a></p><h4 id="setDate"><a href="#setDate" class="headerlink" title="setDate"></a>setDate</h4><p>设置当前日期对象中的date值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-comment">// 今天 2022 8 12</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getDate</span>()) <span class="hljs-comment">// 12</span><br>date.<span class="hljs-title function_">setDate</span>(<span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getDate</span>()) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p><a name="Y21Qx"></a></p><h4 id="setFullYear"><a href="#setFullYear" class="headerlink" title="setFullYear"></a>setFullYear</h4><p>设置当前的日期对象的年份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>date.<span class="hljs-title function_">setFullYear</span>(<span class="hljs-number">2000</span>) <span class="hljs-comment">// 这个日期对象的getFullYear就是2000</span><br></code></pre></td></tr></table></figure><p><a name="NIyb0"></a></p><h4 id="setMonth"><a href="#setMonth" class="headerlink" title="setMonth"></a>setMonth</h4><p>设置当前的日期对象的月份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>date.<span class="hljs-title function_">setMonth</span>(<span class="hljs-number">8</span>) <span class="hljs-comment">// 这个日期对象的getMonth就是8</span><br>date.<span class="hljs-title function_">setMonth</span>(<span class="hljs-number">12</span>)<br></code></pre></td></tr></table></figure><p><a name="HWLf9"></a></p><h4 id="setHours"><a href="#setHours" class="headerlink" title="setHours"></a>setHours</h4><p>设置对应的小时数<br><a name="zPLhN"></a></p><h4 id="setMinutes"><a href="#setMinutes" class="headerlink" title="setMinutes"></a>setMinutes</h4><p>设置对应的分钟数<br><a name="PrYNf"></a></p><h4 id="setSeconds"><a href="#setSeconds" class="headerlink" title="setSeconds"></a>setSeconds</h4><p>设置对应的秒数<br><a name="tnEjT"></a></p><h4 id="setMilliseconds"><a href="#setMilliseconds" class="headerlink" title="setMilliseconds"></a>setMilliseconds</h4><p>设置对应的毫秒数<br><a name="jcGIH"></a></p><h4 id="setTime"><a href="#setTime" class="headerlink" title="setTime"></a>setTime</h4><p>参数为毫秒数，或生成一个1970年过对应毫秒数后的一个时间对象。<br><a name="Vy3Sj"></a></p><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>GMT 格林尼治时间（世界时）<br />UTC 协调世界时（原子时）这种更精确。后续使用相关的Date方法时也建议使用UTC相关方法<br />&#96;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组和对象</title>
    <link href="/%E5%AD%A6%E4%B9%A0/js/30-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <url>/%E5%AD%A6%E4%B9%A0/js/30-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p><a name="UWNlq"></a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>当我们要存储很多相似信息时可以使用数组，数组就是<code>[]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[] <span class="hljs-comment">// 空数组</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>] <br>[<span class="hljs-string">&#x27;刘浩然&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>]<br>[<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>]<br></code></pre></td></tr></table></figure><p>我们创建出来的数组，需要赋值给一个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量名 = []<br><span class="hljs-keyword">let</span> 变量名 = [值, 值<span class="hljs-number">2</span>, 值n]<br></code></pre></td></tr></table></figure><p>下面创建数组的方式不推荐</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>()<br><span class="hljs-keyword">let</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(数量) <span class="hljs-comment">// 生成一个对应长度的空数组 数量书需要是一个number类型</span><br><span class="hljs-keyword">let</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(非number类型) <span class="hljs-comment">// 直接生成一个数组，中间有对应的值</span><br><span class="hljs-keyword">let</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(值, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>, 值n) <span class="hljs-comment">// [值, 值2, 值3, 值n]</span><br></code></pre></td></tr></table></figure><p><a name="f0R8b"></a></p><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><p>在数组中，有几个值，长度就是几，获取长度可以通过<code>length</code>来获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">数组.属性名<br><br>数组.<span class="hljs-property">length</span> <span class="hljs-comment">// 获取到数组长度的</span><br></code></pre></td></tr></table></figure><p><a name="MtXAT"></a></p><h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><p>数组和字符串都有下标的概念，所谓下标就是我们对应的值的顺序，从0开始-&gt;length-1结束，下标我们一般称其为<code>index</code><br />那么如何根据下标找到对应数组中对应的值呢？？？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">数组[下标]<br></code></pre></td></tr></table></figure><p><a name="zWQTC"></a></p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>遍历数组的目的，是为了拿到数组中的每一个值<br />遍历数组是一个固定的写法：<br />正序遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; 数组.<span class="hljs-property">length</span>; i++) &#123;<br>  <span class="hljs-comment">// 数组[i] 就是每一个值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>倒序遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = 数组.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>  <span class="hljs-comment">// 数组[i] 就是每一个值</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="abcrq"></a></p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>数组中包含数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[[值, 值<span class="hljs-number">2</span>, [值, 值<span class="hljs-number">2</span>]], [值, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>]]<br></code></pre></td></tr></table></figure><p><a name="H8KYp"></a></p><h3 id="设置数组中的值"><a href="#设置数组中的值" class="headerlink" title="设置数组中的值"></a>设置数组中的值</h3><p><code>数组[下标] = 值</code>如果原位置有值，则覆盖对应的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;新的值&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, &quot;新的值&quot;, 3]</span><br><br>arr[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;新的值&quot;</span> <span class="hljs-comment">// 当我们强行添加一个不存在的下标时，会再本身的长度之后到对应的下标之间添加空的值 </span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660699634901-34322229-ff87-4d45-83f3-8a711bc9916d.png#clientId=ueda81379-0a93-4&from=paste&height=26&id=u1c456a33&name=image.png&originHeight=26&originWidth=182&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1424&status=done&style=none&taskId=u782fcb2e-3723-479f-883d-136c17b8482&title=&width=182" alt="image.png"><br><a name="L8h55"></a></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象拥有一个比数组更好的一个特性，每个值都有名字。以<code>key: value</code>（姓名: 值）键值对</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  属性名: 属性值,<br>  属性名<span class="hljs-number">2</span>: 属性值<span class="hljs-number">2</span>,<br>  <span class="hljs-attr">key</span>: value,<br>  <span class="hljs-attr">key2</span>: value2,<br>  方法名: <span class="hljs-keyword">function</span> (<span class="hljs-params">参数</span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要把对象赋值给一个变量才能使用，可以把属性名当成一个变量名，按照规范任意定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量名 = &#123;<br>  属性名: 属性值,<br>  属性名<span class="hljs-number">2</span>: 属性值<span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-keyword">let</span> stu = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="KsjeR"></a></p><h3 id="获取到对象中对应的属性的属性值"><a href="#获取到对象中对应的属性的属性值" class="headerlink" title="获取到对象中对应的属性的属性值"></a>获取到对象中对应的属性的属性值</h3><p>如果我们想要获取到对应的属性值，可以通过<code>对象.属性名</code>的方式获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> stu = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><br>stu.<span class="hljs-property">name</span> <span class="hljs-comment">// 张三</span><br></code></pre></td></tr></table></figure><p>新的标准中，我们可以使用<code>对象[&#39;属性名&#39;]</code>获取对应的值。这种写法前期基本用不到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">stu[<span class="hljs-string">&#x27;name&#x27;</span>] <span class="hljs-comment">// 张三</span><br></code></pre></td></tr></table></figure><p>我们可以使用变量作为属性名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> n = <span class="hljs-string">&quot;name&quot;</span><br>stu[n] <span class="hljs-comment">// 张三</span><br></code></pre></td></tr></table></figure><p>对象最大的作用，是可以写复杂的数据了。对象中的属性值可以是任意类型的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-attr">sibbing</span>: [<span class="hljs-string">&quot;大明&quot;</span>, <span class="hljs-string">&quot;小红&quot;</span>]<br>&#125;<br><br><span class="hljs-keyword">let</span> person2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小花&quot;</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>  <span class="hljs-attr">sibbing</span>: [<span class="hljs-string">&#x27;小华&#x27;</span>]<br>&#125;<br><br><br><span class="hljs-comment">// 既然写多个对象，不如把多个对象放在一个数组中</span><br><span class="hljs-keyword">let</span> people = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>    <span class="hljs-attr">sibbing</span>: [<span class="hljs-string">&quot;大明&quot;</span>, <span class="hljs-string">&quot;小红&quot;</span>]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小花&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>    <span class="hljs-attr">sibbing</span>: [<span class="hljs-string">&#x27;小华&#x27;</span>]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>遇到对象就<code>对象.xxxx</code>遇到数组就<code>数组[下标]</code>。遇到 aaa.xxx 那么aaa一定是个对象。遇到aaa[0] aaa大概率是个数组。<br><a name="N9tMN"></a></p><h3 id="设置对象中的值"><a href="#设置对象中的值" class="headerlink" title="设置对象中的值"></a>设置对象中的值</h3><p>通过<code>对象.属性名 = 值</code>可以给对象添加新的属性，或者覆盖之前的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br>&#125;<br><br>obj.<span class="hljs-property">c</span> = <span class="hljs-number">3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj) <span class="hljs-comment">// &#123;a: 1, b: 2, c: 3&#125;</span><br><br>obj.<span class="hljs-property">a</span> = <span class="hljs-number">4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj) <span class="hljs-comment">// &#123;a: 4, b: 2, c: 3&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660699904787-c80e834c-1164-49a3-86d8-56ebf2d6b857.png#clientId=ueda81379-0a93-4&from=paste&height=174&id=ud0f85753&name=image.png&originHeight=174&originWidth=202&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6888&status=done&style=none&taskId=u71680255-04c9-4150-a2fb-0f9662ff49b&title=&width=202" alt="image.png"><br />虽然上面显示的时a: 1,但是点开后还是a:4，这是浏览器开发者工具的问题，因为点开时会取获取最新的对象状态。<br><a name="pQuhP"></a></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>对象中可以写函数，对象中的函数叫方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  方法名: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写在对象中的函数和普通的函数最大的区别在于调用问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj.方法名()<br></code></pre></td></tr></table></figure><p>对象的作用仅仅是为了添加一个命名空间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">zhangsan</span> () &#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">zhangsan</span> () &#123;&#125; <span class="hljs-comment">// 冲突</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">zhangsan</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">zhangsan</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在对象中，函数有新的写法，这种写法更简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-comment">// 原写法</span><br>  方法名: <span class="hljs-keyword">function</span> (<span class="hljs-params">参数</span>) &#123;<br>  &#125;,<br>  <br>  <span class="hljs-comment">// 新写法 ES6</span><br>  方法名 (参数) &#123;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="GXcjg"></a></p><h3 id="对象和数组值获取的问题"><a href="#对象和数组值获取的问题" class="headerlink" title="对象和数组值获取的问题"></a>对象和数组值获取的问题</h3><p>对象中，如果去获取不存在的属性，则会返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>) <span class="hljs-comment">// 张三</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">age</span>) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>数组中，如果去获取大于长度的下标的值，会返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>]) <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">10</span>]) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>如果我们对象名写错了，也会报错，提示变量找不到。<br />如果我们的对象是<code>null</code><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660266553906-dcaa9afb-3eb6-4685-ada0-62502333f559.png#clientId=uca5e2b04-a899-4&from=paste&height=52&id=u6d1584ab&name=image.png&originHeight=52&originWidth=504&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4587&status=done&style=none&taskId=u58e36923-7ed7-4daf-ba7a-b87326681d9&title=&width=504" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cannot read properties of undefined或者null (reading &#x27;某个属性名&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/203294/1660266653740-9d62efeb-3fa1-428f-a98e-f95efbc100e8.png#clientId=uca5e2b04-a899-4&from=paste&height=36&id=u02da6026&name=image.png&originHeight=36&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3977&status=done&style=none&taskId=uaca87e55-21ee-41d4-baee-c988e7f3cb6&title=&width=495" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cannot set properties of undefined或者null (setting &#x27;某个属性名&#x27;)<br></code></pre></td></tr></table></figure><p>遇到这种问题，先找到对应的行数，然后找到<code>属性名</code>，然后查看属性名前面的对象是否没有正常的获取。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
